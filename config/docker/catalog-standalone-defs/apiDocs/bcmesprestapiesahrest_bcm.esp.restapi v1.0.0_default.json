{
    "openapi": "3.0.1",
    "info": {
        "title": "CA Workload Automation ESP Edition RESTful Web Services",
        "description": "## ESP scheduler engine public rest APIs\n\n # __Model ID Information__\nUse these IDs only as an opaque unique identifier for individual models. The IDs are subject to change in later versions of the API.\n\n# __General HTTP Error code information:__\nThe following error codes apply to all endpoints. However, these codes are not defined in the following specification, because they are enforced at a higher level of implementation than the individual endpoints.\n\nThe codes are:\n- __401 - Unauthorized__\n- Similar to 403 Forbidden, but used when authentication is required and has either failed or has not yet been provided.\n- __408 - Request Timeout__\n- The client did not produce a request within the time that the server was prepared to wait. The client may repeat the request without modification later.\n- __429 - Too Many Requests__\n- Indicates that the server cannot handle the current level of concurrent API calls. The concurrent API calls can include either the total number of API calls, or the total number of calls to a specific API.\n- __500 - Internal Server Error__\n- A generic error message given when an unexpected condition was encountered and no other specific message is suitable.",
        "version": "12.3.3"
    },
    "servers": [
        {
            "url": "https://developer.mainframe.broadcom.com",
            "description": "Generated server url"
        }
    ],
    "paths": {
        "/api/v2/commands/job/resubmit": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'resubmit' command to the scheduler",
                "description": "Specifies that the job is to be resubmitted.",
                "operationId": "resubmit",
                "requestBody": {
                    "description": "Input parameters for the \u2018resubmit\u2019 command. For more details about command arguments, refer to \u2018Schema\u2019 tab.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJobResubmitV2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobResubmit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/withdraw": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'withdraw' command to the scheduler",
                "description": "This command withdraws the specified job from processing before it is completed.",
                "operationId": "withdraw",
                "requestBody": {
                    "description": "Input parameters for the 'withdraw' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobWithdraw"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/unwait": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'unwait' command to the scheduler",
                "description": "This command removes a job from wait status when it is waiting on a previous generation of the same job (job ancestor wait).",
                "operationId": "unwait",
                "requestBody": {
                    "description": "Input parameters for the 'unwait' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobUnwait"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/unrequest": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'unrequest' command to the scheduler",
                "description": "Specifies that the job is no longer to be requested.",
                "operationId": "unrequest",
                "requestBody": {
                    "description": "Input parameters for the 'unrequest' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobUnrequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/unbypass": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'unbypass' command to the scheduler",
                "description": "Specifies that the job is no longer to be bypassed.",
                "operationId": "unbypass",
                "requestBody": {
                    "description": "Input parameters for the 'unbypass' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobUnbypass"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/setreason": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'setreason' command to the scheduler",
                "description": "This command sets a reason without issuing any other command.",
                "operationId": "setReason",
                "requestBody": {
                    "description": "Input parameters for the 'setreason' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobSetReason"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/resubmit": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'resubmit' command to the scheduler",
                "description": "Specifies that the job is to be resubmitted.",
                "operationId": "resubmit_1",
                "requestBody": {
                    "description": "Input parameters for the \u2018resubmit\u2019 command. For more details about command arguments, refer to \u2018Schema\u2019 tab.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobResubmit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/request": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'request' command to the scheduler",
                "description": "Specifies that the job is to be requested.",
                "operationId": "request",
                "requestBody": {
                    "description": "Input parameters for the 'request' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/release": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'release(ESP)' command to the scheduler",
                "description": "This command removes a job that has not yet submitted out of the CA WA ESP Edition hold state.",
                "operationId": "release",
                "requestBody": {
                    "description": "Input parameters for the 'release' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobRelease"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/ready": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'ready' command to the scheduler",
                "description": "This command removes all job dependencies (except resources) from the job (including time, predecessors, manual hold).",
                "operationId": "ready",
                "requestBody": {
                    "description": "Input parameters for the 'ready' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobReady"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/hold": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'hold(ESP)' command to the scheduler",
                "description": "Places a job that has not yet submitted in the CA WA ESP Edition hold state.",
                "operationId": "hold",
                "requestBody": {
                    "description": "Input parameters for the 'hold' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobHold"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/expedite": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'expedite' command to the scheduler",
                "description": "This command expedites the job manually.",
                "operationId": "expedite",
                "requestBody": {
                    "description": "Input parameters for the 'expedite' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobExpedite"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/dropres": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'dropres' command to the scheduler",
                "description": "This command removes all resource requirements for this job.",
                "operationId": "dropres",
                "requestBody": {
                    "description": "Input parameters for the 'dropres' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobDropres"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/dropdep": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'dropdep' command to the scheduler",
                "description": "This command removes predecessor relationships from a job by marking the specified predecessor dependencies as satisfied.",
                "operationId": "dropDependencies",
                "requestBody": {
                    "description": "Enter the list of predecessors to be dropped in the 'dependencies' array. Predecessor names must be enclosed in quotes and separated by commas.</br>E.g. \"dependencies\": [\"job1\",\"job2\"].</br>If no dependencies are specified, then all predecessor relationships are removed.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJobDropDep"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobDropDependencies"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/complete": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'complete' command to the scheduler",
                "description": "This command simulates normal job completion. The command immediately posts all of the successor jobs and external references. You can complete a job that has failed, but does not need to be re-run.You can also complete a job before the job to execute.",
                "operationId": "complete",
                "requestBody": {
                    "description": "Input parameters for the 'complete' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobComplete"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/cancel": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'cancel' command to the scheduler",
                "description": "Specifies that the executing job is to be canceled and, optionally, purges it or requests a dump.",
                "operationId": "cancel",
                "requestBody": {
                    "description": "Valid values for command args 'cancelModifier' are 'none', dump' or 'purge'.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJobCancel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobCancel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/job/bypass": {
            "post": {
                "tags": [
                    "Job commands"
                ],
                "summary": "Send the job 'bypass' command to the scheduler",
                "description": "Specifies that the job is to be bypassed.",
                "operationId": "bypass",
                "requestBody": {
                    "description": "Input parameters for the 'bypass' command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadJob"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseJobBypass"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/trigger": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'trigger' command to the scheduler",
                "description": "The TRIGGER command triggers the execution of an event. The event execution either replaces the next scheduled execution (that is, brings forward the next execution), or it can be a temporary addition to the schedule.",
                "operationId": "trigger",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEventTrigger"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/suspend": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'suspend' command to the scheduler",
                "description": "The SUSPEND command increments the suspend count of an event.",
                "operationId": "suspend",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/simulate": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'simulate' command to the scheduler",
                "description": "Use the SIMULATE command to simulate the functions of an event.",
                "operationId": "simulate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEventSimulate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventSimulationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/resume": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'resume' command to the scheduler",
                "description": "The RESUME command decrements the suspend count associated with an event. When the suspend count reaches zero, the event is eligible for execution.",
                "operationId": "resume",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/release": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'release' command to the scheduler",
                "description": "The RELEASE command decrements the hold count associated with an event.",
                "operationId": "release_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/hold": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'hold' command to the scheduler",
                "description": "The HOLD command holds an event from being processed by ESP. This increments the event's hold count. While the hold count is greater than zero, the event's execution is postponed until the hold count is decremented by the RELEASE command.",
                "operationId": "hold_1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/event/delete": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Send the event 'delete' command to the scheduler",
                "description": "Use the DELETE command to delete an event definition.",
                "operationId": "delete",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/withdraw": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application 'withdraw' command to the scheduler",
                "description": "This command withdraws all jobs in the specified application from processing before they are completed. A withdrawn job is immediately completed and its status changes to WITHDRAWN (or EXTNL WITHDRAWN for external jobs whose home job was withdrawn).",
                "operationId": "withdraw_1",
                "requestBody": {
                    "description": "Input parameters for the \u2018withdraw\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplWithdraw"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/unwait": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application 'unwait' command to the scheduler",
                "description": "This command removes an application from the APPLWAIT status.",
                "operationId": "unwait_1",
                "requestBody": {
                    "description": "Input parameters for the \u2018unwait\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplUnwait"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/terminate": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application \u2018terminate\u2019 (also known as \"complete and release\") command to the scheduler",
                "description": "This command completes all the jobs in the application and the application itself. It will complete the application even if it is in state APPLHOLD or APPLWAIT.",
                "operationId": "terminate",
                "requestBody": {
                    "description": "Input parameters for the \u2018terminate\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplTerminate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/release": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application 'release' command to the scheduler",
                "description": "This command releases the application (removes it from the APPLHOLD state).",
                "operationId": "release_2",
                "requestBody": {
                    "description": "Input parameters for the \u2018release\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplRelease"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/hold": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application 'hold' command to the scheduler",
                "description": "This command holds the application. The command stops the submission of jobs in the application and places the application in the APPLHOLD state.",
                "operationId": "hold_2",
                "requestBody": {
                    "description": "Input parameters for the \u2018hold\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplHold"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/commands/application/complete": {
            "post": {
                "tags": [
                    "Application commands"
                ],
                "summary": "Send the application \u2018complete\u2019 command to the scheduler",
                "description": "This command completes all the jobs in the application. If the application is not in state APPLHOLD or APPLWAIT, the command also completes the application.",
                "operationId": "complete_1",
                "requestBody": {
                    "description": "Input parameters for the \u2018complete\u2019 command",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommandPayloadAppl"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommandResponseApplComplete"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/stop": {
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent Stop",
                "description": "Stops the specific agent.",
                "operationId": "stop",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "If the user is not allowed to stop the agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "200": {
                        "description": "Stopped agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/stop-start": {
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent Stop-Start",
                "description": "Stops and starts the specific agent.",
                "operationId": "stopStart",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "403": {
                        "description": "If the user is not allowed to stop-start the agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Stop-started agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/restart": {
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent Restart",
                "description": "Releases any held messages queued for transmission to the specified agent.",
                "operationId": "unquiesce",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Restarted agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user is not allowed to restart the agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/quiesce": {
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent Quiesce",
                "description": "Holds any messages queued for transmission to the specified agent.",
                "operationId": "quiesce",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Quiesced agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user is not allowed to quiesce the agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/ping": {
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent Ping",
                "description": "Tests the agent's connection",
                "operationId": "ping",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "If the user is not allowed to ping the agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Pinged agent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/parm": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Get agentparm.txt",
                "description": "Download agentparm.txt file",
                "operationId": "getParm",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "agentparm.txt content",
                        "content": {
                            "text/plain,application/json": {}
                        }
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "403": {
                        "description": "If the user is not allowed to download the agent parm",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Agents"
                ],
                "summary": "Update agentparm.txt",
                "description": "Update agentparm.txt and restart the agent",
                "operationId": "update",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "maxLength": 250000,
                                "minLength": 0,
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Update was successful."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "403": {
                        "description": "If the user is not allowed to update the agentparm.txt",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api": {
            "get": {
                "tags": [
                    "Others"
                ],
                "summary": "Returns a list of supported endpoints",
                "description": "This will return a list of endpoints which are supported by this server. \nIf the endpoint is supported in the multiple versions, the list will contain all supported versions of the endpoint.",
                "operationId": "versionInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiEntry"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                }
            }
        },
        "/api/v2/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieves a list of events",
                "description": "The LIST command retrieves a list of events.",
                "operationId": "getAll",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1, and the maximum is 200.",
                        "schema": {
                            "maximum": 200,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "description = Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax, for example name==\"event1\";prefix==\"ESP\". Refer to the EspEvent schema for searchable fields.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria, for example, name, prefix:desc.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of events.",
                        "content": {
                            "application/prs.hal-forms+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedModelEntityModelEventV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v2/events/{eventId}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieves a single event detail.",
                "description": "Retrieves a single event detail.",
                "operationId": "one",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The id of the event whose detail is being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An event detail.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/jobs/{id}": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieve a job record",
                "description": "Retrieves a specific job record by its ID.",
                "operationId": "getById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the job to be retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response contains the requested job record.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Job"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "## Not Found\nThe requested resource could not be found; it might be available again in the future. Subsequent requests by the client are permissible.\n###### possible reasons:\n- The ID provided is invalid.\n- The user is authorized but lacks permission to access the resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/jobs": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieves a list of jobs.",
                "description": "Retrieve a list of Job records. By default, only \"Active Jobs\" are returned. Active jobs are jobs that have data records available.",
                "operationId": "getAll_1",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax, for example applicationName==\"abc\";generation==5. Refer to the Job schema for searchable fields.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1, and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "maximum": 200,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria, for example, name, generation:desc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of running jobs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponsePageJob"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v2/jobs": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieves a list of jobs.",
                "description": "Retrieve a list of Job records. By default, only \"Active Jobs\" are returned. Active jobs are jobs that have data records available.",
                "operationId": "getAll_2",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax, for example applicationName==\"abc\";generation==5. Refer to the Job schema for searchable fields.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1, and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "maximum": 200,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria, for example, name, generation:desc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of running jobs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponsePageJob"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieves a list of events",
                "description": "The LIST command retrieves a list of events.",
                "operationId": "getAll_3",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1, and the maximum is 200.",
                        "schema": {
                            "maximum": 200,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "description = Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax, for example name==\"event1\";prefix==\"ESP\". Refer to the EspEvent schema for searchable fields.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria, for example, name, prefix:desc.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of events.",
                        "content": {
                            "application/prs.hal-forms+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagedModelEntityModelEvent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/events/{eventId}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieves a single event detail.",
                "description": "Retrieves a single event detail.",
                "operationId": "one_1",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The id of the event whose detail is being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An event detail.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/events/{eventId}/definition": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieves a single event definition text.",
                "description": "Retrieves a single event definition text.",
                "operationId": "one_2",
                "parameters": [
                    {
                        "name": "eventId",
                        "in": "path",
                        "description": "The id of the event whose definition is being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An event definition text.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "/************************************************************************/\n/* DEFINED BY TSOUSR8 AT 10.35 ON MON 26MAR2009                         */\n/*                    LAST RUN AT 11.09 ON MON 26MAR2009                */\n/************************************************************************/\nEVENT ID(PROD.FIRST_EVENT)\nSCHEDULE 5PM FIRST WORKDAY OF MONTH\nSUBMIT 'TEST.JCL.CNTL(JOB1)'\nENDDEF"
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/applications": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieves a list of applications.",
                "description": "Retrieves a list of running applications.",
                "operationId": "getAll_4",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax, for example, name==\"abc\";generation==5. Refer to the Application schema for searchable fields.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1, and the maximum is 200.",
                        "required": false,
                        "schema": {
                            "maximum": 200,
                            "minimum": 1,
                            "type": "integer",
                            "default": 100
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria, for example, name, generation:desc.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of running applications.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponsePageApplication"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/applications/{id}": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieve an application record",
                "description": "Retrieves a specific application record by its ID.",
                "operationId": "getById_1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the application to be retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response contains the requested application record.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Application"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "## Not Found\nThe requested resource could not be found; it might be available again in the future. Subsequent requests by the client are permissible.\n###### possible reasons:\n- The ID provided is invalid.\n- The user is authorized but lacks permission to access the resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/applications/{id}/flow": {
            "get": {
                "tags": [
                    "Monitoring"
                ],
                "summary": "Retrieve flow data of an application",
                "description": "Retrieves a specific application flow data specified by application ID. The flow data contains relationship between the jobs inside the application.",
                "operationId": "getFlow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the application of which flow data to be retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "## Not Found\nThe requested application could not be found; it might be available again in the future. Subsequent requests by the client are permissible.\n###### possible reasons:\n- The ID provided is invalid.\n- The user is authorized but lacks permission to access the resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The response contains the requested application flow data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Retrieves a list of agents",
                "operationId": "list",
                "parameters": [
                    {
                        "name": "size",
                        "in": "query",
                        "description": "The maximum number of records to be returned. The default is 100. The minimum is 1. For no limit use string: \"unlimited\".",
                        "schema": {
                            "minimum": 1,
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            ],
                            "default": "100"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the result used by paging. The default is 0.",
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search criteria in [RSQL](https://github.com/jirutka/rsql-parser) syntax."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The result sort criteria.\nUsage: attribute_name:[ASC|DESC] e.g. name:DESC. You can specify multiple values using comma."
                    }
                ],
                "responses": {
                    "403": {
                        "description": "If the user is not allowed to list agents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "An array of agents.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentListResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/logs": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Get Agent logs",
                "description": "Download agent logs zip file. By default, it will include all files from log directory.",
                "operationId": "getLogs",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeFiles",
                        "in": "query",
                        "description": "List of files to be included",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        }
                    }
                ],
                "responses": {
                    "403": {
                        "description": "If the user is not allowed to download the agent logs",
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamingResponseBody"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "200": {
                        "description": "ZIP data",
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamingResponseBody"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/logs/list": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Get Agent log files",
                "description": "List files of the agent log directory",
                "operationId": "getLogsList",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "200": {
                        "description": "List of files",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentLogsListResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the user is not allowed to list logs directory",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentLogsListResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/agents/{agent}/details": {
            "get": {
                "tags": [
                    "Agents"
                ],
                "summary": "Agent details",
                "description": "Get additional agent details",
                "operationId": "details",
                "parameters": [
                    {
                        "name": "agent",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Agent details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "## Internal Server Error\nA generic error message. This message displays when an unexpected condition occurs and no specific message is available."
                    },
                    "400": {
                        "description": "## Bad Request\nThe server cannot process the request due to a client error (for example, malformed syntax or invalid request message framing). The client must modify the request before sending the request again."
                    },
                    "401": {
                        "description": "## Unauthorized\nAuthentication is required and has failed or has not been provided."
                    },
                    "408": {
                        "description": "## Request Timeout\nThe time limit for sending a request expired. The client can repeat the request without modification."
                    },
                    "429": {
                        "description": "## Too Many Requests\nThe server cannot handle the current volume of concurrent API calls. The overall volume of concurrent API calls can compose of the total number of API calls or of the total number of calls to a specific API."
                    },
                    "503": {
                        "description": "## Service Unavailable\nThe REST server is shutting down, or the ESP master subsystem is unavailable."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "CommandPayloadCommandArgsResubmitJobV2": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "example": "My reason"
                    },
                    "ca11BypGDG": {
                        "type": "string",
                        "description": "The Bypass Generation Data Group (BYPGDG) operand is applicable to R processing only.\nOverrides the logic of Bypass Input Generation Data Group Processing for this rerun only. This allows the use of additional or different generation data groups as input.",
                        "example": "CAT",
                        "enum": [
                            "NO",
                            "YES",
                            "VER",
                            "CAT"
                        ]
                    },
                    "ca11Cc": {
                        "type": "integer",
                        "description": "The Condition Code (CC) operand is applicable to R processing only.\nSpecifies an integer in the range of zero to 4095.\nOverrides the default condition code (RETCODE=) in the CA Workload Automation Restart Option for z/OS Schedulers Option Table. By setting the condition code in the PARM value to another value, the operating system executes or skips steps as you have specified.",
                        "format": "int32",
                        "example": 8
                    },
                    "ca11End": {
                        "type": "string",
                        "description": "The END operand is applicable to R processing only.\nSpecifies endstep or endstep.endprocstep; endstep by itself is the stepname or step number in the JCL that executes the step where the rerun is to end. The default is the last step of the job.\nIn endstep.endprocstep, endprocstep is the stepname that executes the PROC containing the step where the rerun is to stop. endstep is the stepname in the PROC where the rerun is to stop.",
                        "example": "STEP20.PSTEP03"
                    },
                    "ca11HonorCc": {
                        "type": "string",
                        "description": "The HONORCC operand is applicable to R processing only.\nSpecifies whether to honor all or none of the condition codes from steps that precede the starting step of a rerun. The HONORCC parameter of the U11RMS step is applicable for CA Workload Automation Restart Option for z/OS Schedulers r11 and higher.",
                        "example": "ALL",
                        "enum": [
                            "ALL",
                            "NONE"
                        ]
                    },
                    "ca11Ltrcd": {
                        "type": "string",
                        "description": "The CA11_LRTCD operand is applicable to R processing only.\nOverrides the last return code for the specified step, in the format: 'step' or 'procstep.step'.",
                        "example": "procstep.step"
                    },
                    "ca11LtrcdCc": {
                        "type": "integer",
                        "description": "The CA11_LRTCD_CC operand is applicable to R processing only.\nSpecifies an integer in the range of zero to 4095, for example:",
                        "format": "int32",
                        "example": 8
                    },
                    "ca11Parm": {
                        "type": "string",
                        "description": "Specifies a string that appears verbatim as the PARM of the RMS step\u2019s EXEC statement.\nLimits: Up to 100 characters long.\nThis operand overrides the other AJ operands that affect the U11RMS step\u2019s EXEC parameters.",
                        "example": "R,STEP9,,BYPGDG(YES),RE=/10/"
                    },
                    "ca11Parm1": {
                        "type": "string",
                        "description": "Specifies an operand of the CA11PARM command.\nThe only operand currently supported is ABENDPGM.\nYou can specify up to 60 characters of information for each operand. The CA11PARM command is available only for jobs whose restart manager is CA WA Restart Option for z/OS Schedulers.",
                        "example": "ABENDPGM=GLAB1"
                    },
                    "ca11Parm2": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB2"
                    },
                    "ca11Parm3": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB3"
                    },
                    "ca11Parm4": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB4"
                    },
                    "ca11Parm5": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB5"
                    },
                    "ca11Parm6": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB6"
                    },
                    "ca11Parm7": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB7"
                    },
                    "ca11Parm8": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB8"
                    },
                    "ca11Parm9": {
                        "type": "string",
                        "example": "ABENDPGM=GLAB9"
                    },
                    "ca11ParmA": {
                        "type": "string",
                        "example": "ABENDPGM=GLABA"
                    },
                    "ca11ParmB": {
                        "type": "string",
                        "example": "ABENDPGM=GLABB"
                    },
                    "ca11ParmC": {
                        "type": "string",
                        "example": "ABENDPGM=GLABC"
                    },
                    "ca11Process": {
                        "type": "string",
                        "description": "Specifies the processing code used by the Run Handler program, U11RMS. U11RMS is parameter (PARM) driven. It uses processing codes and other PARMs to designate the type of processing to be performed.",
                        "example": "P",
                        "enum": [
                            "P",
                            "R",
                            "F",
                            "N",
                            "O"
                        ]
                    },
                    "ca11Pseudo": {
                        "type": "string",
                        "description": "Specifies to execute pseudo production processing. Pseudo processing tests a job on its first run to verify the actions CA Workload Automation Restart Option for z/OS Schedulers takes. A pseudo production run performs all of the same processing actions as a production run except that uncataloging and scratching of data sets does not occur.",
                        "example": "YES",
                        "enum": [
                            "YES",
                            "NO"
                        ]
                    },
                    "ca11Reason": {
                        "type": "string",
                        "description": "The REASON operand is applicable to R processing only.\nIndicates a reason for the rerun of a production job. The reason can be any word, phrase, code, or number for a maximum of 40 characters, which must be enclosed in single quotes if the string contains a blank. Do not use enclosing slashes in the CA11_REASON operand because the reason string is enclosed in slashes at job-submission time.",
                        "example": "myca11reason"
                    },
                    "ca11Resetp": {
                        "type": "string",
                        "description": "Reset-for-production indicator for CA11_PROCESS(F).\nIf you want to reset an existing CMT job record to production status, specify CA11 _PROCESS(F) and CA11_RESETP(YES) to let the AJ command decide how CMT job records are reset for production. AJ presently resets CMT records to production by setting the CA Workload Automation Restart Option for z/OS Schedulers step processing code to F at resubmission time.",
                        "example": "NO",
                        "enum": [
                            "YES",
                            "NO"
                        ]
                    },
                    "ca11Start": {
                        "type": "string",
                        "description": "The START operand is applicable to R processing only.\nSpecifies startstep or startstep.startprocstep; startstep by itself is the stepname or step number in the JCL that executes the program where the rerun is to start. The default is the first step of the job.\nIn startstep.startprocstep, startprocstep is the stepname that executes the PROC containing the step where the rerun is to start. startstep is the stepname in the PROC where the rerun is to start.",
                        "example": "STEP20.PSTEP03"
                    },
                    "ca11Sup11stp": {
                        "type": "string",
                        "description": "Suppresses the insertion of the U11RMS step when CA WA ESP Edition submits the job. This operand overrides the other AJ operands that affect the U11RMS step.",
                        "example": "NO",
                        "enum": [
                            "NO",
                            "YES"
                        ]
                    },
                    "ca11Usage": {
                        "type": "string",
                        "description": "Specifies a one-character alphanumeric usage code. This code is used in the parameter of the U11RMS step in the initial run of a job.",
                        "example": "A"
                    },
                    "casesensitive": {
                        "type": "boolean",
                        "description": "Disables case translation. Without this option, CA WA ESP Edition converts the values of all operands to uppercase. Use this option if the user parameters USER1-USER4 must be in lowercase or mixed case.",
                        "example": false,
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "dataset": {
                        "type": "string",
                        "description": "Specifies an explicit JCL library name from which a job is to be resubmitted. You can include the member name in dsname.",
                        "example": "test.data.set"
                    },
                    "encParm1": {
                        "type": "string",
                        "description": "Specifies an operand of the ENCPARM command. You can specify up to 60 characters of information for each operand. The ENCPARM command is available only for jobs whose restart manager is CA WA Restart Option ESP Edition.",
                        "example": "myencparm1"
                    },
                    "encParm2": {
                        "type": "string",
                        "example": "myencparm2"
                    },
                    "encParm3": {
                        "type": "string",
                        "example": "myencparm3"
                    },
                    "encParm4": {
                        "type": "string",
                        "example": "myencparm4"
                    },
                    "encParm5": {
                        "type": "string",
                        "example": "myencparm5"
                    },
                    "encParm6": {
                        "type": "string",
                        "example": "myencparm6"
                    },
                    "encParm7": {
                        "type": "string",
                        "example": "myencparm7"
                    },
                    "encParm8": {
                        "type": "string",
                        "example": "myencparm8"
                    },
                    "encParm9": {
                        "type": "string",
                        "example": "myencparm9"
                    },
                    "encParmA": {
                        "type": "string",
                        "example": "myencparma"
                    },
                    "encParmB": {
                        "type": "string",
                        "example": "myencparmb"
                    },
                    "encParmC": {
                        "type": "string",
                        "example": "myencparmc"
                    },
                    "exclStep": {
                        "type": "string",
                        "description": "Excludes a specific step or a list of specific steps from the list specified with FROMSTEP and TOSTEP. You can exclude a maximum of 100 steps.",
                        "example": "stepname"
                    },
                    "fromStep": {
                        "type": "string",
                        "description": "Specifies the first step of the job to be rerun. Use (stepname.procstepname) for steps in a CA WA ESP Edition procedure. You can use FROMSTEP only with CA WA Restart Option ESP Edition.",
                        "example": "stepname"
                    },
                    "jobName": {
                        "type": "string",
                        "description": "Specifies the job name for the rerun, if the name is different from the original name.",
                        "example": "name"
                    },
                    "member": {
                        "type": "string",
                        "description": "Specifies a member name of the JCL data set for the job to be resubmitted.",
                        "example": "mymember"
                    },
                    "restart": {
                        "type": "boolean",
                        "description": "Restarts the job using CA WA Restart Option ESP Edition.",
                        "example": false,
                        "enum": [
                            true,
                            false
                        ]
                    },
                    "rrJobId": {
                        "type": "integer",
                        "description": "Specifies the JES job number of the job being rerun. You can use RRJOBID only for jobs being restarted using CA WA Restart Option ESP Edition. By default, RRJOBID corresponds to the previous run of the job.",
                        "format": "int32",
                        "example": 1234
                    },
                    "toStep": {
                        "type": "string",
                        "description": "Specifies the last step of the job to be rerun. Use (stepname.procstepname) for steps in a CA WA ESP Edition procedure. The default is the last step. You can use TOSTEP only with CA WA Restart Option ESP Edition.",
                        "example": "stepname"
                    },
                    "user1": {
                        "type": "string",
                        "description": "Specifies user data for resubmitted jobs. This data passes to the USER1-USER4 symbolic variables. Initially, these variables are set to a null string (' ').\nYou can specify up to 68 characters of information for each value.\nIf the user data must be in lower or mixed case, specify the CASESENSITIVE option.",
                        "example": "myuser1"
                    },
                    "user2": {
                        "type": "string",
                        "example": "myuser2"
                    },
                    "user3": {
                        "type": "string",
                        "example": "myuser3"
                    },
                    "user4": {
                        "type": "string",
                        "example": "myuser4"
                    },
                    "verify": {
                        "type": "string",
                        "description": "VERIFY: Verifies that a data set and a member exist by opening and closing the member.\nNOVERIFY: Does not verify that a data set and a member exist.\nNONE: Does not include VERIFY and NOVERIFY in the AJ command.",
                        "example": "NONE",
                        "enum": [
                            "NONE",
                            "VERIFY",
                            "NOVERIFY"
                        ]
                    }
                }
            },
            "CommandPayloadJobResubmitV2": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/CommandPayloadTargetJob"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadCommandArgsResubmitJobV2"
                    }
                }
            },
            "CommandPayloadTargetJob": {
                "required": [
                    "applName",
                    "generation",
                    "jobName"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "The name of the application that is targeted by the command.",
                        "example": "PAYROLL"
                    },
                    "generation": {
                        "type": "integer",
                        "description": "The generation of the application that is targeted by the command.",
                        "format": "int32",
                        "example": 1
                    },
                    "jobName": {
                        "type": "string",
                        "description": "The name of the job that is targeted by the command.",
                        "example": "JOB_A"
                    }
                },
                "description": "Identifies the target for the command."
            },
            "CommandResponseJobResubmit": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobResubmit"
                        }
                    }
                }
            },
            "CommandResponseMessageJobResubmit": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL RESUBMISSION REQUESTED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandPayloadCommandArgs": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "example": "My reason"
                    }
                },
                "description": "Contains additional parameters for the command. For example, 'reason'."
            },
            "CommandPayloadJob": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/CommandPayloadTargetJob"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadCommandArgs"
                    }
                }
            },
            "CommandResponseJobWithdraw": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobWithdraw"
                        }
                    }
                }
            },
            "CommandResponseMessageJobWithdraw": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL MARKED FOR WITHDRAW"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobUnwait": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobUnwait"
                        }
                    }
                }
            },
            "CommandResponseMessageJobUnwait": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL UNWAITED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobUnrequest": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobUnrequest"
                        }
                    }
                }
            },
            "CommandResponseMessageJobUnrequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL UNREQUESTED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobUnbypass": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobUnbypass"
                        }
                    }
                }
            },
            "CommandResponseMessageJobUnbypass": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL UNBYPASSED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobSetReason": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseJobSetReason"
                        }
                    }
                }
            },
            "CommandResponseJobRequest": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobRequest"
                        }
                    }
                }
            },
            "CommandResponseMessageJobRequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL REQUESTED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobRelease": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobRelease"
                        }
                    }
                }
            },
            "CommandResponseMessageJobRelease": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL RELEASED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobReady": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobReady"
                        }
                    }
                }
            },
            "CommandResponseMessageJobReady": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL READIED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobHold": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobHold"
                        }
                    }
                }
            },
            "CommandResponseMessageJobHold": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL HELD"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobExpedite": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobExpedite"
                        }
                    }
                }
            },
            "CommandResponseMessageJobExpedite": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL EXPEDITED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobDropres": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobDropres"
                        }
                    }
                }
            },
            "CommandResponseMessageJobDropres": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL RES DROPPED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandPayloadCommandArgsDropDepJob": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "example": "My reason"
                    },
                    "dependencies": {
                        "type": "array",
                        "example": [],
                        "items": {
                            "type": "string",
                            "example": "[]"
                        }
                    }
                }
            },
            "CommandPayloadJobDropDep": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/CommandPayloadTargetJob"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadCommandArgsDropDepJob"
                    }
                }
            },
            "CommandResponseJobDropDependencies": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobDropDependencies"
                        }
                    }
                }
            },
            "CommandResponseMessageJobDropDependencies": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL DEPENDENCIES DROPPED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobComplete": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobComplete"
                        }
                    }
                }
            },
            "CommandResponseMessageJobComplete": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL MARKED COMPLETE"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandPayloadCommandArgsCancelJob": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string",
                        "example": "My reason"
                    },
                    "cancelModifier": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "DUMP",
                            "PURGE"
                        ]
                    }
                }
            },
            "CommandPayloadJobCancel": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/CommandPayloadTargetJob"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadCommandArgsCancelJob"
                    }
                }
            },
            "CommandResponseJobCancel": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobCancel"
                        }
                    }
                }
            },
            "CommandResponseMessageJobCancel": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "$CJ(10000),JM=PAYROLL"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseJobBypass": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageJobBypass"
                        }
                    }
                }
            },
            "CommandResponseMessageJobBypass": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the job command.",
                        "example": "JOB PAYROLL MARKED FOR BYPASS"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandPayloadEventTrigger": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "maxLength": 32,
                        "minLength": 0,
                        "type": "string",
                        "description": "The eventid.",
                        "example": "CYBER.PAYROLL"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadEventTriggerArgs"
                    }
                }
            },
            "CommandPayloadEventTriggerArgs": {
                "type": "object",
                "properties": {
                    "user1": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user2": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user3": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user4": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "executionFlag": {
                        "type": "string",
                        "enum": [
                            "ADD",
                            "REPLACE"
                        ]
                    },
                    "signalFlag": {
                        "type": "string",
                        "enum": [
                            "FORCE",
                            "SATISFY"
                        ]
                    },
                    "at": {
                        "type": "string",
                        "description": "Indicates a time, and optionally a date, at which the trigger is to occur."
                    },
                    "system": {
                        "type": "string",
                        "description": "Indicates the ID of the system on which you want the event to execute."
                    },
                    "noExec": {
                        "type": "boolean",
                        "description": "Bypasses execution of the next scheduled event.",
                        "default": false
                    },
                    "hold": {
                        "type": "boolean",
                        "description": "Can be used to place an application on hold when the event being triggered generates an application. No activity will take place in the application until it is released using the APPLJOB command or CSF.",
                        "default": false
                    },
                    "rootJobs": {
                        "type": "array",
                        "description": "Specifies the jobs to submit. Each job must belong to the application generated by the current event. You can add a plus sign (+) to a job name to indicate that the job and all its successors are submitted (if they meet date and time selection criteria). ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subApplications": {
                        "type": "array",
                        "description": "Specifies the subapplications whose jobs are to be submitted. Each subapplication must belong to the application generated by the current event. Only jobs meeting the selection criteria are submitted.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "caseSensitive": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "description": "Optional arguments"
            },
            "CommandPayloadEvent": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "maxLength": 32,
                        "minLength": 0,
                        "type": "string",
                        "description": "The eventid.",
                        "example": "CYBER.PAYROLL"
                    }
                }
            },
            "CommandPayloadEventSimulate": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "maxLength": 32,
                        "minLength": 0,
                        "type": "string",
                        "description": "The eventid.",
                        "example": "CYBER.PAYROLL"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadEventSimulateArgs"
                    }
                }
            },
            "CommandPayloadEventSimulateArgs": {
                "type": "object",
                "properties": {
                    "user1": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user2": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user3": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "user4": {
                        "maxLength": 68,
                        "minLength": 0,
                        "type": "string",
                        "description": "Up to 68 characters of user data",
                        "example": "PAYJOB99"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Specifies the schedule time used for the simulation. You can specify any time that is valid for a SCHEDULE command that resolves to a time and date.",
                        "example": "TOMORROW"
                    },
                    "rootJobs": {
                        "type": "array",
                        "description": "Specifies the jobs to simulate. You can add a plus sign (+) to a job name to indicate that the job and all its successors are simulated.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subApplications": {
                        "type": "array",
                        "description": "Specifies the subapplications whose jobs are to be simulated. Only jobs meeting the selection criteria are simulated.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "procJob": {
                        "type": "string",
                        "description": "Requests an application processing mode simulation for the job specified in fullname, which assures that any JCL variables in that job resolve correctly. Use a hyphen to simulate processing for all jobs.",
                        "example": "-"
                    },
                    "caseSensitive": {
                        "type": "boolean",
                        "default": false
                    },
                    "noListProc": {
                        "type": "boolean",
                        "description": "Indicates the text of any invoked procedure is not listed.",
                        "default": false
                    },
                    "noRexx": {
                        "type": "boolean",
                        "description": "Indicates all input text between a REXXON and a REXXOFF statement is ignored.",
                        "default": false
                    },
                    "notSelected": {
                        "type": "boolean",
                        "description": "Produces a list of all jobs not selected, for any reason.",
                        "default": false
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Indicates if a successor was inherited, the inherited relationships are identified in the output report.",
                        "default": false
                    },
                    "print": {
                        "type": "string",
                        "description": "Specifies the data set to which the JCL is copied. "
                    }
                },
                "description": "Optional arguments"
            },
            "EventSimulationResponse": {
                "type": "object",
                "properties": {
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Line"
                        }
                    }
                }
            },
            "Line": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "INFORMATIONAL",
                            "WARNING",
                            "ERROR",
                            "SEVERE_ERROR",
                            "CONTROL",
                            "LABEL LINE",
                            "DATA",
                            "END LINE",
                            "MODE MESSAGE",
                            "PROMPT",
                            "SET TITLE",
                            "SET MODE",
                            "SET SEPARATOR",
                            "END REQUEST",
                            "SVC-34"
                        ]
                    },
                    "text": {
                        "type": "string"
                    }
                }
            },
            "CommandPayloadAppl": {
                "required": [
                    "target"
                ],
                "type": "object",
                "properties": {
                    "target": {
                        "$ref": "#/components/schemas/CommandPayloadTargetAppl"
                    },
                    "commandArgs": {
                        "$ref": "#/components/schemas/CommandPayloadCommandArgs"
                    }
                }
            },
            "CommandPayloadTargetAppl": {
                "required": [
                    "applName",
                    "generation"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "The name of the application that is targeted by the command.",
                        "example": "PAYROLL"
                    },
                    "generation": {
                        "type": "integer",
                        "description": "The generation of the application that is targeted by the command.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "Identifies the target for the command."
            },
            "CommandResponseApplWithdraw": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseApplWithdraw"
                        }
                    }
                }
            },
            "CommandResponseApplUnwait": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseApplUnwait"
                        }
                    }
                }
            },
            "CommandResponseApplTerminate": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageApplTerminate"
                        }
                    }
                }
            },
            "CommandResponseMessageApplTerminate": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the application command.",
                        "example": "APPL PAYROLL MARKED COMPLETE"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseApplRelease": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageApplRelease"
                        }
                    }
                }
            },
            "CommandResponseMessageApplRelease": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the application command.",
                        "example": "APPL PAYROLL RELEASED"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseApplHold": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageApplHold"
                        }
                    }
                }
            },
            "CommandResponseMessageApplHold": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the application command.",
                        "example": "APPL PAYROLL HELD"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "CommandResponseApplComplete": {
                "type": "object",
                "properties": {
                    "returnCode": {
                        "type": "integer",
                        "description": "Return code of the operation.",
                        "format": "int32"
                    },
                    "messages": {
                        "type": "array",
                        "description": "List of messages from CA WA ESP Edition.",
                        "items": {
                            "$ref": "#/components/schemas/CommandResponseMessageApplComplete"
                        }
                    }
                }
            },
            "CommandResponseMessageApplComplete": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The response that you receive after CA WA ESP Edition issues the application command.",
                        "example": "APPL PAYROLL MARKED COMPLETE"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "Severity of the message.",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "List of messages from CA WA ESP Edition."
            },
            "Error": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            },
            "AgentResponse": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Down",
                            "Unknown",
                            "Up"
                        ]
                    },
                    "statusDetails": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "build": {
                        "type": "string"
                    },
                    "quiesced": {
                        "type": "boolean"
                    },
                    "plugins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PluginResponse"
                        }
                    }
                }
            },
            "PluginResponse": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "Standard",
                            "Integration",
                            "AdvancedIntegration"
                        ]
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "version": {
                        "type": "string"
                    }
                }
            },
            "ApiEntry": {
                "type": "object",
                "properties": {
                    "contextPath": {
                        "type": "string",
                        "example": "api"
                    },
                    "path": {
                        "type": "string",
                        "example": "/applications"
                    },
                    "method": {
                        "type": "string",
                        "example": "GET",
                        "enum": [
                            "GET",
                            "HEAD",
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE",
                            "OPTIONS",
                            "TRACE"
                        ]
                    },
                    "version": {
                        "type": "string",
                        "example": "v1"
                    }
                }
            },
            "EntityModelEventV2": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier that represents this specific event. (prefix.name) (not sortable or searchable)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the event."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix of the event."
                    },
                    "nextDueAt": {
                        "type": "string",
                        "description": "The time of next action scheduled for the event. If the event does not have any schedule the value is null.\n The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "lastRun": {
                        "type": "string",
                        "description": "The time of last execution of the event. The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "system": {
                        "type": "string",
                        "description": "Displays the ID of the system that is to execute the event."
                    },
                    "holdCount": {
                        "type": "integer",
                        "description": "Current hold count of the event.",
                        "format": "int32"
                    },
                    "suspendCount": {
                        "type": "integer",
                        "description": "Current suspend count of the event.",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the event. For example: \"REQUIRES TRIGGER\", \"NEXT DUE AT 03:43:48 ON Sat Apr 30, 2022\". (not searchable or sortable)"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "EventV2": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier that represents this specific event. (prefix.name) (not sortable or searchable)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the event."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix of the event."
                    },
                    "nextDueAt": {
                        "type": "string",
                        "description": "The time of next action scheduled for the event. If the event does not have any schedule the value is null.\n The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "lastRun": {
                        "type": "string",
                        "description": "The time of last execution of the event. The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "system": {
                        "type": "string",
                        "description": "Displays the ID of the system that is to execute the event."
                    },
                    "holdCount": {
                        "type": "integer",
                        "description": "Current hold count of the event.",
                        "format": "int32"
                    },
                    "suspendCount": {
                        "type": "integer",
                        "description": "Current suspend count of the event.",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the event. For example: \"REQUIRES TRIGGER\", \"NEXT DUE AT 03:43:48 ON Sat Apr 30, 2022\". (not searchable or sortable)"
                    }
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "rel": {
                        "type": "string"
                    },
                    "href": {
                        "type": "string"
                    },
                    "hreflang": {
                        "type": "string"
                    },
                    "media": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "deprecation": {
                        "type": "string"
                    },
                    "profile": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "PageMetadata": {
                "type": "object",
                "properties": {
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalElements": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "number": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PagedModelEntityModelEventV2": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityModelEventV2"
                        }
                    },
                    "page": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Job": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier that represents this specific job. (not searchable)"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the job (for example, NT_JOB, JOB). For more information, see https://docops.ca.com/ca-workload-automation-esp-edition/12-0/en/reference/initialization-parameters/wobdef-define-workload-objects ",
                        "enum": [
                            "AGENT_MONITOR",
                            "AIX_JOB",
                            "APPLEND",
                            "APPLSTART",
                            "AS400_JOB",
                            "BDC_JOB",
                            "BWIP_JOB",
                            "BWPC_JOB",
                            "CPU_MON",
                            "DATA_OBJECT",
                            "DB_JOB",
                            "DB_MON",
                            "DBSP_JOB",
                            "DB_TRIG",
                            "DISK_MON",
                            "DSTRIG",
                            "EJB_JOB",
                            "EJBE_JOB",
                            "EVENTLOG_MON",
                            "EXTMON",
                            "EXTSCH",
                            "FILE_TRIGGER",
                            "FTP_JOB",
                            "HDFS_JOB",
                            "HIVE_JOB",
                            "HP3K_JOB",
                            "HPUX_JOB",
                            "HTTP_JOB",
                            "INFORMATICA_JOB",
                            "IP_MON",
                            "IRIX_JOB",
                            "JMSP_JOB",
                            "JMSS_JOB",
                            "JMXA_JOB",
                            "JMXB_JOB",
                            "JMXN_JOB",
                            "JMXO_JOB",
                            "JMXR_JOB",
                            "JMXS_JOB",
                            "LINUX_JOB",
                            "MF_JOB",
                            "MPEIX_JOB",
                            "MSSQL_JOB",
                            "NCR_JOB",
                            "NT_JOB",
                            "OA_JOB",
                            "OAC_JOB",
                            "OPENVMS_JOB",
                            "OS2_JOB",
                            "OOZIE_JOB",
                            "POJO_JOB",
                            "PROCESS_MON",
                            "PROXY_JOB",
                            "PS_JOB",
                            "PYRAMID_JOB",
                            "RMI_JOB",
                            "SAP_JOB",
                            "SAPA_JOB",
                            "SAPE_JOB",
                            "SAPM_JOB",
                            "SCP_JOB",
                            "SEQUENT_JOB",
                            "SERVICE_MON",
                            "SFTP_JOB",
                            "SPARK_JOB",
                            "SNPC_JOB",
                            "SNPE_JOB",
                            "SNPG_JOB",
                            "SNPS_JOB",
                            "SQL_JOB",
                            "SQOOP_JOB",
                            "SUN_JOB",
                            "TANDEM_JOB",
                            "TEXT_MON",
                            "UNIX_JOB",
                            "WEB_SERV",
                            "WEB_DOCLIT",
                            "WOL_JOB",
                            "JOB",
                            "TASK",
                            "LINK",
                            "UNKNOWN"
                        ]
                    },
                    "applicationName": {
                        "type": "string",
                        "description": "The name of the application."
                    },
                    "generation": {
                        "type": "integer",
                        "description": "The generation of the application.",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the job."
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the job. State is mapped to category."
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the job."
                    },
                    "statusDetail": {
                        "type": "string",
                        "description": "Extended status of the job (for example, 'Completed at 3:30 TODAY'). (not searchable)"
                    },
                    "qualifier": {
                        "type": "string",
                        "description": "The job qualifier that further identifies the job. The qualifier provides more meaningful or descriptive names to help distinguish duplicate jobs, for example."
                    },
                    "subApplicationName": {
                        "type": "string",
                        "description": "The name of the sub-application."
                    },
                    "agent": {
                        "type": "string",
                        "description": "The name of the agent associated with this job."
                    },
                    "reason": {
                        "type": "string",
                        "description": "The reason that an action such as bypass, complete, hold, or re-submit was taken on the job."
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "The job start time.",
                        "format": "date-time"
                    },
                    "endDateTime": {
                        "type": "string",
                        "description": "The job end time.",
                        "format": "date-time"
                    },
                    "definedAsCritical": {
                        "type": "boolean",
                        "description": "True if the job is defined as critical."
                    },
                    "onCriticalPath": {
                        "type": "boolean",
                        "description": "True if the job is on a critical path."
                    },
                    "links": {
                        "type": "array",
                        "description": "The provided link points to this record.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "ResponsePageJob": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Job"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "EntityModelEvent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier that represents this specific event. (prefix.name) (not sortable or searchable)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the event."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix of the event."
                    },
                    "nextDueAt": {
                        "type": "string",
                        "description": "The time of next action scheduled for the event. If the event does not have any schedule the value is null.\n The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "lastRun": {
                        "type": "string",
                        "description": "The time of last execution of the event. The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "holdCount": {
                        "type": "integer",
                        "description": "Current hold count of the event.",
                        "format": "int32"
                    },
                    "suspendCount": {
                        "type": "integer",
                        "description": "Current suspend count of the event.",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the event. For example: \"REQUIRES TRIGGER\", \"NEXT DUE AT 03:43:48 ON Sat Apr 30, 2022\". (not searchable or sortable)"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "Event": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier that represents this specific event. (prefix.name) (not sortable or searchable)"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the event."
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix of the event."
                    },
                    "nextDueAt": {
                        "type": "string",
                        "description": "The time of next action scheduled for the event. If the event does not have any schedule the value is null.\n The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "lastRun": {
                        "type": "string",
                        "description": "The time of last execution of the event. The time is presented in UTC.",
                        "format": "date-time"
                    },
                    "holdCount": {
                        "type": "integer",
                        "description": "Current hold count of the event.",
                        "format": "int32"
                    },
                    "suspendCount": {
                        "type": "integer",
                        "description": "Current suspend count of the event.",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the event. For example: \"REQUIRES TRIGGER\", \"NEXT DUE AT 03:43:48 ON Sat Apr 30, 2022\". (not searchable or sortable)"
                    }
                }
            },
            "PagedModelEntityModelEvent": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityModelEvent"
                        }
                    },
                    "page": {
                        "$ref": "#/components/schemas/PageMetadata"
                    }
                }
            },
            "Application": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier that represents a specific application. (not searchable)"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application."
                    },
                    "generation": {
                        "type": "integer",
                        "description": "The generation of the application.",
                        "format": "int32"
                    },
                    "eventPrefix": {
                        "type": "string",
                        "description": "The prefix of the event that triggered the application."
                    },
                    "eventName": {
                        "type": "string",
                        "description": "The name of the event that triggered the application."
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the application. State is mapped to category."
                    },
                    "state": {
                        "type": "string",
                        "description": "The status of the application."
                    },
                    "statusDetail": {
                        "type": "string",
                        "description": "The extended status of the application (for example, 'Forced at 3:30 TODAY'). (not searchable)"
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "The application start time.",
                        "format": "date-time"
                    },
                    "endDateTime": {
                        "type": "string",
                        "description": "The application end time.",
                        "format": "date-time"
                    },
                    "totalJobsInApplication": {
                        "type": "integer",
                        "description": "The number of jobs in the application. (not searchable)",
                        "format": "int32"
                    },
                    "totalJobsOnCriticalPath": {
                        "type": "integer",
                        "description": "The number of jobs on the critical path. (not searchable)",
                        "format": "int32"
                    },
                    "totalJobsCompleted": {
                        "type": "integer",
                        "description": "The number of completed jobs. (not searchable)",
                        "format": "int32"
                    },
                    "totalJobsFailed": {
                        "type": "integer",
                        "description": "The number of failed jobs. (not searchable)",
                        "format": "int32"
                    },
                    "totalJobsOverdue": {
                        "type": "integer",
                        "description": "The number of overdue jobs. (not searchable)",
                        "format": "int32"
                    },
                    "totalJobsOverdueSubmit": {
                        "type": "integer",
                        "description": "The number of jobs in 'overdue submit' state.",
                        "format": "int32"
                    },
                    "totalJobsOverdueStart": {
                        "type": "integer",
                        "description": "The number of jobs in 'overdue start' state.",
                        "format": "int32"
                    },
                    "totalJobsOverdueEnd": {
                        "type": "integer",
                        "description": "The number of jobs in 'overdue end' state.",
                        "format": "int32"
                    },
                    "totalJobsPredictedToBeLate": {
                        "type": "integer",
                        "description": "The number of jobs in the 'predicted to be late' state.",
                        "format": "int32"
                    },
                    "links": {
                        "type": "array",
                        "description": "The provided link points to this record.",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "ResponsePageApplication": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Application"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "Flow": {
                "type": "object",
                "properties": {
                    "nodes": {
                        "type": "array",
                        "description": "The list of all jobs in the application.",
                        "items": {
                            "$ref": "#/components/schemas/FlowNode"
                        }
                    },
                    "edges": {
                        "type": "array",
                        "description": "The list of relationships between the jobs.",
                        "items": {
                            "$ref": "#/components/schemas/FlowEdge"
                        }
                    }
                }
            },
            "FlowEdge": {
                "required": [
                    "from"
                ],
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "The name of the job"
                    },
                    "to": {
                        "type": "string",
                        "description": "The name of the job"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the connection between the jobs"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The condition of the connection between the jobs"
                    },
                    "criticalPath": {
                        "type": "boolean",
                        "description": "Marks the connection between two jobs as critical if both of them are on critical path"
                    }
                },
                "description": "The list of relationships between the jobs."
            },
            "FlowNode": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier that represents this specific job."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the job."
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon of the job type."
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the job. State is mapped to category."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the job",
                        "enum": [
                            "AGENT_MONITOR",
                            "AIX_JOB",
                            "APPLEND",
                            "APPLSTART",
                            "AS400_JOB",
                            "BDC_JOB",
                            "BWIP_JOB",
                            "BWPC_JOB",
                            "CPU_MON",
                            "DATA_OBJECT",
                            "DB_JOB",
                            "DB_MON",
                            "DBSP_JOB",
                            "DB_TRIG",
                            "DISK_MON",
                            "DSTRIG",
                            "EJB_JOB",
                            "EJBE_JOB",
                            "EVENTLOG_MON",
                            "EXTMON",
                            "EXTSCH",
                            "FILE_TRIGGER",
                            "FTP_JOB",
                            "HDFS_JOB",
                            "HIVE_JOB",
                            "HP3K_JOB",
                            "HPUX_JOB",
                            "HTTP_JOB",
                            "INFORMATICA_JOB",
                            "IP_MON",
                            "IRIX_JOB",
                            "JMSP_JOB",
                            "JMSS_JOB",
                            "JMXA_JOB",
                            "JMXB_JOB",
                            "JMXN_JOB",
                            "JMXO_JOB",
                            "JMXR_JOB",
                            "JMXS_JOB",
                            "LINUX_JOB",
                            "MF_JOB",
                            "MPEIX_JOB",
                            "MSSQL_JOB",
                            "NCR_JOB",
                            "NT_JOB",
                            "OA_JOB",
                            "OAC_JOB",
                            "OPENVMS_JOB",
                            "OS2_JOB",
                            "OOZIE_JOB",
                            "POJO_JOB",
                            "PROCESS_MON",
                            "PROXY_JOB",
                            "PS_JOB",
                            "PYRAMID_JOB",
                            "RMI_JOB",
                            "SAP_JOB",
                            "SAPA_JOB",
                            "SAPE_JOB",
                            "SAPM_JOB",
                            "SCP_JOB",
                            "SEQUENT_JOB",
                            "SERVICE_MON",
                            "SFTP_JOB",
                            "SPARK_JOB",
                            "SNPC_JOB",
                            "SNPE_JOB",
                            "SNPG_JOB",
                            "SNPS_JOB",
                            "SQL_JOB",
                            "SQOOP_JOB",
                            "SUN_JOB",
                            "TANDEM_JOB",
                            "TEXT_MON",
                            "UNIX_JOB",
                            "WEB_SERV",
                            "WEB_DOCLIT",
                            "WOL_JOB",
                            "JOB",
                            "TASK",
                            "LINK",
                            "UNKNOWN"
                        ]
                    },
                    "state": {
                        "type": "string",
                        "description": "The State of the job"
                    }
                },
                "description": "The list of all jobs in the application."
            },
            "AgentListResponse": {
                "type": "object",
                "properties": {
                    "agents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AgentResponse"
                        }
                    }
                }
            },
            "StreamingResponseBody": {
                "type": "object"
            },
            "AgentLogsListResponse": {
                "type": "object",
                "properties": {
                    "logs": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AgentDetails": {
                "type": "object",
                "properties": {
                    "installDate": {
                        "type": "string"
                    },
                    "jreVersion": {
                        "type": "string"
                    },
                    "jreBundled": {
                        "type": "string"
                    },
                    "bootTime": {
                        "type": "string"
                    },
                    "osArch": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "pid": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            }
        }
    }
}