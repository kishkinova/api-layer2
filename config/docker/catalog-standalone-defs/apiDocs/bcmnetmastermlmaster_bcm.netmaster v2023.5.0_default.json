{
    "openapi": "3.0.1",
    "info": {
        "description": "The NetMaster API service helps you quickly glean network information that can be used by network security personnel and network administrators to manage and analyze your network. The NetMaster API service also allows you to setup the NetMaster Web Portal, so you can manage and analyze your network with an intuitive and simple UI. The NetMaster API service can also be used to compile large amounts of network data that can be offloaded into web dashboards, CI/CD pipelines, databases, and much more.",
        "title": "NetMaster",
        "version": "2023.5.0"
    },
    "servers": [
        {
            "url": "https://developer.mainframe.broadcom.com",
            "description": "Generated server url"
        }
    ],
    "tags": [
        {
            "description": "Parameter Data Controllers",
            "name": "The Parameter Data API"
        },
        {
            "description": "Server Data Controllers",
            "name": "The Server API"
        },
        {
            "description": "SmartTrace Active Traces Controllers",
            "name": "The SmartTrace Active Traces API"
        },
        {
            "description": "SmartTrace Definitions Controllers",
            "name": "The SmartTrace Definitions API"
        },
        {
            "description": "SmartTrace Packets Controllers",
            "name": "The SmartTrace Packets API"
        },
        {
            "description": "SmartTrace Saved Packets Controllers",
            "name": "The SmartTrace Saved Packets API"
        },
        {
            "description": "SmartTrace Saved Traces Controllers",
            "name": "The SmartTrace Saved Traces API"
        },
        {
            "description": "Stack Data Controllers",
            "name": "The Stack Data API"
        },
        {
            "description": "Connection Packet Trace Controllers",
            "name": "The TCP/IP Connection Packet Trace API"
        },
        {
            "description": "Tcpip Counters Controllers",
            "name": "The TCP/IP Counters API"
        },
        {
            "description": "Tcpip Data Controllers",
            "name": "The TCP/IP Data API"
        }
    ],
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "operationId": "login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful login"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Invalid credentials"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "summary": "Login and return authentication token",
                "tags": [
                    "Login"
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "operationId": "logout",
                "responses": {
                    "204": {
                        "description": "Successful logout"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "summary": "Logout JWT token",
                "tags": [
                    "Login"
                ]
            }
        },
        "/api/v1/auth/query": {
            "get": {
                "operationId": "query",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenInfo"
                                }
                            }
                        },
                        "description": "Successful validation"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Invalid credentials"
                    }
                },
                "summary": "Validate the token and return token details",
                "tags": [
                    "Login"
                ]
            }
        },
        "/api/v1/parms/{region}/web": {
            "get": {
                "description": "Returns parameter data for the Web interface, including URL and port number",
                "operationId": "getWebParameters",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseWebParameterData"
                                }
                            }
                        },
                        "description": "Web interface parameter data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "This NetMaster region is not active"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get Web interface parameter data",
                "tags": [
                    "The Parameter Data API"
                ]
            }
        },
        "/api/v1/server/ciphers": {
            "get": {
                "operationId": "getCiphers",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataCipher"
                                }
                            }
                        },
                        "description": "List of ciphers"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get ciphers used with secure connections",
                "tags": [
                    "The Server API"
                ]
            }
        },
        "/api/v1/server/regions": {
            "get": {
                "operationId": "getRegions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataRegionsDataRow"
                                }
                            }
                        },
                        "description": "List of NetMaster regions"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get NetMaster regions connected to data provider (this server)",
                "tags": [
                    "The Server API"
                ]
            }
        },
        "/api/v1/server/webSocketInfo": {
            "get": {
                "operationId": "getWebSocketInfo",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseWsInfoData"
                                }
                            }
                        },
                        "description": "Web Socket Information"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    }
                },
                "security": [
                    {
                        "Bearer token": []
                    },
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get Web Socket Information used to connect to (this server) via web socket",
                "tags": [
                    "The Server API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/definition": {
            "get": {
                "description": "Returns a list of all SmartTrace definitions that is optionally sorted.",
                "operationId": "getDefinitions",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "The sort order of the definition data. In the format of `(COL_NAME):(asc|desc)`",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "name:asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataSmartTraceDefinitionRow"
                                }
                            }
                        },
                        "description": "A list of defined SmartTrace definitions was returned back to the client"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nInvalid format for the query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nThe user does not have the appropriate authority to view SmartTrace definitions."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get a list of all SmartTrace definitions available in NetMaster.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/definition/{name}": {
            "delete": {
                "description": "No content will be included in the response back to the client.",
                "operationId": "deleteSmartTraceDefinition",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name, must be uppercase",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The SmartTrace definition was deleted. No content is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition could not be deleted due to an invalid format for the URI name parameter."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition could not be deleted because the user does not have the appropriate authority to delete a SmartTrace definition."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI {name} parameter was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Deletes an existing SmartTrace Definition.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            },
            "get": {
                "operationId": "getDefinitionDetails",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name, must be uppercase",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/TcpTraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/UdpTraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/MultipleTcpTraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/IpV6TraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/IpV4TraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/IcmpV4TraceDefinition"
                                        },
                                        {
                                            "$ref": "#/components/schemas/IcmpV6TraceDefinition"
                                        }
                                    ],
                                    "example": null
                                }
                            }
                        },
                        "description": "A SmartTrace definition with the given name exists and was returned back in the response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nInvalid format for the name field in the URI."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nThe user does not have the appropriate authority to view SmartTrace definitions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI `name` parameter was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get all the information about a given SmartTrace definition.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            },
            "post": {
                "description": "No content will be included in the response back to the client.",
                "operationId": "createSmartTraceDefinition",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name, must be uppercase",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "example": {
                                "description": "TCP Test",
                                "type": "TCP",
                                "criteria": {
                                    "base": {
                                        "stack": "TCPIP32",
                                        "interfaceName": "LOOPBACK",
                                        "localHost": "192.168.1.1",
                                        "remoteHost": "192.168.1.1",
                                        "localPort": "234",
                                        "remotePort": "4362"
                                    },
                                    "advanced": {
                                        "flagExpression": "ACK OR RST OR SYN",
                                        "packetFilter": {
                                            "expression": "1 AND 2",
                                            "filters": [
                                                {
                                                    "operator": "EQ",
                                                    "data": "123",
                                                    "format": "ASCII",
                                                    "start": 23,
                                                    "length": 3
                                                },
                                                {
                                                    "operator": "EQ",
                                                    "data": "145",
                                                    "format": "ASCII",
                                                    "start": 26,
                                                    "length": 3
                                                }
                                            ]
                                        }
                                    },
                                    "stop": {
                                        "flagExpression": "FIN",
                                        "packetFilter": {
                                            "expression": "1",
                                            "filters": [
                                                {
                                                    "operator": "EQ",
                                                    "data": "523",
                                                    "format": "ASCII",
                                                    "start": 32,
                                                    "length": 3
                                                }
                                            ]
                                        },
                                        "packetDir": "IN"
                                    }
                                },
                                "options": {
                                    "limit": 250,
                                    "stopAtLimit": true,
                                    "expireTime": 24,
                                    "packetsAfterStop": 25
                                },
                                "isFavorite": true
                            },
                            "schema": {
                                "example": null,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/TcpTraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/UdpTraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/IcmpV4TraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/IcmpV6TraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/IpV4TraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/IpV6TraceDefinition"
                                    },
                                    {
                                        "$ref": "#/components/schemas/MultipleTcpTraceDefinition"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Example of a TCP trace definition",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The SmartTrace definition was created. No content is included in the response to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be created due to one of the following conditions:\n\nThe formatting of the name field in the URI is invalid.\nBad input is present in the body of the JSON content."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be created due to one of the following conditions:\n\nThe user does not have the appropriate authority to create a SmartTrace definition.\nA SmartTrace definition with the same name already exists."
                    },
                    "404": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI `name` parameter already exists."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Create a new SmartTrace Definition with the specified name.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            },
            "put": {
                "operationId": "updateDefinitionDetails",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name, must be uppercase",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json-patch+json": {
                            "example": [
                                {
                                    "op": "test",
                                    "path": "/type",
                                    "value": "TCP"
                                },
                                {
                                    "op": "replace",
                                    "path": "/description",
                                    "value": "NEW DESCRIPTION"
                                },
                                {
                                    "op": "remove",
                                    "path": "/criteria/stop/packetDir"
                                },
                                {
                                    "op": "replace",
                                    "path": "/options/limit",
                                    "value": 100
                                },
                                {
                                    "op": "replace",
                                    "path": "/options/packetsAfterStop",
                                    "value": 17
                                },
                                {
                                    "op": "add",
                                    "path": "/criteria/stop/packetFilter/filters/1",
                                    "value": {
                                        "operator": "EQ",
                                        "data": "AJT",
                                        "format": "ASCII",
                                        "start": 38,
                                        "length": 3
                                    }
                                },
                                {
                                    "op": "replace",
                                    "path": "/criteria/stop/packetFilter/expression",
                                    "value": "1 AND 2"
                                }
                            ],
                            "schema": {
                                "example": null,
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/JsonPatch"
                                    }
                                ]
                            }
                        }
                    },
                    "description": "Example of updating a TCP trace definition. See RFC 6902 for overview of how a PATCH works. https://datatracker.ietf.org/doc/html/rfc6902#section-4.3 ",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/JsonPatch"
                                        }
                                    ],
                                    "example": null
                                }
                            }
                        },
                        "description": "A SmartTrace definition with the given name exists and was returned back in the response"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nInvalid format for the name field in the URI."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition could not be found due to one of the following conditions:\n\nThe user does not have the appropriate authority to view SmartTrace definitions."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI `name` parameter was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Update an existing SmartTrace definition.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/definition/{name}/start": {
            "put": {
                "description": "If the definition is already started, the server will ignore the request but respond back to the client as if it started the trace.",
                "operationId": "startSmartTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name, must be uppercase",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The SmartTrace definition was started. If the definition is already started,the server ignores the request, but responds to the client as if it started the trace."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition could not be started due to an invalid format for the URI name parameter"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": " The SmartTrace definition could not be started because the user does not have theappropriate authority to start a SmartTrace definition."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI {name} parameter was not found."
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition was invalid and could not be started. Sample error message:\n\nIPPT0216: Activation failed. Invalid trace criteria: Interface/Local Host"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Starts a SmartTrace definition.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/definition/{name}/stop": {
            "delete": {
                "description": "No content will be included in the response back to the client.",
                "operationId": "stopSmartTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "SmartTrace definition name",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Z][A-Z0-9@#$]{0,11}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The SmartTrace definition was stopped. If the definition is already stopped, the server ignores the request, but responds to the client as if it stopped the trace."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition could not be stopped due to an invalid format for the name field in the URI."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The SmartTrace definition could not be stopped because the user does not have the appropriate authority to stop a SmartTrace definition.\n"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A SmartTrace definition matching the URI {name} parameter was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Stop an active SmartTrace.",
                "tags": [
                    "The SmartTrace Definitions API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved": {
            "get": {
                "description": "Returns a summary of all saved traces available in a NetMaster region.",
                "operationId": "getAllSavedTraces",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "The sort order of the trace instance data in the format:\n (COL_NAME):(asc|desc)\n\nFor example: `id:asc`",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "id:asc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataSavedTraceSummary"
                                }
                            }
                        },
                        "description": "A list of saved traces was returned back to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of saved traces could not be returned due to one of the following conditions:\n\nInvalid format for the URI parameters\n\nInvalid format for the query parameters"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of saved traces could not be returned because the user does not have the appropriate authority to view saved traces."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get a summary of all saved traces available in a NetMaster region.",
                "tags": [
                    "The SmartTrace Saved Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}": {
            "delete": {
                "description": "No content will be included in the response back to the client.",
                "operationId": "deleteSavedTrace",
                "parameters": [
                    {
                        "description": "SmartTrace saved trace ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The saved trace was deleted. No content is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The saved trace could not be deleted due to an invalid format for the URI id parameter."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The saved trace could not be deleted because the user does not have the appropriate authority to delete saved traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A saved trace matching the URI id parameter was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Delete a saved trace.",
                "tags": [
                    "The SmartTrace Saved Traces API"
                ]
            },
            "get": {
                "operationId": "getTraceDetails_1",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the saved trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseSavedTraceDetails"
                                }
                            }
                        },
                        "description": "A trace was returned back to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be returned due to one of the following conditions:\n\nInvalid format for the URI parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be returned due to one of the following conditions:\n\nThe user does not have the appropriate authority to view traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Gets all of the details about a single SmartTrace saved instance in NetMaster.",
                "tags": [
                    "The SmartTrace Saved Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}/download": {
            "get": {
                "operationId": "downloadSavedTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the saved trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "example": "PCAP file content",
                                "schema": {
                                    "type": "file",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "The trace was downloaded."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A  trace could not be downloaded due to one of the following conditions:\n\nInvalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be downloaded due to one of the following conditions:\n\nThe user does not have the appropriate authority to view traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Download a saved SmartTrace instance from NetMaster.",
                "tags": [
                    "The SmartTrace Saved Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}/packets": {
            "get": {
                "operationId": "getAllSavedPacketsSummary",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "The id of the saved trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataPacketSummary"
                                }
                            }
                        },
                        "description": "Packet summary information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned because a trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get a summary of all packets in a saved trace, up to the specified limit.",
                "tags": [
                    "The SmartTrace Saved Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}/packets/{packetNumber}": {
            "get": {
                "operationId": "getSinglePacketsSummary_1",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the saved trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number. ",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponsePacketSummary"
                                }
                            }
                        },
                        "description": "Single packet summary information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned due to an invalid format for the URI query parameters:"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned because a trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return a formatted summary of a single packet in a saved trace.",
                "tags": [
                    "The SmartTrace Saved Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}/packets/{packetNumber}/details/formatted": {
            "get": {
                "operationId": "getPacketDetailFormatted_1",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number from which you are retrieving the formatted details",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseArrayListNameValuesData"
                                }
                            }
                        },
                        "description": "Packet detail information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned due to one of the following reasons:\n\nA saved trace instance with a matching ID could not be found.\nA packet with the specified number does not exist in the trace."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return requested packet number of a saved trace instance in detail formatted.",
                "tags": [
                    "The SmartTrace Saved Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/saved/{id}/packets/{packetNumber}/details/raw": {
            "get": {
                "operationId": "getPacketDetailRaw_1",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the saved trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)-(?!0)\\d+$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number from which you are retrieving the raw details",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponsePacketRawDetailsData"
                                }
                            }
                        },
                        "description": "Raw packet detail information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned due to one of the following reasons:\n\nA saved trace instance with a matching ID could not be found.\nA packet with the specified number does not exist in the trace."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return requested packet number of a saved trace instance in raw detail.",
                "tags": [
                    "The SmartTrace Saved Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace": {
            "get": {
                "description": "Returns a list of all SmartTrace instances that is optionally sorted.",
                "operationId": "getAllInstances",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "The sort order of the trace instance data in the format:\n (COL_NAME):(asc|desc)\n\nFor example: `id:asc`",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "id:asc"
                        }
                    },
                    {
                        "description": "The name of the SmartTrace definition or definition.  The results include only traces from the listed SmartTrace definitions. Up to 16 trace definition names are allowed.Note that all trace definition names are uppercase.\n \nExample: `in:DEF1|DEF2|DEF3`\n\nCurrent filter support: `in`",
                        "in": "query",
                        "name": "definitionName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTraceSummary"
                                }
                            }
                        },
                        "description": "A list of traces was returned back to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be returned due to one of the following conditions:\n\nInvalid format for the query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be returned due to one of the following conditions:\n\nThe user does not have the appropriate authority to view traces."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get a list of all SmartTrace instances available in a NetMaster region.",
                "tags": [
                    "The SmartTrace Active Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}": {
            "delete": {
                "description": "No content will be included in the response back to the client.",
                "operationId": "deleteSmartTraceInstance",
                "parameters": [
                    {
                        "description": "SmartTrace instance ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The trace was deleted. No content is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be deleted due to one of the following conditions:\n\nAn invalid format for the URI name parameter.\n\nThe trace is currently running. A running trace cannot be deleted."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The trace could not be deleted because the user does not have the appropriate authority to delete a SmartTrace."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Delete an existing trace.",
                "tags": [
                    "The SmartTrace Active Traces API"
                ]
            },
            "get": {
                "operationId": "getTraceDetails",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseTraceSummary"
                                }
                            }
                        },
                        "description": "A trace was returned back to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be returned due to one of the following conditions:\n\nInvalid format for the URI parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be returned due to one of the following conditions:\n\nThe user does not have the appropriate authority to view traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Gets all of the details about a single SmartTrace instance in NetMaster.",
                "tags": [
                    "The SmartTrace Active Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/download": {
            "get": {
                "operationId": "downloadTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "example": "PCAP file content",
                                "schema": {
                                    "type": "file",
                                    "format": "binary"
                                }
                            }
                        },
                        "description": "The trace was downloaded."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A  trace could not be downloaded due to one of the following conditions:\n\nInvalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be downloaded due to one of the following conditions:\n\nThe user does not have the appropriate authority to view traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Download a SmartTrace instance from NetMaster.",
                "tags": [
                    "The SmartTrace Active Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/packets": {
            "get": {
                "operationId": "getAllPacketsSummary",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataPacketSummary"
                                }
                            }
                        },
                        "description": "Packet summary information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet summary information could not be returned because a trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Gets all packet summary from a trace instance up to the specified limit.",
                "tags": [
                    "The SmartTrace Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/packets/{packetNumber}": {
            "get": {
                "operationId": "getSinglePacketsSummary",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number. ",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponsePacketSummary"
                                }
                            }
                        },
                        "description": "Single packet summary information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Single packet summary information could not be returned because a trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return a formatted summary of a single packet in an active/ended trace.",
                "tags": [
                    "The SmartTrace Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/packets/{packetNumber}/details/formatted": {
            "get": {
                "operationId": "getPacketDetailFormatted",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number from which you are retrieving the formatted details",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseArrayListNameValuesData"
                                }
                            }
                        },
                        "description": "Packet detail information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Packet detail information could not be returned due to one of the following reasons:\n\nA trace instance with a matching ID could not be found.\nA packet with the specified number does not exist in the trace."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return requested packet number of a trace instance in detail formatted.",
                "tags": [
                    "The SmartTrace Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/packets/{packetNumber}/details/raw": {
            "get": {
                "operationId": "getPacketDetailRaw",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the trace instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The packet number from which you are retrieving the raw details",
                        "in": "path",
                        "name": "packetNumber",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponsePacketRawDetailsData"
                                }
                            }
                        },
                        "description": "Raw packet detail information was returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned due to an invalid format for the URI query parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned because the user does not have the appropriate authority to view packets."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Raw packet detail information could not be returned due to one of the following reasons:\n\nA trace instance with a matching ID could not be found.\nA packet with the specified number does not exist in the trace."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Return requested packet number of a trace instance in raw detail.",
                "tags": [
                    "The SmartTrace Packets API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/smart/trace/{id}/save": {
            "post": {
                "description": "Returns all of the details about the saved trace.",
                "operationId": "saveSmartTraceInstance",
                "parameters": [
                    {
                        "description": "SmartTrace instance ID",
                        "example": "def-1-1-trace-1-1",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^([A-Za-z][A-Za-z0-9@#$]{0,11}|>\\w+\\W\\w+\\W\\w+)(-\\d+-\\d+-[A-Za-z][A-Za-z0-9@#$?*]{0,7}-\\d+-\\d+)$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SaveTraceBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseSavedTraceDetails"
                                }
                            }
                        },
                        "description": "The trace was saved."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be saved due to one of the following conditions:\n\nInvalid format for the URI parameters."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be saved due to one of the following conditions:\n\nThe user does not have the appropriate authority to save traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace matching the URI parameters could not be located."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Saves a trace on the IPFILE.",
                "tags": [
                    "The SmartTrace Active Traces API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/stacks": {
            "get": {
                "description": "Returns information of network stacks monitored by NetMaster",
                "operationId": "getAllStack",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataStackDataRow"
                                }
                            }
                        },
                        "description": "A list of stacks monitored by NetMaster"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. You must provide either a valid login token or valid credentials before continuing."
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get all stacks monitored by NetMaster",
                "tags": [
                    "The Stack Data API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/stacks/{stackName}/interface": {
            "get": {
                "description": "Returns list of all interfaces that belong to a stack monitored by NetMaster",
                "operationId": "getStackInterface",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Network stack name",
                        "in": "path",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataStackInterfaceDataRow"
                                }
                            }
                        },
                        "description": "List of all interfaces that belong to a stack monitored by NetMaster"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. You must provide either a valid login token or valid credentials before continuing."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Stack not monitored by NetMaster"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get all interfaces that belong to a stack monitored by NetMaster",
                "tags": [
                    "The Stack Data API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/counter": {
            "get": {
                "operationId": "getTcpConnCounter",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Counter ID to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of counter ID.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of application names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of application names to exclude.\n\nThe default operator is `in:`.\n\nExample: `in:counterId1|counterId2`",
                        "in": "query",
                        "name": "counterId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTcpConnCounterDataRow"
                                }
                            }
                        },
                        "description": "TCP connection counter data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get TCP connection counter data",
                "tags": [
                    "The TCP/IP Counters API"
                ]
            },
            "post": {
                "description": "Returns TCP connection counter data for the newly created counter",
                "operationId": "postTcpConnCounter",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TcpConnCounterCreateData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTcpConnCounterDataRow"
                                }
                            }
                        },
                        "description": "Created TCP connection counter data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Create a TCP connection counter",
                "tags": [
                    "The TCP/IP Counters API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/counter/{id}": {
            "delete": {
                "description": "Returns TCP connection counter data for the newly created counter",
                "operationId": "deleteTcpConnCounter",
                "parameters": [
                    {
                        "description": "Connection counter unique Id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9@#$?*_]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseObject"
                                }
                            }
                        },
                        "description": "Deleted TCP connection counter data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Unable to locate ID"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Delete a TCP connection counter",
                "tags": [
                    "The TCP/IP Counters API"
                ]
            },
            "put": {
                "description": "Returns TCP connection counter data for the newly created counter",
                "operationId": "putTcpConnCounter",
                "parameters": [
                    {
                        "description": "Connection counter unique Id",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9@#$?*_]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TcpConnCounterUpdateData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseObject"
                                }
                            }
                        },
                        "description": "Updated TCP connection counter data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Unable to locate ID"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Update a TCP connection counter",
                "tags": [
                    "The TCP/IP Counters API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/detail": {
            "get": {
                "description": "Returns detail data about a TCP connection, including packet information and security information",
                "operationId": "getTcpConnDetail",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "TCP/IP stack name of the TCP connection",
                        "in": "query",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Local host IP address of the TCP connection",
                        "in": "query",
                        "name": "localHostAddr",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Local port number of the TCP connection",
                        "in": "query",
                        "name": "localPortNum",
                        "required": true,
                        "schema": {
                            "pattern": "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Remote host IP address of the TCP connection",
                        "in": "query",
                        "name": "remoteHostAddr",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Remote port number of the TCP connection",
                        "in": "query",
                        "name": "remotePortNum",
                        "required": true,
                        "schema": {
                            "pattern": "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTcpConnDetailDataRow"
                                }
                            }
                        },
                        "description": "TCP connection detail data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get TCP connection detail data",
                "tags": [
                    "The TCP/IP Data API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/list": {
            "get": {
                "description": "Returns TCP connection list data that is optionally filtered and sorted",
                "operationId": "getTcpConnList",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Names of applications to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of application names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of application names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of application names to exclude.\n\nThe default operator is `in:`.\n\nAn application name is a 1 to 52 character value. The name may include wildcard characters.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:FTP|TELNET`",
                        "in": "query",
                        "name": "applName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of local hosts to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "localHostAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of remote hosts to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "remoteHostAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of remote networks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "remoteNetAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Names of TCP/IP stacks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of TCP/IP stack names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of TCP/IP stack names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of TCP/IP stack names to exclude.\n\nThe default operator is `in:`.\n\nA TCP/IP stack name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:TCPIP|TCPIPEE`",
                        "in": "query",
                        "name": "stackName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Names of tasks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of task names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of task names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of task names to exclude.\n\nThe default operator is `in:`.\n\nA task name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:FTPD32|TCPTN32`",
                        "in": "query",
                        "name": "taskName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Numbers of local ports to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than the specified port number are included in the request response.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than or equal to the specified port number are included in the request response.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than the specified port number are included in the request response.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than or equal to the specified port number are included in the request response.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.\n\nA pipe-separated list of port numbers can include both absolute port numbers (e.g., 23) and ranges of port numbers (e.g., [20|21]).",
                        "in": "query",
                        "name": "localPortNum",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Numbers of remote ports to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers greater than the specified port number are included in the request response.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers greater than or equal to the specified port number are included in the request response.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers less than the specified port number are included in the request response.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers less than or equal to the specified port number are included in the request response.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.\n\nA pipe-separated list of port numbers can include both absolute port numbers (e.g., 23) and ranges of port numbers (e.g., [20|21]).",
                        "in": "query",
                        "name": "remotePortNum",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User IDs to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of user IDs.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of user IDs to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of user IDs to exclude.\n\nThe default operator is `in:`.\n\nA user ID is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:ABAB12`",
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Connection types to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of connection types.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of connection types to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of connection types to exclude.\n\nThe default operator is `in:`.\n\nAllowable Values:  `secure`, `unsecure`, `ipsec`, `ssh`, `tls`, `sslv2`, `sslv3`, `tlsv1`, `tlsv11`, `tlsv12`, `tlsv13`\n\nExample: `in:sslv2|sslv3`",
                        "in": "query",
                        "name": "connectionType",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Cipher codes to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of cipher codes.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of cipher codes to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of cipher codes to exclude.\n\nThe default operator is `in:`.\n\nA cipher code is a 1 to 6 hexadecimal digit value.\n\nExample: `in:C00A|C00B`",
                        "in": "query",
                        "name": "cipherCode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort order of the connection list data, specified as a field name that is optionally followed by a colon separator and sort direction.\n\nThe field name specified must be \"applName\", \"localHostAddr\", \"remoteHostAddr\", \"remoteNetAddr\", \"stackName\", \"taskName\", \"localPortNum\", \"remotePortNum\", \"secVersion\", \"cipherCode\", \"userId\", \"startTime\", \"bytesSent\", \"bytesReceived\", \"secure\", or \"cipherName\", \"traceState\".\n\nThe colon separator and sort direction specified (if any) must be one of the following: `:asc` or `:desc`.\n\nThe `:asc` sort direction indicates ascending sort order.\n\nThe `:desc` sort direction indicates descending sort order.\n\nThe default sort direction is `:asc`.\n\nExample: `bytesSent:desc`",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTcpConnListDataRow"
                                }
                            }
                        },
                        "description": "TCP connection list data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get TCP connection list data",
                "tags": [
                    "The TCP/IP Data API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/summary": {
            "get": {
                "description": "Returns TCP connection security summary data that is optionally filtered and sorted",
                "operationId": "getTcpConnSecuritySummary",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name of entity for which the data is obtained",
                        "in": "query",
                        "name": "entity",
                        "required": false,
                        "schema": {
                            "pattern": "^((?i)application|localhost|remotehost|remotenet|stack|task|localport)$",
                            "type": "string",
                            "example": "stack",
                            "default": "task",
                            "enum": [
                                "application",
                                "localhost",
                                "remotehost",
                                "remotenet",
                                "stack",
                                "task",
                                "localport"
                            ]
                        }
                    },
                    {
                        "description": "Start position (zero-based row number) of the data to return",
                        "in": "query",
                        "name": "index",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Limit (maximum number of rows) on the data to return",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "string",
                            "default": "0"
                        }
                    },
                    {
                        "description": "Names of applications to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of application names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of application names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of application names to exclude.\n\nThe default operator is `in:`.\n\nAn application name is a 1 to 52 character value. The name may include wildcard characters.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:FTP|TELNET`",
                        "in": "query",
                        "name": "applName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of local hosts to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "localHostAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of remote hosts to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "remoteHostAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "IP addresses of remote networks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address and can be specified using address notation (e.g., 192.168.1.1, fe80::11f7:ad97:15ea), network notation (e.g., 192.168.0.0/16, 2001:db8::/32), or wildcard notation (e.g., 192.168.&#42;.&#42;, 2001:db8:&#42;:&#42;:&#42;:&#42;:&#42;:&#42;).\n\nExample: `in:192.168.3.&#42;|192.168.&#42;.1|2001:db8:3c4d::/48`",
                        "in": "query",
                        "name": "remoteNetAddr",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Names of TCP/IP stacks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of TCP/IP stack names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of TCP/IP stack names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of TCP/IP stack names to exclude.\n\nThe default operator is `in:`.\n\nA TCP/IP stack name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:TCPIP|TCPIPEE`",
                        "in": "query",
                        "name": "stackName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Names of tasks to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of task names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of task names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of task names to exclude.\n\nThe default operator is `in:`.\n\nA task name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\n\nExample: `in:FTPD32|TCPTN32`",
                        "in": "query",
                        "name": "taskName",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Numbers of local ports to include or exclude, specified as an optional operator and colon separator, followed by a pipe-separated list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than the specified port number are included in the request response.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than or equal to the specified port number are included in the request response.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than the specified port number are included in the request response.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than or equal to the specified port number are included in the request response.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.\n\nA pipe-separated list of port numbers can include both absolute port numbers (e.g., 23) and ranges of port numbers (e.g., [20|21]).",
                        "in": "query",
                        "name": "localPortNum",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort order of the security summary data, specified as a field name that is optionally followed by a colon separator and sort direction.\n\nThe field name specified must be \"applName\", \"localHostAddr\", \"remoteHostAddr\", \"remoteNetAddr\", \"stackName\", \"taskName\", \"localPortNum\", \"currConnCount\", \"currUnsecuredConnCount\", \"currSecuredConnCount\", \"currIpsecConnCount\", \"currTlsConnCount\", \"currSshConnCount\", \"currSslv2ConnCount\", \"currSslv3ConnCount\", \"currTlsv1ConnCount\", \"currTlsv11ConnCount\", \"currTlsv12ConnCount\", or \"currTlsv13ConnCount\".\n\nThe colon separator and sort direction specified (if any) must be `:asc` or `:desc`.\n\nThe `:asc` sort direction indicates ascending sort order.\n\nThe `:desc` sort direction indicates descending sort order.\n\nThe default sort direction is `:asc`.\n\nExample: `currTlsConnCount:desc`",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataTcpConnSecuritySummaryDataRow"
                                }
                            }
                        },
                        "description": "TCP connection security summary data"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Bad Request: check format"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Authentication is required"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get TCP connection security summary data",
                "tags": [
                    "The TCP/IP Data API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/trace/{paConnId}/{stackName}": {
            "get": {
                "description": "Gets a list of connection packet traces for a given TCP connection in NetMaster.",
                "operationId": "getConnPacketTraceList",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "in": "path",
                        "name": "paConnId",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Network stack name",
                        "in": "path",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponseBaseResponseArrayDataConnTraceSummary"
                                }
                            }
                        },
                        "description": "A list of traces was returned back to the client."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be returned due to one of the following conditions:\n\n - Invalid format for the paConnId or the stackName field in the URI.\n"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A list of traces could not be returned due to one of the following conditions:\n\n - The user does not have the appropriate authority to view traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A connection matching the URI paConnId parameter was not foundor a trace for the connection was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Get a list of connection packet traces in NetMaster.",
                "tags": [
                    "The TCP/IP Connection Packet Trace API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/trace/{paConnId}/{stackName}/delete": {
            "delete": {
                "description": "Deletes a connection packet trace for a given TCP connection in NetMaster.",
                "operationId": "deleteConnPacketTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "in": "path",
                        "name": "paConnId",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Network stack name",
                        "in": "path",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The trace was deleted. No content is returned."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be deleted due to one of the following conditions:\n\n - Invalid format for the paConnId or the stackName field in the URI.\n"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be deleted due to one of the following conditions:\n\n - The user does not have the appropriate authority to delete traces."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A connection matching the URI paConnId or stackName parameter was not found,  or a trace for the connection was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Delete a connection packet trace in NetMaster.",
                "tags": [
                    "The TCP/IP Connection Packet Trace API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/trace/{paConnId}/{stackName}/start": {
            "put": {
                "description": "Creates and starts a connection packet trace for a given TCP connection in NetMaster.",
                "operationId": "startConnPacketTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "in": "path",
                        "name": "paConnId",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Network stack name",
                        "in": "path",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The trace was started. No content is returned. \n\nIf a trace is already started for the connection, the existing trace instance is stopped and a new instance is started."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be started due to one of the following conditions:\n\n - Invalid format for the paConnId or the stackName field in the URI.\n"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be started due to one of the following conditions:\n\n - The user does not have the appropriate authority to start a trace."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A connection matching the URI paConnId or stackName parameter was not found, ."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Start a connection packet trace in NetMaster.",
                "tags": [
                    "The TCP/IP Connection Packet Trace API"
                ]
            }
        },
        "/api/v1/tcpip/{region}/tcp/conn/trace/{paConnId}/{stackName}/stop": {
            "delete": {
                "description": "Stops a connection packet trace for a given TCP connection in NetMaster.",
                "operationId": "stopConnPacketTrace",
                "parameters": [
                    {
                        "description": "NetMaster region name",
                        "in": "path",
                        "name": "region",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "in": "path",
                        "name": "paConnId",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z0-9]{1,16}$",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Network stack name",
                        "in": "path",
                        "name": "stackName",
                        "required": true,
                        "schema": {
                            "pattern": "^[A-Za-z@#$][A-Za-z0-9@#$]{0,7}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The trace was stopped. No content is returned. \n\nIf the trace is already stopped, the server will ignore the request but respond back to the client as if it stopped the trace."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be stopped due to one of the following conditions:\n\n - Invalid format for the paConnId or the stackName field in the URI.\n"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "The user is not authenticated to the application. They must provide either a valid login token or valid credentials before continuing."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A trace could not be stopped due to one of the following conditions:\n\n - The user does not have the appropriate authority to stop a trace."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "A connection matching the URI paConnId or stackName parameter was not found, or a trace for the connection was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMessage"
                                }
                            }
                        },
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    },
                    {
                        "bearerToken": []
                    }
                ],
                "summary": "Stop a connection packet trace in NetMaster.",
                "tags": [
                    "The TCP/IP Connection Packet Trace API"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ATTLSConnectionStatus": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Not secured by AT-TLS\n       - Connection handshake in progress\n       - Secured by AT-TLS\n       - no mapped value\n      "
                    }
                },
                "description": "Connection status for AT-TLS"
            },
            "ATTLSData": {
                "type": "object",
                "properties": {
                    "cipherInfo": {
                        "$ref": "#/components/schemas/Cipher"
                    },
                    "connectionStatus": {
                        "$ref": "#/components/schemas/ATTLSConnectionStatus"
                    },
                    "fipsEnabled": {
                        "type": "boolean",
                        "description": "FIPS is enabled",
                        "example": false
                    },
                    "fipsStatus": {
                        "$ref": "#/components/schemas/FIPSStatus"
                    },
                    "negotiatedKeyShare": {
                        "type": "string",
                        "description": "The negotiated TLS key share that is in use by the secure connection",
                        "example": "0000"
                    },
                    "policyStatus": {
                        "$ref": "#/components/schemas/ATTLSPolicyStatus"
                    },
                    "protocolVersion": {
                        "$ref": "#/components/schemas/TLSProtocol"
                    },
                    "reuseRequired": {
                        "$ref": "#/components/schemas/ATTLSReuseRequired"
                    },
                    "securityCipher": {
                        "type": "string",
                        "description": "The negotiated security cipher",
                        "example": "0013"
                    },
                    "securityType": {
                        "$ref": "#/components/schemas/ATTLSSecurityType"
                    },
                    "sessionID": {
                        "type": "string",
                        "description": "Session id",
                        "example": "x'0200005200000000000000000000FFFE0AE6480EFCF400006192829300000011'"
                    },
                    "sessionIDLength": {
                        "type": "integer",
                        "description": "Session id length",
                        "format": "int32",
                        "example": 32
                    },
                    "userID": {
                        "type": "string",
                        "description": "The User ID associated with the peer certificate",
                        "example": "USERBOB"
                    }
                },
                "description": "AT-TLS data"
            },
            "ATTLSPolicyStatus": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Policy status is not known\n       - AT-TLS function off\n       - No policy defined for connection\n       - Policy defined for connection; AT-TLS not enabled\n       - Policy defined for connection; AT-TLS enabled\n       - Policy defined for connection; AT-TLS enabled and Application Controlled\n       - no mapped value\n      "
                    }
                },
                "description": "Policy status for AT-TLS"
            },
            "ATTLSReuseRequired": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Reuse session required off\n       - Reuse session required on\n       - no mapped value\n      "
                    }
                },
                "description": "Reuse required for AT-TLS"
            },
            "ATTLSSecurityType": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Client\n       - Server\n       - Server with client authentication, ClientAuthType = PassThru\n       - Server with client authentication, ClientAuthType = Full\n       - Server with client authentication, ClientAuthType = Required\n       - Server with client authentication, ClientAuthType = SAFCheck\n       - no mapped value\n      "
                    }
                },
                "description": "The AT-TLS Security Type"
            },
            "AdvancedPacketFilter": {
                "required": [
                    "filters"
                ],
                "type": "object",
                "properties": {
                    "expression": {
                        "type": "string",
                        "description": "Combines all expressions into one expression using boolean operators",
                        "example": "1 OR 2 AND 3 OR NOT 4"
                    },
                    "filters": {
                        "type": "array",
                        "description": "Filters on a packet",
                        "items": {
                            "$ref": "#/components/schemas/PacketFilterRow"
                        }
                    }
                },
                "description": "Advanced filters on packet data"
            },
            "ApiMessage": {
                "title": "API Messages",
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "array",
                        "description": "Set of API messages.",
                        "items": {
                            "$ref": "#/components/schemas/ResponseMessage"
                        }
                    }
                }
            },
            "BaseResponseArrayDataCipher": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/Cipher"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataConnTraceSummary": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/ConnTraceSummary"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataPacketSummary": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/PacketSummary"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataRegionsDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/RegionsDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataSavedTraceSummary": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/SavedTraceSummary"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataSmartTraceDefinitionRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/SmartTraceDefinitionRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataStackDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/StackDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataStackInterfaceDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/StackInterfaceDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataTcpConnCounterDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/TcpConnCounterDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataTcpConnDetailDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/TcpConnDetailDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataTcpConnListDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/TcpConnListDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataTcpConnSecuritySummaryDataRow": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/TcpConnSecuritySummaryDataRow"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayDataTraceSummary": {
                "required": [
                    "index",
                    "keys",
                    "rows",
                    "totalRows"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The start position (zero-based row number) of the data",
                        "format": "int32",
                        "example": 0
                    },
                    "keys": {
                        "type": "array",
                        "description": "The properties that uniquely identify a row of data",
                        "items": {
                            "type": "string",
                            "description": "The properties that uniquely identify a row of data"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "description": "The NetMaster REST API response data rows",
                        "items": {
                            "$ref": "#/components/schemas/TraceSummary"
                        }
                    },
                    "totalRows": {
                        "type": "integer",
                        "description": "The quantity (total number of rows) of data available",
                        "format": "int32",
                        "example": 10
                    }
                },
                "description": "A NetMaster REST API Response Array Data Object"
            },
            "BaseResponseArrayListNameValuesData": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "type": "array",
                        "description": "The NetMaster REST API response data",
                        "items": {
                            "$ref": "#/components/schemas/NameValuesData"
                        }
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataCipher": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataCipher"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataConnTraceSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataConnTraceSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataPacketSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataPacketSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataRegionsDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataRegionsDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataSavedTraceSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataSavedTraceSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataSmartTraceDefinitionRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataSmartTraceDefinitionRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataStackDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataStackDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataStackInterfaceDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataStackInterfaceDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataTcpConnCounterDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataTcpConnCounterDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataTcpConnDetailDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataTcpConnDetailDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataTcpConnListDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataTcpConnListDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataTcpConnSecuritySummaryDataRow": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataTcpConnSecuritySummaryDataRow"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseBaseResponseArrayDataTraceSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/BaseResponseArrayDataTraceSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseObject": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "type": "object",
                        "description": "The NetMaster REST API response data",
                        "example": null
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponsePacketRawDetailsData": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/PacketRawDetailsData"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponsePacketSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/PacketSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseSavedTraceDetails": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/SavedTraceDetails"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseTraceSummary": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/TraceSummary"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseWebParameterData": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/WebParameterData"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "BaseResponseWsInfoData": {
                "required": [
                    "apiVersion",
                    "data",
                    "swaggerVersion",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The API version",
                        "example": "v1"
                    },
                    "data": {
                        "$ref": "#/components/schemas/WsInfoData"
                    },
                    "swaggerVersion": {
                        "type": "string",
                        "description": "The Swagger version",
                        "example": "2.0"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time in milliseconds, displayed in UTC time, when the response was generated",
                        "format": "int64",
                        "example": 1564754568891
                    }
                },
                "description": "A NetMaster REST API Response Object"
            },
            "CICSApplData": {
                "type": "object",
                "properties": {
                    "cicsSystemName": {
                        "type": "string",
                        "description": "The name of the CICS system on which the transaction is running",
                        "example": "CICP"
                    },
                    "taskNumber": {
                        "type": "string",
                        "description": "The task number of the transaction identifier",
                        "example": "0000059"
                    },
                    "transactionID": {
                        "type": "string",
                        "description": "The CICS/TS transaction identifier assigned to the program that issued the CONNECT socket command",
                        "example": "CLI1"
                    },
                    "userID": {
                        "type": "string",
                        "description": "The user ID that is assigned to the transaction identifier",
                        "example": "CICSUSR5"
                    }
                },
                "description": "Application data for IP CICS sockets"
            },
            "CertificateDigestAlgorithm": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - MD2\n       - MD5\n       - SHA1\n       - SHA-224\n       - SHA-256\n       - SHA-384\n       - SHA-512\n       - no mapped value\n      "
                    }
                },
                "description": "The certificate digest algorithm"
            },
            "CertificateEncryptionMethod": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - RSA\n       - DSA\n       - ECDSA\n       - no mapped value\n      "
                    }
                },
                "description": "The certificate encryption method"
            },
            "CertificateInfo": {
                "type": "object",
                "properties": {
                    "digestAlgorithm": {
                        "$ref": "#/components/schemas/CertificateDigestAlgorithm"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/CertificateEncryptionMethod"
                    },
                    "keyLength": {
                        "type": "integer",
                        "description": "The certificate key length in bytes",
                        "format": "int32",
                        "example": 64
                    },
                    "keyType": {
                        "$ref": "#/components/schemas/ZertTLSCertificateKeyType"
                    },
                    "notAfterTime": {
                        "type": "integer",
                        "description": "The certificate \"not after\" time, in milliseconds, as a Unix timestamp\nThis is the time after which the certificate is no longer valid.",
                        "format": "int64",
                        "example": 1637607157000
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "The certificate serial number",
                        "example": "03:04:54:08:f9:ff:10:92:e1:69:fe:49:8f:78:d3:6d:dc:47"
                    },
                    "serialNumberLength": {
                        "type": "integer",
                        "description": "The certificate serial number length in bytes",
                        "format": "int32",
                        "example": 18
                    },
                    "signatureMethod": {
                        "$ref": "#/components/schemas/CertificateSignatureMethod"
                    }
                },
                "description": "Certificate information"
            },
            "CertificateSignatureMethod": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - RSA with MD2\n       - RSA with MD5\n       - RSA with SHA1\n       - RSA with SHA1\n       - DSA with SHA1\n       - RSA with SHA-224\n       - RSA with SHA-256\n       - RSA with SHA-384\n       - RSA with SHA-512\n       - ECDSA with SHA1\n       - ECDSA with SHA-224\n       - ECDSA with SHA-256\n       - ECDSA with SHA-384\n       - ECDSA with SHA-512\n       - DSA with SHA-224\n       - DSA with SHA-256\n       - RSA PSS RSAE with SHA-256\n       - RSA PSS RSAE with SHA-384\n       - RSA PSS RSAE with SHA-512\n       - ED 25519\n       - ED 448\n       - RSA PSS PSS with SHA-256\n       - RSA PSS PSS with SHA-384\n       - RSA PSS PSS with SHA-512\n       - no mapped value\n      "
                    }
                },
                "description": "The certificate signature method for TLS connections from zERT"
            },
            "Cipher": {
                "required": [
                    "algorithm",
                    "cipherCode",
                    "cipherName",
                    "protocolVersion",
                    "security",
                    "tlsVersion"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "$ref": "#/components/schemas/CipherAlgorithm"
                    },
                    "cipherCode": {
                        "type": "string",
                        "description": "The cipher code for a secure connection",
                        "example": "CCAD"
                    },
                    "cipherName": {
                        "type": "string",
                        "description": "The cipher name for a secure connection",
                        "example": "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256"
                    },
                    "gnutlsName": {
                        "type": "string",
                        "description": "The name of this cipher in the GnuTLS library",
                        "example": "TLS_DHE_PSK_CHACHA20_POLY1305"
                    },
                    "opensslName": {
                        "type": "string",
                        "description": "The name of this cipher in the OpenSSL library",
                        "example": "DHE-PSK-CHACHA20-POLY1305"
                    },
                    "protocolVersion": {
                        "type": "string",
                        "description": "The general protocol with which this cipher is used",
                        "example": "TLS"
                    },
                    "security": {
                        "type": "string",
                        "description": "\nThe security level of this cipher\n\nThere are four possible values:\n\ninsecure - This cipher is old and should not be used. Its protection can be broken easily.\n\nweak - This cipher is old, and should only be used in special cases, such as when you need to\n           support older operating systems, browsers, or applications. In most cases, such as when\n           you are setting up a new server, this cipher should be disabled.\n\nsecure - This cipher is optimal for web server support and widely applicable in most cases.\n             Some very old operating systems, browsers and applications might not be compatible.\n\nrecommended - This cipher is Secure with added support for Perfect Forward Secrecy (PFS).\n                  Recommended ciphers provide the highest level of security, but there are potential\n                  compatibility issues with older clients that do not support PFS.\n",
                        "example": "recommended",
                        "enum": [
                            "insecure",
                            "weak",
                            "secure",
                            "recommended"
                        ]
                    },
                    "tlsVersion": {
                        "type": "array",
                        "description": "The TLS versions with which this cipher can be used",
                        "example": [
                            "TLS1.2"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The TLS versions with which this cipher can be used",
                            "example": "[\"TLS1.2\"]",
                            "enum": [
                                "TLS1.0",
                                "TLS1.1",
                                "TLS1.2",
                                "TLS1.3"
                            ]
                        }
                    }
                },
                "description": "A NetMaster REST API Server Cipher Object"
            },
            "CipherAlgorithm": {
                "required": [
                    "encryption",
                    "hash"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "type": "string",
                        "description": "The authentication algorithm",
                        "example": "PSK"
                    },
                    "encryption": {
                        "type": "string",
                        "description": "The encryption algorithm",
                        "example": "CHACHA20 POLY1305"
                    },
                    "hash": {
                        "type": "string",
                        "description": "The hashing algorithm",
                        "example": "SHA256"
                    },
                    "keyExchange": {
                        "type": "string",
                        "description": "The key exchange algorithm",
                        "example": "DHE"
                    }
                },
                "description": "A NetMaster REST API Server Cipher Algorithm Object"
            },
            "ConnTraceSummary": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "checks": {
                        "$ref": "#/components/schemas/TraceSummaryChecks"
                    },
                    "id": {
                        "type": "string",
                        "description": "A NetMaster-generated identifier for the trace.",
                        "example": "ATRACE-1-16-TCPIPNFS-0-0"
                    },
                    "info": {
                        "$ref": "#/components/schemas/TraceSummaryInfo"
                    },
                    "ipInfo": {
                        "$ref": "#/components/schemas/TraceSummaryIpInfo"
                    },
                    "key": {
                        "$ref": "#/components/schemas/TraceSummaryKey"
                    },
                    "savedTraceDefinitionName": {
                        "type": "string",
                        "description": "The name of the definition from which the saved trace was captured.",
                        "example": "ATRACE"
                    },
                    "savedTraceName": {
                        "type": "string",
                        "description": "The name of the saved trace.",
                        "example": "A saved trace"
                    },
                    "savedTracePacketCount": {
                        "$ref": "#/components/schemas/SavedTraceSummaryPacketCount"
                    },
                    "savedTraceStackName": {
                        "type": "string",
                        "description": "The name of the stack from which the saved trace was captured.",
                        "example": "TCPIP"
                    },
                    "savedTraceTimestamps": {
                        "$ref": "#/components/schemas/SavedTraceSummaryTimeStamps"
                    },
                    "savedTraceUser": {
                        "type": "string",
                        "description": "The user that saved the trace."
                    },
                    "tcpServerLocation": {
                        "type": "string",
                        "description": "TCP server local for the active or ended trace",
                        "example": "LOCAL",
                        "enum": [
                            "value: 0 serverLocation: UNKNOWN",
                            "value: 1 serverLocation: LOCAL",
                            "value: 2 serverLocation: REMOTE"
                        ]
                    },
                    "timestamps": {
                        "$ref": "#/components/schemas/TraceSummaryTimeStamps"
                    }
                },
                "description": "An interface that describes the data for a NetMaster connection trace."
            },
            "FIPSStatus": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - FIPS 140 off\n       - FIPS 140 on\n       - FIPS 140 level 1\n       - FIPS 140 level 2\n       - FIPS 140 level 3\n       - no mapped value\n      "
                    }
                },
                "description": "FIPS 140 status"
            },
            "FTPApplData": {
                "type": "object",
                "properties": {
                    "applicationType": {
                        "type": "string",
                        "description": "The type of the FTP application",
                        "example": "SERVER"
                    },
                    "cipherInfo": {
                        "$ref": "#/components/schemas/Cipher"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "The connection type of the FTP application",
                        "example": "CNTL"
                    },
                    "dataConnectionType": {
                        "type": "string",
                        "description": "The data connection type for the FTP data connection",
                        "example": "PASV"
                    },
                    "dataDirection": {
                        "type": "string",
                        "description": "The data transfer direction for the FTP data connection",
                        "example": "OUT"
                    },
                    "fileLocation": {
                        "type": "string",
                        "description": "The file location type for the FTP data connection",
                        "example": "UNIX"
                    },
                    "fileType": {
                        "type": "string",
                        "description": "The file type for the FTP data connection",
                        "example": "DIR"
                    },
                    "securityCipher": {
                        "type": "string",
                        "description": "The security cipher in use when the security method is TLS managed by either FTP or AT-TLS",
                        "example": "008B"
                    },
                    "securityLevel": {
                        "type": "string",
                        "description": "The security level for the data connection",
                        "example": "TLSv1.3"
                    },
                    "securityMethod": {
                        "type": "string",
                        "description": "The security method for the FTP data connection",
                        "example": "TLS-FTP"
                    },
                    "securityStatus": {
                        "type": "string",
                        "description": "The security status for the FTP data connection",
                        "example": "CLEAR"
                    },
                    "socksConnection": {
                        "type": "string",
                        "description": "SOCKS usage for the connection: either connected directly to the FTP server (no SOCKS), or connected through SOCKS",
                        "example": "YES"
                    },
                    "userID": {
                        "type": "string",
                        "description": "The user ID",
                        "example": "FTPUSER"
                    }
                },
                "description": "Application data for FTP connections"
            },
            "IKETunnelAuthenticationMethod": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown or manual tunnel\n       - None\n       - RSA signature\n       - Preshared key\n       - ECDSA-256 signature\n       - ECDSA-384 signature\n       - ECDSA-521 signature\n       - Digital signature\n       - no mapped value\n      "
                    }
                },
                "description": "The authentication method for the endpoint"
            },
            "IKETunnelPseudoRandomFunction": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown or manual tunnel\n       - None\n       - HMAC-SHA2-256\n       - HMAC-SHA2-384\n       - HMAC-SHA2-512\n       - AES-128-XCBC\n       - HMAC-MD5\n       - HMAC-SHA1\n       - no mapped value\n      "
                    }
                },
                "description": "The Pseudo-random function used for seeding keyring material"
            },
            "IcmpMessageFilter": {
                "type": "object",
                "properties": {
                    "codes": {
                        "type": "string",
                        "description": "A filter for codes of an ICMP message",
                        "example": "in:1|2|3|4"
                    },
                    "types": {
                        "type": "string",
                        "description": "A filter for an ICMP message type",
                        "example": "in:1|2|3|4"
                    }
                },
                "description": "Filters on the ICMP message"
            },
            "IcmpTraceBaseCriteria": {
                "type": "object",
                "properties": {
                    "interfaceName": {
                        "type": "string",
                        "description": "The logical name for the physical link or adapter that the TCP/IP stack uses to route an IP packet",
                        "example": "LOOPBACK"
                    },
                    "localHost": {
                        "type": "string",
                        "description": "The IP host address of the local TCP/IP stack",
                        "example": "192.*"
                    },
                    "remoteHost": {
                        "type": "string",
                        "description": "The IP host address of the remote TCP/IP stack",
                        "example": "2001:DB8::/32"
                    },
                    "specialAddress": {
                        "type": "string",
                        "description": "A type of special address, either LOOPBACK, MULTICAST, or BROADCAST",
                        "example": "MULTICAST",
                        "enum": [
                            "LOOPBACK",
                            "MULTICAST",
                            "BROADCAST"
                        ]
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack to limit the trace to",
                        "example": "TCPIP1"
                    }
                },
                "description": "The base criteria of an ICMP trace"
            },
            "IcmpV4TraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "messageFilter": {
                        "$ref": "#/components/schemas/IcmpMessageFilter"
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/IcmpV4TraceDatagramDetails"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    },
                    "redirectGateway": {
                        "type": "string",
                        "description": "The new gateway address recommended in an ICMP Redirect message (Type 5)",
                        "example": "192.168/255.128"
                    }
                },
                "description": "ICMP Version 4 Trace Advanced Criteria"
            },
            "IcmpV4TraceDatagramDetails": {
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "The destination address of an IP packet before an ICMP error message occurred",
                        "example": "192.*"
                    },
                    "protocol": {
                        "type": "integer",
                        "description": "The IP protocol of the packet that generated the ICMP error message",
                        "format": "int32",
                        "example": 6
                    },
                    "source": {
                        "type": "string",
                        "description": "The original IP host address that generated the ICMP error message",
                        "example": "2001:*"
                    }
                },
                "description": "Icmp Version 4 Trace Datagram Details"
            },
            "IcmpV4TraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/IcmpV4TraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for an ICMPv4 trace definition"
            },
            "IcmpV4TraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/IcmpV4TraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/IcmpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/IcmpV4TraceAdvancedCriteria"
                    }
                },
                "description": "ICMP v4 packet trace filter criteria"
            },
            "IcmpV6TraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "messageFilter": {
                        "$ref": "#/components/schemas/IcmpMessageFilter"
                    },
                    "mtu": {
                        "type": "string",
                        "description": "Maximum Transmission Unit of the next hop link, as reported by an ICMP Packet Too Big error message (Type 2)",
                        "example": "neq:6450"
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/IcmpV6TraceDatagramDetails"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    }
                },
                "description": "ICMP Version 6 Trace Advanced Criteria"
            },
            "IcmpV6TraceDatagramDetails": {
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "The destination address of an IP packet before an ICMP error message occurred",
                        "example": "192.*"
                    },
                    "nextHeader": {
                        "type": "integer",
                        "description": "The Next Header field of the IPv6 packet that generated the ICMP error message",
                        "format": "int32",
                        "example": 6
                    },
                    "source": {
                        "type": "string",
                        "description": "The original IP host address that generated the ICMP error message",
                        "example": "2001:*"
                    }
                },
                "description": "Icmp Version 6 Trace Datagram Details"
            },
            "IcmpV6TraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/IcmpV6TraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for an ICMPv6 trace definition"
            },
            "IcmpV6TraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/IcmpV6TraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/IcmpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/IcmpV6TraceAdvancedCriteria"
                    }
                },
                "description": "ICMP v6 packet trace filter criteria"
            },
            "IpTraceBaseCriteria": {
                "type": "object",
                "properties": {
                    "interfaceName": {
                        "type": "string",
                        "description": "The logical name for the physical link or adapter that the TCP/IP stack uses to route an IP packet",
                        "example": "LOOPBACK"
                    },
                    "localHost": {
                        "type": "string",
                        "description": "The IP host address of the local TCP/IP stack",
                        "example": "192.*"
                    },
                    "protocol": {
                        "type": "integer",
                        "description": "The upper layer protocol used in the data portion of the IP packet",
                        "format": "int32",
                        "example": 6
                    },
                    "remoteHost": {
                        "type": "string",
                        "description": "The IP host address of the remote TCP/IP stack",
                        "example": "2001:DB8::/32"
                    },
                    "specialAddress": {
                        "type": "string",
                        "description": "A type of special address, either LOOPBACK, MULTICAST, or BROADCAST",
                        "example": "LOOPBACK",
                        "enum": [
                            "LOOPBACK",
                            "MULTICAST",
                            "BROADCAST"
                        ]
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack to limit the trace to",
                        "example": "TCPIP1"
                    }
                },
                "description": "Common base criteria for an IPv4 or IPv6 trace"
            },
            "IpV4TraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/IpV4TraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for an IP v4 trace definition"
            },
            "IpV4TraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/Ipv4TraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/IpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/IpV4TraceStopCriteria"
                    }
                },
                "description": "IP v4 packet trace filter criteria"
            },
            "IpV4TraceStopCriteria": {
                "type": "object",
                "properties": {
                    "dfBit": {
                        "type": "boolean",
                        "description": "Tests whether the Don't Fragment Bit of an IP Header is set\ntrue  - The bit is set\nfalse  - The bit is not set\nnull  - Skips this test",
                        "example": false
                    },
                    "fragmented": {
                        "type": "boolean",
                        "description": "Specifies whether to test for fragmentation \n true  - Test for fragmented packets \n false - Test for unfragmented packets \n null  - Skips this test",
                        "example": true
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    },
                    "ttl": {
                        "type": "string",
                        "description": "Specifies the number of routers through which a packet passes before it is discarded",
                        "example": "neq:243"
                    }
                },
                "description": "Criteria used to determine if the trace will stop"
            },
            "IpV6TraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "flowLabel": {
                        "type": "boolean",
                        "description": "Tests whether the flow label in an IPv6 header is non-zero. Flow labels can identify sequences of packets for which IPv6 routers perform special handling.\ntrue  - Contains a non-zero value\nfalse - Carries all zeroes\nnull  - Skips this test",
                        "example": false
                    },
                    "fragmented": {
                        "type": "boolean",
                        "description": "Specifies whether to test for fragmentation \n true  - Test for fragmented packets \n false - Test for unfragmented packets \n null  - Skips this test",
                        "example": true
                    },
                    "hopLimit": {
                        "type": "string",
                        "description": "Specifies the number of routers through which a packet passes before it is discarded",
                        "example": "neq:123"
                    },
                    "ipExtHeader": {
                        "type": "boolean",
                        "description": "   * Tests whether intermediate extension headers exist between the IPv6 header and the upper layer protocol headers. Examples include routing and fragment headers.\ntrue  - These extension headers exist\nfalse - These extension headers do not exist\nnull  - Skips this test",
                        "example": true
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    },
                    "trafficClass": {
                        "type": "string",
                        "description": "Specifies the 8-bit setting of the Traffic Class field in an IPv6 header, using a series of 0's and 1's",
                        "example": "10011100"
                    }
                },
                "description": "Advanced options that can be used to filter IPv6 packets"
            },
            "IpV6TraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/IpV6TraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for an IP v6 trace definition"
            },
            "IpV6TraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/IpV6TraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/IpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/IpV6TraceStopCriteria"
                    }
                },
                "description": "IP v6 packet trace filter criteria"
            },
            "IpV6TraceStopCriteria": {
                "type": "object",
                "properties": {
                    "flowLabel": {
                        "type": "boolean",
                        "description": "Tests whether the flow label in an IPv6 header is non-zero. Flow labels can identify sequences of packets for which IPv6 routers perform special handling.\ntrue  - Contains a non-zero value\nfalse - Carries all zeroes\nnull  - Skips this test",
                        "example": false
                    },
                    "fragmented": {
                        "type": "boolean",
                        "description": "Specifies whether to test for fragmentation \n true  - Test for fragmented packets \n false - Test for unfragmented packets \n null  - Skips this test",
                        "example": true
                    },
                    "hopLimit": {
                        "type": "string",
                        "description": "Specifies the number of routers through which a packet passes before it is discarded",
                        "example": "neq:123"
                    },
                    "ipExtHeader": {
                        "type": "boolean",
                        "description": "   * Tests whether intermediate extension headers exist between the IPv6 header and the upper layer protocol headers. Examples include routing and fragment headers.\ntrue  - These extension headers exist\nfalse - These extension headers do not exist\nnull  - Skips this test",
                        "example": true
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    }
                },
                "description": "Criteria used to determine if the trace will stop"
            },
            "Ipv4TraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "fragmented": {
                        "type": "boolean",
                        "description": "Specifies whether to test for fragmentation \n true  - Test for fragmented packets \n false - Test for unfragmented packets \n null  - Skips this test",
                        "example": true
                    },
                    "ipOpts": {
                        "type": "boolean",
                        "description": "Specifies whether optional fields follow the IP header\ntrue  - Optional fields follow the IP header\nfalse - No optional fields follow the IP header\nnull  - Skips this test",
                        "example": true
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    },
                    "packetLen": {
                        "type": "string",
                        "description": "The length of the IP packet in bytes",
                        "example": "gt:64344"
                    },
                    "qos": {
                        "type": "string",
                        "description": "Specifies one or more classes of service represented by the precedence bits in the ToS field of the IP header",
                        "example": "in:5|6"
                    },
                    "tos": {
                        "type": "boolean",
                        "description": "Tests the settings of the type of service (ToS) field in the IP header\n true  - At least one ToS bit is set to 1.\nfalse - All ToS bits are set to 0. (normal service)\nnull  - Skips this test",
                        "example": false
                    },
                    "ttl": {
                        "type": "string",
                        "description": "Specifies the number of routers through which a packet passes before it is discarded",
                        "example": "neq:243"
                    }
                },
                "description": "Advanced options that can be used to filter IPv4 packets"
            },
            "JsonPatch": {
                "type": "object"
            },
            "KeyValueData": {
                "required": [
                    "key",
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the formatted packet data section."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the value.",
                        "enum": [
                            "NUMBER",
                            "STRING",
                            "DATE_TIME",
                            "IPV4",
                            "IPV6",
                            "HEX",
                            "MAP",
                            "RANGE",
                            "BINARY",
                            "LIST"
                        ]
                    },
                    "value": {
                        "type": "object",
                        "description": "The value of the formatted packet.",
                        "example": null
                    }
                },
                "description": "Key Values Data object"
            },
            "LastUpdate": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The last region that updated the definition.",
                        "example": "NMDE8132"
                    },
                    "time": {
                        "type": "integer",
                        "description": "The time (UNIX timestamp, in milliseconds) when this definition was last updated.",
                        "format": "int64",
                        "example": 1635256720
                    },
                    "user": {
                        "type": "string",
                        "description": "The last user that updated the definition.",
                        "example": "STRONGBAD"
                    }
                },
                "description": "A Last Update Object"
            },
            "LoginRequest": {
                "title": "LoginRequest",
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "newPassword": {
                        "type": "string",
                        "description": "When user define value newPassword password will change after successful login",
                        "example": "newpassword"
                    },
                    "password": {
                        "type": "string",
                        "example": "strongpassword"
                    },
                    "username": {
                        "type": "string",
                        "example": "user ID"
                    }
                },
                "description": "Structure for login and also for change password"
            },
            "MessageAuthenticationProtocol": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Encapsulating Security Payload (ESP)\n       - Authentication Header (AH)\n       - no mapped value\n      "
                    }
                },
                "description": "The message authentication protocol"
            },
            "MultipleTcpTraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/TcpTraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptionsMulti"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "An interface that describes a trace for multiple TCP connections"
            },
            "NameValuesData": {
                "required": [
                    "name",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the section located in a network packet."
                    },
                    "values": {
                        "type": "array",
                        "description": "The list of data defined for the corresponding section.",
                        "items": {
                            "$ref": "#/components/schemas/KeyValueData"
                        }
                    }
                },
                "description": "Name Values Data object"
            },
            "PaPeerDetailData": {
                "required": [
                    "avgArt",
                    "currWinSize",
                    "firstArt",
                    "frag",
                    "invalidOptionsSent",
                    "maxArt",
                    "maxWinSize",
                    "minArt",
                    "minWinSize",
                    "mss",
                    "mssOptionSent",
                    "otherOptionsSent",
                    "reset",
                    "rexmits",
                    "sackOptionSent",
                    "sackPermitOptionSent",
                    "smcdOptionSent",
                    "smcrOptionSent",
                    "timestampOptionSent",
                    "winCloseCount",
                    "winCloseTime",
                    "winProbeCount",
                    "winScale",
                    "winScaleOptionSent"
                ],
                "type": "object",
                "properties": {
                    "avgArt": {
                        "type": "integer",
                        "description": "The peer average application response time (in milliseconds)",
                        "format": "int32",
                        "example": 2000
                    },
                    "currWinSize": {
                        "type": "integer",
                        "description": "The current receive window size (scaled) for the peer",
                        "format": "int32",
                        "example": 16384
                    },
                    "firstArt": {
                        "type": "integer",
                        "description": "The peer first application response time (in milliseconds)",
                        "format": "int32",
                        "example": 2000
                    },
                    "frag": {
                        "type": "boolean",
                        "description": "Indicates whether fragmentation of packets sent by the peer occurred",
                        "example": true
                    },
                    "invalidOptionsSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent invalid options",
                        "example": true
                    },
                    "maxArt": {
                        "type": "integer",
                        "description": "The peer maximum application response time (in milliseconds)",
                        "format": "int32",
                        "example": 5000
                    },
                    "maxWinSize": {
                        "type": "integer",
                        "description": "The maximum receive window size (scaled) for the peer",
                        "format": "int32",
                        "example": 32768
                    },
                    "minArt": {
                        "type": "integer",
                        "description": "The peer minimum application response time (in milliseconds)",
                        "format": "int32",
                        "example": 1000
                    },
                    "minWinSize": {
                        "type": "integer",
                        "description": "The minimum receive window size (scaled) for the peer",
                        "format": "int32",
                        "example": 1024
                    },
                    "mss": {
                        "type": "integer",
                        "description": "The peer maximum segment size (MSS)",
                        "format": "int32",
                        "example": 512
                    },
                    "mssOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the maximum segment size (MSS) option",
                        "example": true
                    },
                    "otherOptionsSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent other options",
                        "example": true
                    },
                    "reset": {
                        "type": "boolean",
                        "description": "Indicates whether the peer reset the connection",
                        "example": true
                    },
                    "rexmits": {
                        "type": "integer",
                        "description": "The number of retransmissions by the peer",
                        "format": "int32",
                        "example": 55
                    },
                    "sackOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the selective acknowledgement (SACK) option",
                        "example": true
                    },
                    "sackPermitOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the selective acknowledgement (SACK) permitted option",
                        "example": true
                    },
                    "smcLinkId": {
                        "type": "string",
                        "description": "The peer SMC link ID",
                        "example": "01020304"
                    },
                    "smcdOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the SMC-D supported option",
                        "example": true
                    },
                    "smcrOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the SMC-R supported option",
                        "example": true
                    },
                    "timestampOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the timestamp option",
                        "example": true
                    },
                    "winCloseCount": {
                        "type": "integer",
                        "description": "The number of receive window closes by the peer",
                        "format": "int32",
                        "example": 3
                    },
                    "winCloseTime": {
                        "type": "integer",
                        "description": "The total time (in milliseconds) the peer receive window has been closed",
                        "format": "int32",
                        "example": 4500
                    },
                    "winProbeCount": {
                        "type": "integer",
                        "description": "The number of window probes sent by the peer",
                        "format": "int32",
                        "example": 4
                    },
                    "winScale": {
                        "type": "integer",
                        "description": "The peer window scale value",
                        "format": "int32",
                        "example": 2
                    },
                    "winScaleOptionSent": {
                        "type": "boolean",
                        "description": "Indicates whether the peer sent the window scale option",
                        "example": true
                    }
                },
                "description": "A NetMaster Packet Analyzer TCP Connection Peer Detail Data Object"
            },
            "PaSegOffloadData": {
                "required": [
                    "avgLastSegSize",
                    "bytesSentBy",
                    "bytesSentWith",
                    "bytesSentWithout",
                    "maxLastSegSize",
                    "minLastSegSize",
                    "packetsSentBy",
                    "packetsSentWith",
                    "packetsSentWithout"
                ],
                "type": "object",
                "properties": {
                    "avgLastSegSize": {
                        "type": "integer",
                        "description": "The average last segment size of all segments sent by the segmentation offload feature",
                        "format": "int32",
                        "example": 2560
                    },
                    "bytesSentBy": {
                        "type": "string",
                        "description": "The number of bytes sent by the segmentation offload feature",
                        "example": "1000"
                    },
                    "bytesSentWith": {
                        "type": "string",
                        "description": "The number of bytes sent with segmentation offload requested",
                        "example": "1000"
                    },
                    "bytesSentWithout": {
                        "type": "string",
                        "description": "The number of bytes sent without segmentation offload requested",
                        "example": "1000"
                    },
                    "maxLastSegSize": {
                        "type": "integer",
                        "description": "The maximum last segment size of all segments sent by the segmentation offload feature",
                        "format": "int32",
                        "example": 512
                    },
                    "minLastSegSize": {
                        "type": "integer",
                        "description": "The minimum last segment size of all segments sent by the segmentation offload feature",
                        "format": "int32",
                        "example": 1
                    },
                    "packetsSentBy": {
                        "type": "string",
                        "description": "The number of packets sent by the segmentation offload feature",
                        "example": "10"
                    },
                    "packetsSentWith": {
                        "type": "string",
                        "description": "The number of packets sent with segmentation offload requested",
                        "example": "10"
                    },
                    "packetsSentWithout": {
                        "type": "string",
                        "description": "The number of packets sent without segmentation offload requested",
                        "example": "10"
                    }
                },
                "description": "A NetMaster Packet Analyzer TCP Connection Segmentation Offload Data Object"
            },
            "PaStatsData": {
                "required": [
                    "bytesReceived1MinX0",
                    "bytesReceived1MinX1",
                    "bytesReceived1MinX2",
                    "bytesReceived1MinX3",
                    "bytesReceived1MinX4",
                    "bytesReceived1MinX5",
                    "bytesReceived5MinX0",
                    "bytesReceived5MinX1",
                    "bytesReceived5MinX10",
                    "bytesReceived5MinX11",
                    "bytesReceived5MinX12",
                    "bytesReceived5MinX2",
                    "bytesReceived5MinX3",
                    "bytesReceived5MinX4",
                    "bytesReceived5MinX5",
                    "bytesReceived5MinX6",
                    "bytesReceived5MinX7",
                    "bytesReceived5MinX8",
                    "bytesReceived5MinX9",
                    "bytesSent1MinX0",
                    "bytesSent1MinX1",
                    "bytesSent1MinX2",
                    "bytesSent1MinX3",
                    "bytesSent1MinX4",
                    "bytesSent1MinX5",
                    "bytesSent5MinX0",
                    "bytesSent5MinX1",
                    "bytesSent5MinX10",
                    "bytesSent5MinX11",
                    "bytesSent5MinX12",
                    "bytesSent5MinX2",
                    "bytesSent5MinX3",
                    "bytesSent5MinX4",
                    "bytesSent5MinX5",
                    "bytesSent5MinX6",
                    "bytesSent5MinX7",
                    "bytesSent5MinX8",
                    "bytesSent5MinX9",
                    "packetsReceived1MinX0",
                    "packetsReceived1MinX1",
                    "packetsReceived1MinX2",
                    "packetsReceived1MinX3",
                    "packetsReceived1MinX4",
                    "packetsReceived1MinX5",
                    "packetsReceived5MinX0",
                    "packetsReceived5MinX1",
                    "packetsReceived5MinX10",
                    "packetsReceived5MinX11",
                    "packetsReceived5MinX12",
                    "packetsReceived5MinX2",
                    "packetsReceived5MinX3",
                    "packetsReceived5MinX4",
                    "packetsReceived5MinX5",
                    "packetsReceived5MinX6",
                    "packetsReceived5MinX7",
                    "packetsReceived5MinX8",
                    "packetsReceived5MinX9",
                    "packetsSent1MinX0",
                    "packetsSent1MinX1",
                    "packetsSent1MinX2",
                    "packetsSent1MinX3",
                    "packetsSent1MinX4",
                    "packetsSent1MinX5",
                    "packetsSent5MinX0",
                    "packetsSent5MinX1",
                    "packetsSent5MinX10",
                    "packetsSent5MinX11",
                    "packetsSent5MinX12",
                    "packetsSent5MinX2",
                    "packetsSent5MinX3",
                    "packetsSent5MinX4",
                    "packetsSent5MinX5",
                    "packetsSent5MinX6",
                    "packetsSent5MinX7",
                    "packetsSent5MinX8",
                    "packetsSent5MinX9",
                    "totalBytesReceived",
                    "totalBytesSent",
                    "totalPacketsReceived",
                    "totalPacketsSent"
                ],
                "type": "object",
                "properties": {
                    "bytesReceived1MinX0": {
                        "type": "integer",
                        "description": "The number of bytes received in the current one minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived1MinX1": {
                        "type": "integer",
                        "description": "The number of bytes received in the one minute interval that preceded the current interval by one minute",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived1MinX2": {
                        "type": "integer",
                        "description": "The number of bytes received in the one minute interval that preceded the current interval by two minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived1MinX3": {
                        "type": "integer",
                        "description": "The number of bytes received in the one minute interval that preceded the current interval by three minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived1MinX4": {
                        "type": "integer",
                        "description": "The number of bytes received in the one minute interval that preceded the current interval by four minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived1MinX5": {
                        "type": "integer",
                        "description": "The number of bytes received in the one minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX0": {
                        "type": "integer",
                        "description": "The number of bytes received in the current five minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX1": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX10": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 50 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX11": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 55 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX12": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 60 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX2": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by ten minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX3": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 15 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX4": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 20 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX5": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 25 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX6": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 30 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX7": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 35 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX8": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 40 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesReceived5MinX9": {
                        "type": "integer",
                        "description": "The number of bytes received in the five minute interval that preceded the current interval by 45 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX0": {
                        "type": "integer",
                        "description": "The number of bytes sent in the current one minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX1": {
                        "type": "integer",
                        "description": "The number of bytes sent in the one minute interval that preceded the current interval by one minute",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX2": {
                        "type": "integer",
                        "description": "The number of bytes sent in the one minute interval that preceded the current interval by two minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX3": {
                        "type": "integer",
                        "description": "The number of bytes sent in the one minute interval that preceded the current interval by three minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX4": {
                        "type": "integer",
                        "description": "The number of bytes sent in the one minute interval that preceded the current interval by four minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent1MinX5": {
                        "type": "integer",
                        "description": "The number of bytes sent in the one minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX0": {
                        "type": "integer",
                        "description": "The number of bytes sent in the current five minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX1": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX10": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 50 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX11": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 55 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX12": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 60 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX2": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by ten minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX3": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 15 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX4": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 20 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX5": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 25 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX6": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 30 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX7": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 35 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX8": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 40 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent5MinX9": {
                        "type": "integer",
                        "description": "The number of bytes sent in the five minute interval that preceded the current interval by 45 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "data": {
                        "$ref": "#/components/schemas/PacketStats5MinIntervalStruct"
                    },
                    "packetsReceived1MinX0": {
                        "type": "integer",
                        "description": "The number of packets received in the current one minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived1MinX1": {
                        "type": "integer",
                        "description": "The number of packets received in the one minute interval that preceded the current interval by one minute",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived1MinX2": {
                        "type": "integer",
                        "description": "The number of packets received in the one minute interval that preceded the current interval by two minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived1MinX3": {
                        "type": "integer",
                        "description": "The number of packets received in the one minute interval that preceded the current interval by three minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived1MinX4": {
                        "type": "integer",
                        "description": "The number of packets received in the one minute interval that preceded the current interval by four minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived1MinX5": {
                        "type": "integer",
                        "description": "The number of packets received in the one minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX0": {
                        "type": "integer",
                        "description": "The number of packets received in the current five minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX1": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX10": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 50 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX11": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 55 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX12": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 60 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX2": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by ten minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX3": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 15 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX4": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 20 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX5": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 25 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX6": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 30 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX7": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 35 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX8": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 40 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsReceived5MinX9": {
                        "type": "integer",
                        "description": "The number of packets received in the five minute interval that preceded the current interval by 45 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX0": {
                        "type": "integer",
                        "description": "The number of packets sent in the current one minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX1": {
                        "type": "integer",
                        "description": "The number of packets sent in the one minute interval that preceded the current interval by one minute",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX2": {
                        "type": "integer",
                        "description": "The number of packets sent in the one minute interval that preceded the current interval by two minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX3": {
                        "type": "integer",
                        "description": "The number of packets sent in the one minute interval that preceded the current interval by three minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX4": {
                        "type": "integer",
                        "description": "The number of packets sent in the one minute interval that preceded the current interval by four minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent1MinX5": {
                        "type": "integer",
                        "description": "The number of packets sent in the one minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX0": {
                        "type": "integer",
                        "description": "The number of packets sent in the current five minute interval",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX1": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by five minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX10": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 50 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX11": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 55 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX12": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 60 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX2": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by ten minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX3": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 15 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX4": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 20 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX5": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 25 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX6": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 30 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX7": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 35 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX8": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 40 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "packetsSent5MinX9": {
                        "type": "integer",
                        "description": "The number of packets sent in the five minute interval that preceded the current interval by 45 minutes",
                        "format": "int64",
                        "example": 123456789
                    },
                    "totalBytesReceived": {
                        "type": "integer",
                        "description": "The total number of bytes received",
                        "format": "int64",
                        "example": 123456789
                    },
                    "totalBytesSent": {
                        "type": "integer",
                        "description": "The total number of bytes sent",
                        "format": "int64",
                        "example": 123456789
                    },
                    "totalPacketsReceived": {
                        "type": "integer",
                        "description": "The total number of packets received",
                        "format": "int64",
                        "example": 123456789
                    },
                    "totalPacketsSent": {
                        "type": "integer",
                        "description": "The total number of packets sent",
                        "format": "int64",
                        "example": 123456789
                    }
                },
                "description": "A NetMaster Packet Analyzer Statistics Data Object"
            },
            "PaTlsData": {
                "required": [
                    "diffVersionsPresent",
                    "failed",
                    "handshakePresent",
                    "mode",
                    "secure"
                ],
                "type": "object",
                "properties": {
                    "alertInfo": {
                        "type": "string",
                        "description": "The SSL/TLS alert information recorded by packet analysis",
                        "example": "0000"
                    },
                    "cipherCode": {
                        "type": "string",
                        "description": "The SSL/TLS cipher code recorded by packet analysis",
                        "example": "C00A"
                    },
                    "cipherName": {
                        "type": "string",
                        "description": "The SSL/TLS cipher name recorded by packet analysis",
                        "example": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
                    },
                    "compMethod": {
                        "type": "string",
                        "description": "The SSL/TLS compression method recorded by packet analysis",
                        "example": "NONE"
                    },
                    "diffVersionsPresent": {
                        "type": "boolean",
                        "description": "Indicates whether packet analysis discovered different client and server SSL/TLS versions",
                        "example": true
                    },
                    "failed": {
                        "type": "boolean",
                        "description": "Indicates whether packet analysis discovered a failed SSL/TLS negotiation",
                        "example": true
                    },
                    "handshakePresent": {
                        "type": "boolean",
                        "description": "Indicates whether packet analysis discovered one or more SSL/TLS handshake messages",
                        "example": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "The SSL/TLS mode recorded by packet analysis",
                        "example": "SERVER",
                        "enum": [
                            "0 (NONE)",
                            "1 (UNKNOWN)",
                            "2 (SERVER)",
                            "3 (CLIENT)"
                        ]
                    },
                    "secure": {
                        "type": "boolean",
                        "description": "Indicates whether packet analysis discovered a successful SSL/TLS negotiation",
                        "example": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The SSL/TLS version recorded by packet analysis",
                        "example": "0302"
                    }
                },
                "description": "A NetMaster Packet Analyzer TCP Connection SSL/TLS Data Object"
            },
            "PacketConnectionInfo": {
                "required": [
                    "direction",
                    "localAddress",
                    "remoteAddress"
                ],
                "type": "object",
                "properties": {
                    "direction": {
                        "type": "string",
                        "description": "The direction the packet is traveling \nOUT (->) indicates that the packet is traveling from the local host to the remote host.\nIN  (<-) indicates that the packet is traveling from the remote host to the local host.",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "localAddress": {
                        "type": "string",
                        "description": "The local IP address",
                        "example": "10.0.0.1"
                    },
                    "localPort": {
                        "type": "integer",
                        "description": "The local IP port",
                        "format": "int32",
                        "example": 4200
                    },
                    "remoteAddress": {
                        "type": "string",
                        "description": "The remote IP address",
                        "example": "148.85.123.12"
                    },
                    "remotePort": {
                        "type": "integer",
                        "description": "The remote IP port",
                        "format": "int32",
                        "example": 43
                    }
                },
                "description": "Specific details about the connection"
            },
            "PacketFilterRow": {
                "required": [
                    "data",
                    "format",
                    "length",
                    "operator",
                    "start"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "The test data to compare to the packet data",
                        "example": "123"
                    },
                    "format": {
                        "type": "string",
                        "description": "The character format of the test data",
                        "example": "EBCDIC",
                        "enum": [
                            "EBCDIC",
                            "UEBCDIC",
                            "ASCII",
                            "UASCII",
                            "HEX",
                            "IP4ADDR",
                            "IP6ADDR"
                        ]
                    },
                    "length": {
                        "type": "integer",
                        "description": "The length of the packet data to compare to the test data\n The length includes the starting position.",
                        "format": "int32",
                        "example": 20
                    },
                    "operator": {
                        "type": "string",
                        "description": "The relational operator for comparing packet data with test data",
                        "example": "LIKE",
                        "enum": [
                            "LIKE",
                            "EQ",
                            "NEQ"
                        ]
                    },
                    "start": {
                        "type": "integer",
                        "description": "The first position in the packet data to begin the comparison",
                        "format": "int32",
                        "example": 3
                    }
                },
                "description": "Criteria to search in packets for"
            },
            "PacketFirstData": {
                "required": [
                    "ascii",
                    "ebcdic",
                    "hex"
                ],
                "type": "object",
                "properties": {
                    "ascii": {
                        "type": "string",
                        "description": "The first 16 bytes of the packet rendered in ASCII format",
                        "example": "...$...-....N..."
                    },
                    "ebcdic": {
                        "type": "string",
                        "description": "The first 16 bytes of the packet rendered in EBCDIC format",
                        "example": "p.{..m...i7.&..."
                    },
                    "hex": {
                        "type": "string",
                        "description": "The first 16 bytes of the packet in hexadecimal format",
                        "example": "976150249095253D8E89F65A50180DEF"
                    }
                },
                "description": "Information about the first 16 bytes of the packet after the IP header is removed"
            },
            "PacketRawDetailSection": {
                "required": [
                    "hex",
                    "length",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "hex": {
                        "type": "string",
                        "description": "Section data formatted as HEX string."
                    },
                    "length": {
                        "type": "integer",
                        "description": "The length of this section.",
                        "format": "int32"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this section."
                    }
                },
                "description": "Packet detail raw section object"
            },
            "PacketRawDetailsData": {
                "required": [
                    "length",
                    "sections"
                ],
                "type": "object",
                "properties": {
                    "length": {
                        "type": "integer",
                        "description": "The length of the packet",
                        "format": "int32"
                    },
                    "sections": {
                        "type": "array",
                        "description": "The list of all sections in the packet.",
                        "items": {
                            "$ref": "#/components/schemas/PacketRawDetailSection"
                        }
                    }
                },
                "description": "Raw Details Data object"
            },
            "PacketStats5MinIntervalStruct": {
                "required": [
                    "current",
                    "prev10Min",
                    "prev15Min",
                    "prev20Min",
                    "prev25Min",
                    "prev30Min",
                    "prev35Min",
                    "prev40Min",
                    "prev45Min",
                    "prev50Min",
                    "prev55Min",
                    "prev5Min",
                    "prev60Min"
                ],
                "type": "object",
                "properties": {
                    "current": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev10Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev15Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev20Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev25Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev30Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev35Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev40Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev45Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev50Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev55Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev5Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    },
                    "prev60Min": {
                        "$ref": "#/components/schemas/PacketStatsStruct"
                    }
                }
            },
            "PacketStatsStruct": {
                "required": [
                    "byteIn",
                    "byteOut",
                    "packetIn",
                    "packetOut"
                ],
                "type": "object",
                "properties": {
                    "byteIn": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "byteOut": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "packetIn": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "packetOut": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PacketSummary": {
                "required": [
                    "connection",
                    "data",
                    "length",
                    "packetNumber",
                    "protocol",
                    "stackInterface",
                    "summary",
                    "timing"
                ],
                "type": "object",
                "properties": {
                    "connection": {
                        "$ref": "#/components/schemas/PacketConnectionInfo"
                    },
                    "data": {
                        "$ref": "#/components/schemas/PacketFirstData"
                    },
                    "length": {
                        "type": "integer",
                        "description": "The total number of bytes in the packet\nThis number includes the IP headers and the data payload",
                        "format": "int32",
                        "example": 833
                    },
                    "packetNumber": {
                        "type": "integer",
                        "description": "The number of the packet represented by NetMaster",
                        "format": "int32",
                        "example": 3
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The IP protocol of the packet",
                        "example": "TCP"
                    },
                    "stackInterface": {
                        "type": "string",
                        "description": "The z/OS stack interface on which the packet was received or sent",
                        "example": "OSD470I"
                    },
                    "summary": {
                        "type": "string",
                        "description": "Summary Information is an 'at a glance' summary of the packet content.\nWhenever possible, Summary Information is decoded. Decoding is done for many IP protocols, for EE/UDP, and TCP applications FTP, TELNET, HTTP and DRDA, and SMC.",
                        "example": "TLS1.2: HSHK( SERVER_HELLO CERTIFICATE SERVER_HELLO_DONE )"
                    },
                    "timing": {
                        "$ref": "#/components/schemas/PacketTimingInfo"
                    },
                    "totalPackets": {
                        "type": "integer",
                        "description": "The total number of packets for a trace",
                        "format": "int32",
                        "example": 1000
                    }
                },
                "description": "A Packet Summary object"
            },
            "PacketTimingInfo": {
                "type": "object",
                "properties": {
                    "absolute": {
                        "type": "integer",
                        "description": "The UTC timestamp in microseconds indicating when the packet was received",
                        "format": "int64",
                        "example": 1578602055399254
                    },
                    "delta": {
                        "type": "integer",
                        "description": "\n      The time difference, in microseconds, between a packet and the previous packet.\n      If the time value is less than 0.000001seconds (1 microsecond), it shows as \"0\".\n      ",
                        "format": "int64",
                        "example": 1325
                    }
                },
                "description": "Information about the timing of the packet."
            },
            "RegionsDataRow": {
                "required": [
                    "regionName"
                ],
                "type": "object",
                "properties": {
                    "regionName": {
                        "type": "string",
                        "description": "The name of the NetMaster region",
                        "example": "NMDE8456"
                    }
                },
                "description": "A NetMaster REST API Server Regions Data Row Object"
            },
            "ResponseMessage": {
                "title": "Message",
                "required": [
                    "messageContent",
                    "messageNumber",
                    "messageType"
                ],
                "type": "object",
                "properties": {
                    "messageAction": {
                        "type": "string",
                        "description": "Recommendation of the actions to take in response to the message."
                    },
                    "messageComponent": {
                        "type": "string",
                        "description": "(For support and developers) Identifies the component that generated the message. Can be a fully qualified Java package or class name.",
                        "example": "org.acme.toolkit.hammers.Ballpeen"
                    },
                    "messageContent": {
                        "type": "string",
                        "description": "Readable message in US English. It should be a proper human-readable sentence."
                    },
                    "messageInstanceId": {
                        "type": "string",
                        "description": "Unique ID of the message instance. Useful for locating the message in product logs. The same ID should be printed in the product log output.",
                        "example": "123e4567-e89b-12d3-a456-426655440000"
                    },
                    "messageKey": {
                        "type": "string",
                        "description": "Unique message key describing the reason for the message in a machine-readable format enabling localization. It should be a dot-delimited string tld.provider.service[.sub-service].detail.",
                        "example": "org.acme.api.notAuthenticated"
                    },
                    "messageNumber": {
                        "type": "string",
                        "description": "A message number (not including the message level one-letter code) that uniquely identifies the message and can be typically looked up in product documentation.",
                        "example": "PFI0031"
                    },
                    "messageParameters": {
                        "type": "array",
                        "description": "Message parameters. Used for formatting of localized messages in conjunction with the 'messageKey' field.",
                        "items": {
                            "type": "object",
                            "description": "Message parameter. Can be of any type.",
                            "example": null
                        }
                    },
                    "messageReason": {
                        "type": "string",
                        "description": "Supplements the 'messageContent' field, supplying more information about why the message is present."
                    },
                    "messageSource": {
                        "type": "string",
                        "description": "(For support and developers) Identifies the source service that generated the message.",
                        "example": "production.org.acme:1234:weathersvc"
                    },
                    "messageType": {
                        "type": "string",
                        "description": "Severity of the problem described by a message.",
                        "example": "WARNING",
                        "enum": [
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "DEBUG",
                            "TRACE"
                        ]
                    }
                },
                "description": "User-facing API message and related metadata."
            },
            "SSHProtocol": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Protocol version 1\n       - Protocol version 2\n       - no mapped value\n      "
                    }
                },
                "description": "The SSH Protocol for the data connection"
            },
            "SSHSubcomponent": {
                "required": [
                    "mappedString",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "example": "sftp server"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "description": "The SSH subcomponent"
            },
            "SaveTraceBody": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 32,
                        "minLength": 1,
                        "type": "string",
                        "description": "The name to save the trace as."
                    }
                },
                "description": "And object that is used to save a trace instance"
            },
            "SavedTraceDetails": {
                "required": [
                    "definitionName",
                    "id",
                    "name",
                    "packetCount",
                    "stack",
                    "timestamps",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "definitionName": {
                        "type": "string",
                        "description": "The name of the definition from which the trace was saved",
                        "example": "ATRACE"
                    },
                    "id": {
                        "type": "string",
                        "description": "A NetMaster-generated identifier for the saved trace",
                        "example": "ATRACE-1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the saved trace",
                        "example": "A saved trace"
                    },
                    "packetCount": {
                        "$ref": "#/components/schemas/SavedTraceSummaryPacketCount"
                    },
                    "stack": {
                        "type": "string",
                        "description": "The name of the stack from which the trace was captured",
                        "example": "TCPIP"
                    },
                    "timestamps": {
                        "$ref": "#/components/schemas/SavedTraceSummaryTimeStamps"
                    },
                    "traceRecord": {
                        "$ref": "#/components/schemas/TraceSummary"
                    },
                    "user": {
                        "type": "string",
                        "description": "The user that saved the trace"
                    }
                },
                "description": "An interface that describes detail data for a NetMaster saved trace."
            },
            "SavedTraceSummary": {
                "required": [
                    "definitionName",
                    "id",
                    "name",
                    "packetCount",
                    "stack",
                    "timestamps",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "definitionName": {
                        "type": "string",
                        "description": "The name of the definition from which the trace was saved",
                        "example": "ATRACE"
                    },
                    "id": {
                        "type": "string",
                        "description": "A NetMaster-generated identifier for the saved trace",
                        "example": "ATRACE-1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the saved trace",
                        "example": "A saved trace"
                    },
                    "packetCount": {
                        "$ref": "#/components/schemas/SavedTraceSummaryPacketCount"
                    },
                    "stack": {
                        "type": "string",
                        "description": "The name of the stack from which the trace was captured",
                        "example": "TCPIP"
                    },
                    "timestamps": {
                        "$ref": "#/components/schemas/SavedTraceSummaryTimeStamps"
                    },
                    "user": {
                        "type": "string",
                        "description": "The user that saved the trace"
                    }
                },
                "description": "An interface that describes summary data for a NetMaster saved trace."
            },
            "SavedTraceSummaryPacketCount": {
                "required": [
                    "saved",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "saved": {
                        "type": "integer",
                        "description": "The total number of packets saved",
                        "format": "int64",
                        "example": 250
                    },
                    "total": {
                        "type": "integer",
                        "description": "The total number of packets traced",
                        "format": "int64",
                        "example": 178592
                    }
                },
                "description": "Saved trace packet count information"
            },
            "SavedTraceSummaryTimeStamps": {
                "required": [
                    "first",
                    "last",
                    "saved"
                ],
                "type": "object",
                "properties": {
                    "first": {
                        "type": "integer",
                        "description": "The time in milliseconds when the first packet in the trace was captured, displayed in Universal Time Coordinated (UTC) time",
                        "format": "int64",
                        "example": 1631817818000
                    },
                    "last": {
                        "type": "integer",
                        "description": "The time in milliseconds when the last packet in the trace was captured, displayed in UTC time",
                        "format": "int64",
                        "example": 1631817819000
                    },
                    "saved": {
                        "type": "integer",
                        "description": "The time in milliseconds when the trace was saved, displayed in UTC time",
                        "format": "int64",
                        "example": 1631817820000
                    }
                },
                "description": "Saved trace timestamp related information"
            },
            "SmartTraceDefinitionRow": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "The number of existing traces for this SmartTrace definition.",
                        "format": "int32",
                        "example": 3
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the SmartTrace definition.",
                        "example": "Test Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "lastUpdate": {
                        "$ref": "#/components/schemas/LastUpdate"
                    },
                    "lpar": {
                        "type": "string",
                        "description": "The logical partition where the trace was collected.",
                        "example": "CA11"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the SmartTrace definition.",
                        "example": "AJMULTTEST"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the SmartTrace definition.",
                        "example": "RUNNING",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the SmartTrace definition.",
                        "example": "TCP",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "A SmartTrace Definition Row Object"
            },
            "StackDataRow": {
                "required": [
                    "stackName"
                ],
                "type": "object",
                "properties": {
                    "stackName": {
                        "type": "string",
                        "description": "Stack name"
                    }
                },
                "description": "An object containing information about a network stack monitored by NetMaster"
            },
            "StackInterfaceDataRow": {
                "required": [
                    "interfaceName",
                    "stackName"
                ],
                "type": "object",
                "properties": {
                    "interfaceName": {
                        "type": "string",
                        "description": "Interface name"
                    },
                    "stackName": {
                        "type": "string",
                        "description": "Stack name"
                    }
                },
                "description": "An object containing information about a network interface monitored by NetMaster"
            },
            "TLSProtocol": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - UNKNOWN\n       - SSL Version 2\n       - SSL Version 3\n       - TLS Version 1.0\n       - TLS Version 1.1\n       - TLS Version 1.2\n       - TLS Version 1.3\n       - no mapped value\n      "
                    }
                },
                "description": "The TLS Protocol for the data connection"
            },
            "TcpConnCounterCreateData": {
                "required": [
                    "description",
                    "visibleDays"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "Names of applications to include or exclude, specified as an optional operator and colon separator, followed by a list of application names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of application names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of application names to exclude.\n\nThe default operator is `in:`.\n\nAn application name is a 1 to 52 character value. Each character must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.\"",
                        "example": "in:FTP|TELNET"
                    },
                    "cipherCode": {
                        "type": "string",
                        "description": "Cipher codes to include or exclude, specified as an optional operator and colon separator, followed by a list of cipher codes.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of cipher codes to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of cipher codes to exclude.\n\nThe default operator is `in:`.\n\nA cipher code is a 1 to 6 hexadecimal digit value.",
                        "example": "in:C00A|C00B"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Connection types to include or exclude, specified as an optional operator and colon separator, followed by a list of connection types.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of connection types to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of connection types to exclude.\n\nThe default operator is `in:`.",
                        "example": "in:sslv2|sslv3",
                        "enum": [
                            "secure",
                            "unsecure",
                            "ipsec",
                            "ssh",
                            "tls",
                            "sslv2",
                            "sslv3",
                            "tlsv1",
                            "tlsv11",
                            "tlsv12",
                            "tlsv13"
                        ]
                    },
                    "description": {
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string",
                        "description": "A description for the counter consisting of no more than 64 characters",
                        "example": "Unsecured connections"
                    },
                    "localHostAddr": {
                        "type": "string",
                        "description": "IP addresses of local hosts to include or exclude, specified as an optional operator and colon separator, followed by a list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address. You can specify a mask of an IP address by using an asterisk (*) in any part of the address.",
                        "example": "in:192.168.3.*|192.168.*.1|192.168.4.7"
                    },
                    "localPortNum": {
                        "type": "string",
                        "description": "Numbers of local ports to include or exclude, specified as an optional operator and colon separator, followed by a list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`\n\nThe `in:` operator and colon separator must be followed by a list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than the specified port number are included in the request response.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers greater than or equal to the specified port number are included in the request response.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than the specified port number are included in the request response.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only connections with local port numbers less than or equal to the specified port number are included in the request response.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.",
                        "example": "12345"
                    },
                    "remoteHostAddr": {
                        "type": "string",
                        "description": "IP addresses of remote hosts to include or exclude, specified as an optional operator and colon separator, followed by a list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address. You can specify a mask of an IP address by using an asterisk (*) in any part of the address.",
                        "example": "in:192.168.3.*|192.168.*.1|192.168.4.7"
                    },
                    "remoteNetAddr": {
                        "type": "string",
                        "description": "IP addresses of remote networks to include or exclude, specified as an optional operator and colon separator, followed by a list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nAn IP address is an IPv4- or IPv6-address. You can specify a mask of an IP address by using an asterisk (*) in any part of the address.",
                        "example": "in:192.168.3.*|192.168.*.1|192.168.4.7"
                    },
                    "remotePortNum": {
                        "type": "string",
                        "description": "Numbers of remote ports to include or exclude, specified as an optional operator and colon separator, followed by a list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`\n\nThe `in:` operator and colon separator must be followed by a list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers greater than the specified port number are included in the request response.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers greater than or equal to the specified port number are included in the request response.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers less than the specified port number are included in the request response.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only connections with remote port numbers less than or equal to the specified port number are included in the request response.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.",
                        "example": "12345"
                    },
                    "stackName": {
                        "type": "string",
                        "description": "Names of TCP/IP stacks to include or exclude, specified as an optional operator and colon separator, followed by a list of TCP/IP stack names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of TCP/IP stack names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of TCP/IP stack names to exclude.\n\nThe default operator is `in:`.\n\nA TCP/IP stack name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.",
                        "example": "in:TCPIP|TCPIPEE"
                    },
                    "taskName": {
                        "type": "string",
                        "description": "Names of tasks to include or exclude, specified as an optional operator and colon separator, followed by a list of task names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a list of task names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a list of task names to exclude.\n\nThe default operator is `in:`.\n\nA task name is a 1 to 8 character value. Each character must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.",
                        "example": "in:FTPD32|TCPTN32"
                    },
                    "visibleDays": {
                        "maximum": 366,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of days of metrics to display.\n\nThe number of visible days is a number between 1 and 366, inclusive.",
                        "format": "int32",
                        "example": 7,
                        "default": 1
                    }
                },
                "description": "An object that is used to create a TCP connection counter"
            },
            "TcpConnCounterDataRow": {
                "required": [
                    "default",
                    "protected",
                    "visibleCounters"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "The names of the applications to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of application names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of application names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of application names to exclude.\n\nThe default operator is `in:`.\n\nAn application name is a 1 to 52 character value. The name may include wildcard characters.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.",
                        "example": "in:TELNET"
                    },
                    "cipherCode": {
                        "type": "string",
                        "description": "The codes of the ciphers to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of cipher codes.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of cipher  codes to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of cipher codes to exclude.\n\nThe default operator is `in:`.\n\nA cipher code is a 1 to 6 hexadecimal digit character value.",
                        "example": "in:C00A|C00B"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "The types of the connections to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of connection types.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of connection  types to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of connection types to exclude.\n\nThe default operator is `in:`.",
                        "example": "in:tlsv12|tlsv13",
                        "enum": [
                            "secure",
                            "unsecure",
                            "ipsec",
                            "ssh",
                            "tls",
                            "sslv2",
                            "sslv3",
                            "tlsv1",
                            "tlsv11",
                            "tlsv12",
                            "tlsv13"
                        ]
                    },
                    "counters": {
                        "type": "array",
                        "description": "An array of counters, where each array element represents the number of TCP connections on a single day with characteristics that match the TCP connection counter filter criteria.\n\nThe array element with index 0 is the counter for today, the array element with index 1 is the counter for yesterday, etc. The array has a maximum of 366 elements.",
                        "example": [
                            123,
                            1023,
                            2782,
                            875
                        ],
                        "items": {
                            "type": "integer",
                            "description": "An array of counters, where each array element represents the number of TCP connections on a single day with characteristics that match the TCP connection counter filter criteria.\n\nThe array element with index 0 is the counter for today, the array element with index 1 is the counter for yesterday, etc. The array has a maximum of 366 elements.",
                            "format": "int32"
                        }
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Indicates whether the TCP connection counter is a default counter created by the system",
                        "example": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the TCP connection counter",
                        "example": "Unsecure connections"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier assigned to the TCP connection counter",
                        "example": "uniqueIdentifier"
                    },
                    "localHostAddr": {
                        "type": "string",
                        "description": "The IP addresses of the local hosts to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nThe IP addresses can be specified using IPv4 dotted decimal notation (e.g., 192.168.1.1), IPv4 network notation (e.g.,\u00a0192.168.0.0/16,\u00a0192.168.0.0/255.255.0.0), IPv4 generic notation (e.g., 192.*), IPv6 address notation (e.g., FE80::11FF:FE79:5EA1), IPv6 network notation (e.g., 2001:DB8::/32), or IPv6 generic notation (e.g., 2001:*).",
                        "example": "in:192.168.2.1"
                    },
                    "localPortNum": {
                        "type": "string",
                        "description": "The numbers of the local ports to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only TCP connections with local port numbers greater than the specified port number are included.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only TCP connections with local port numbers greater than or equal to the specified port number are included.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only TCP connections with local port numbers less than the specified port number are included.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only TCP connections with local port numbers less than or equal to the specified port number are included.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.\n\nA pipe-separated list of port numbers can specify both absolute port numbers (e.g., 23) and ranges of port numbers (e.g., [20,21]).",
                        "example": "in:23|1023"
                    },
                    "protected": {
                        "type": "boolean",
                        "description": "Indicates whether the TCP connection counter is protected and therefore cannot be updated or deleted",
                        "example": true
                    },
                    "remoteHostAddr": {
                        "type": "string",
                        "description": "The IP addresses of the remote hosts to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nThe IP addresses can be specified using IPv4 dotted decimal notation (e.g., 192.168.3.1), IPv4 network notation (e.g.,\u00a0192.168.0.0/16,\u00a0192.168.0.0/255.255.0.0), IPv4 generic notation (e.g., 192.*), IPv6 address notation (e.g., FE80::11FF:FE79:5EA1), IPv6 network notation (e.g., 2001:DB8::/32), or IPv6 generic notation (e.g., 2001:*).",
                        "example": "in:192.168.3.1"
                    },
                    "remoteNetAddr": {
                        "type": "string",
                        "description": "The IP addresses of the remote networks to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of IP addresses.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of IP addresses to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of IP addresses to exclude.\n\nThe default operator is `in:`.\n\nThe IP addresses can be specified using IPv4 dotted decimal notation (e.g., 192.168.0.0), IPv4 network notation (e.g.,\u00a0192.168.0.0/16,\u00a0192.168.0.0/255.255.0.0), IPv4 generic notation (e.g., 192.*), IPv6 address notation (e.g., FE80::11FF:FE79:5EA1), IPv6 network notation (e.g., 2001:DB8::/32), or IPv6 generic notation (e.g., 2001:*).",
                        "example": "in:192.168.0.0"
                    },
                    "remotePortNum": {
                        "type": "string",
                        "description": "The numbers of the remote ports to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of port numbers.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, `neq:`, `gt:`, `gte:`, `lt:`, or `lte:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of port numbers to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of port numbers to exclude.\n\nThe `gt:` operator and colon separator must be followed by a single port number. Only TCP connections with remote port numbers greater than the specified port number are included.\n\nThe `gte:` operator and colon separator must be followed by a single port number. Only TCP connections with remote port numbers greater than or equal to the specified port number are included.\n\nThe `lt:` operator and colon separator must be followed by a single port number. Only TCP connections with remote port numbers less than the specified port number are included.\n\nThe `lte:` operator and colon separator must be followed by a single port number. Only TCP connections with remote port numbers less than or equal to the specified port number are included.\n\nThe default operator is `in:`.\n\nA port number is a numeric value in the range of 1 to 65535, inclusive.\n\nA pipe-separated list of port numbers can specify both absolute port numbers (e.g., 23) and ranges of port numbers (e.g., [20,21]).",
                        "example": "in:58143"
                    },
                    "stackName": {
                        "type": "string",
                        "description": "The names of the TCP/IP stacks to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of TCP/IP stack names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of TCP/IP stack names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of TCP/IP stack names to exclude.\n\nThe default operator is `in:`.\n\nA TCP/IP stack name is a 1 to 8 character value. The first character must be alphabetic, national, or wildcard. The remaining characters must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.",
                        "example": "in:TCPIP"
                    },
                    "taskName": {
                        "type": "string",
                        "description": "The names of the tasks to include in or exclude from the TCP connection counter, specified as an optional operator and colon separator, followed by a pipe-separated list of task names.\n\nThe operator and colon separator specified (if any) must be one of the following: `in:`, `nin:`, or `neq:`.\n\nThe `in:` operator and colon separator must be followed by a pipe-separated list of task  names to include.\n\nThe `nin:` and `neq:` operators and colon separators must be followed by a pipe-separated list of task names to exclude.\n\nThe default operator is `in:`.\n\nA task name is a 1 to 8 character value. Each character must be alphabetic, national, numeric, or wildcard.\n\nThe national characters are `@`, `#`, and `$`.\n\nThe `?` character is a wildcard character that matches any one character.\n\nThe `*` character is a wildcard character that matches zero or more characters.",
                        "example": "in:TCPTEL"
                    },
                    "visibleCounters": {
                        "type": "integer",
                        "description": "The number of counter array elements to display in any UI that shows the TCP connection counter data.\n\nThe property is a numeric value in the range of 1 to 366, inclusive.",
                        "format": "int32",
                        "example": 7
                    }
                },
                "description": "A TCP Connection Counter Data Row Object"
            },
            "TcpConnCounterUpdateData": {
                "required": [
                    "visibleDays"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string",
                        "description": "A description for the counter consisting of no more than 64 characters",
                        "example": "Unsecured connections"
                    },
                    "visibleDays": {
                        "maximum": 366,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of days of metrics to display.\n\nThe number of visible days is a number between 1 and 366, inclusive.",
                        "format": "int32",
                        "example": 7,
                        "default": 1
                    }
                },
                "description": "An object that is used to update a TCP connection counter"
            },
            "TcpConnDetailDataRow": {
                "required": [
                    "activeTime",
                    "activeTrace",
                    "applType",
                    "avgRtt",
                    "distEligible",
                    "distTarget",
                    "endTime",
                    "frag",
                    "idleTime",
                    "localPortNum",
                    "maxRtt",
                    "minRtt",
                    "numRtt",
                    "remotePortNum",
                    "reset",
                    "smcBytesReceived",
                    "smcBytesSent",
                    "smcd",
                    "smcr",
                    "startTime",
                    "tcpBytesReceived",
                    "tcpBytesSent",
                    "tcpMode",
                    "tcpState",
                    "turnCount",
                    "usingIpsec",
                    "usingSsh",
                    "usingTls",
                    "warmStart"
                ],
                "type": "object",
                "properties": {
                    "activeTime": {
                        "type": "integer",
                        "description": "The elapsed time (in milliseconds) that the connection has been active",
                        "format": "int32",
                        "example": 1000
                    },
                    "activeTrace": {
                        "type": "boolean",
                        "description": "Indicates whether a NetMaster SmartTrace is active for the connection",
                        "example": true
                    },
                    "applData": {
                        "type": "string",
                        "description": "Application specific information included with TCP sockets owned by the application",
                        "example": "EZAFTP0S C USER1     PTS305"
                    },
                    "applName": {
                        "type": "string",
                        "description": "The application name assigned to the connection",
                        "example": "CICS"
                    },
                    "applType": {
                        "type": "string",
                        "description": "The application type for the connection",
                        "example": "2",
                        "enum": [
                            "0 (UNKNOWN)",
                            "1 (TELNET)",
                            "2 (FTP)",
                            "3 (CICS)"
                        ]
                    },
                    "atTLSData": {
                        "$ref": "#/components/schemas/ATTLSData"
                    },
                    "avgRtt": {
                        "type": "integer",
                        "description": "The average round trip time (in milliseconds) for the connection",
                        "format": "int32",
                        "example": 1500
                    },
                    "cicsApplData": {
                        "$ref": "#/components/schemas/CICSApplData"
                    },
                    "distEligible": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is eligible for sysplex distribution",
                        "example": true
                    },
                    "distHostAddr": {
                        "type": "string",
                        "description": "The IP address of the sysplex distributor host (if the connection is a sysplex distributor target)",
                        "example": "192.168.2.1"
                    },
                    "distTarget": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is a sysplex distributor target",
                        "example": true
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "The Unix timestamp (in milliseconds) of the connection end date/time",
                        "format": "int64",
                        "example": 1570732828142
                    },
                    "frag": {
                        "type": "boolean",
                        "description": "Indicates whether packet fragmentation on the connection occurred",
                        "example": true
                    },
                    "ftpApplData": {
                        "$ref": "#/components/schemas/FTPApplData"
                    },
                    "idleTime": {
                        "type": "integer",
                        "description": "The elapsed time (in milliseconds) that the connection has been idle",
                        "format": "int32",
                        "example": 1000
                    },
                    "jobName": {
                        "type": "string",
                        "description": "The JOB name of the local application",
                        "example": "CICS"
                    },
                    "localHostAddr": {
                        "type": "string",
                        "description": "The IP address of the local host",
                        "example": "192.168.2.1"
                    },
                    "localPeerDetailData": {
                        "$ref": "#/components/schemas/PaPeerDetailData"
                    },
                    "localPortNum": {
                        "type": "integer",
                        "description": "The number of the local port",
                        "format": "int32",
                        "example": 23
                    },
                    "maxRtt": {
                        "type": "integer",
                        "description": "The maximum round trip time (in milliseconds) for the connection",
                        "format": "int32",
                        "example": 5000
                    },
                    "minRtt": {
                        "type": "integer",
                        "description": "The minimum round trip time (in milliseconds) for the connection",
                        "format": "int32",
                        "example": 500
                    },
                    "numRtt": {
                        "type": "integer",
                        "description": "The number of round trip time measurements used to calculate the average for the connection",
                        "format": "int32",
                        "example": 123
                    },
                    "paConnId": {
                        "type": "string",
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "example": "0102030405060708"
                    },
                    "paTlsData": {
                        "$ref": "#/components/schemas/PaTlsData"
                    },
                    "pluName": {
                        "type": "string",
                        "description": "The LU name of the host VTAM application",
                        "example": "CICS"
                    },
                    "remoteHostAddr": {
                        "type": "string",
                        "description": "The IP address of the remote host",
                        "example": "192.168.3.1"
                    },
                    "remoteNetAddr": {
                        "type": "string",
                        "description": "The IP address of the remote network",
                        "example": "192.168.0.0"
                    },
                    "remotePeerDetailData": {
                        "$ref": "#/components/schemas/PaPeerDetailData"
                    },
                    "remotePortNum": {
                        "type": "integer",
                        "description": "The number of the remote port",
                        "format": "int32",
                        "example": 21645
                    },
                    "reset": {
                        "type": "boolean",
                        "description": "Indicates whether the connection has been reset",
                        "example": true
                    },
                    "segOffloadData": {
                        "$ref": "#/components/schemas/PaSegOffloadData"
                    },
                    "sluName": {
                        "type": "string",
                        "description": "The LU name assigned to the TN3270 session",
                        "example": "A32VT001"
                    },
                    "smcBytesReceived": {
                        "type": "integer",
                        "description": "The number of Shared Memory Communications (SMC) data bytes received through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "smcBytesSent": {
                        "type": "integer",
                        "description": "The number of Shared Memory Communications (SMC) data bytes sent through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "smcd": {
                        "type": "boolean",
                        "description": "Indicates whether the connection uses Shared Memory Communications - Direct Memory Access (SMC-D)",
                        "example": true
                    },
                    "smcr": {
                        "type": "boolean",
                        "description": "Indicates whether the connection uses Shared Memory Communications over RDMA (SMC-R)",
                        "example": true
                    },
                    "stackConnId": {
                        "type": "string",
                        "description": "The TCP/IP stack connection ID",
                        "example": "00000026"
                    },
                    "stackName": {
                        "type": "string",
                        "description": "The name of the TCP/IP stack",
                        "example": "TCPIP"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "The Unix timestamp (in milliseconds) of the connection start date/time",
                        "format": "int64",
                        "example": 1570732828142
                    },
                    "statsData": {
                        "$ref": "#/components/schemas/PaStatsData"
                    },
                    "tcpBytesReceived": {
                        "type": "integer",
                        "description": "The number of TCP data bytes received through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "tcpBytesSent": {
                        "type": "integer",
                        "description": "The number of TCP data bytes sent through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "tcpMode": {
                        "type": "string",
                        "description": "The TCP mode of the connection",
                        "example": "1",
                        "enum": [
                            "0 (UNKNOWN)",
                            "1 (SERVER)",
                            "2 (CLIENT)",
                            "3 (LSFAIL)",
                            "4 (RSFAIL)"
                        ]
                    },
                    "tcpState": {
                        "type": "string",
                        "description": "The TCP state of the connection",
                        "example": "4",
                        "enum": [
                            "0 (UNKNOWN)",
                            "1 (LISTEN)",
                            "2 (SYN_SENT)",
                            "3 (SYN_RCVD)",
                            "4 (ESTABLISHED)",
                            "5 (FIN_WAIT1)",
                            "6 (FIN_WAIT2)",
                            "7 (CLOSE_WAIT)",
                            "8 (CLOSING)",
                            "9 (LAST_ACK)",
                            "10 (TIME_WAIT)",
                            "11 (CLOSED)",
                            "12 (CONN_FAIL)"
                        ]
                    },
                    "telnetApplData": {
                        "$ref": "#/components/schemas/TelnetApplData"
                    },
                    "traceState": {
                        "type": "string",
                        "description": "The current state of the trace for the connection",
                        "example": "ENDED",
                        "enum": [
                            "value: ENDED state: Ended",
                            "value: RUNNING state: Running"
                        ]
                    },
                    "turnCount": {
                        "type": "integer",
                        "description": "The turn count for the connection",
                        "format": "int32",
                        "example": 123
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the Telnet or FTP user",
                        "example": "IBMUSER"
                    },
                    "usingIpsec": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is secured with IPSec",
                        "example": true
                    },
                    "usingSsh": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is secured with SSH",
                        "example": true
                    },
                    "usingTls": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is secured with SSL/TLS",
                        "example": true
                    },
                    "warmStart": {
                        "type": "boolean",
                        "description": "Indicates whether the connection details are affected by NetMaster Packet Analyzer warm start",
                        "example": true
                    },
                    "zertIPSecData": {
                        "$ref": "#/components/schemas/ZertIPSecData"
                    },
                    "zertSSHData": {
                        "$ref": "#/components/schemas/ZertSSHData"
                    },
                    "zertTLSData": {
                        "$ref": "#/components/schemas/ZertTLSData"
                    }
                },
                "description": "A TCP Connection Detail Data Row Object"
            },
            "TcpConnListDataRow": {
                "required": [
                    "bytesReceived",
                    "bytesSent",
                    "localPortNum",
                    "remotePortNum",
                    "secure",
                    "startTime",
                    "warmStart"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "The application name assigned to the connection",
                        "example": "TELNET"
                    },
                    "bytesReceived": {
                        "type": "integer",
                        "description": "The number of TCP data bytes received through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "bytesSent": {
                        "type": "integer",
                        "description": "The number of TCP data bytes sent through this connection",
                        "format": "int64",
                        "example": 123456789
                    },
                    "cipherCode": {
                        "type": "string",
                        "description": "The cipher code for a secure connection",
                        "example": "C00A"
                    },
                    "cipherName": {
                        "type": "string",
                        "description": "The cipher name for a secure connection",
                        "example": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
                    },
                    "localHostAddr": {
                        "type": "string",
                        "description": "The IP address of the local host",
                        "example": "192.168.2.1"
                    },
                    "localPortNum": {
                        "type": "integer",
                        "description": "The number of the local port",
                        "format": "int32",
                        "example": 23
                    },
                    "paConnId": {
                        "type": "string",
                        "description": "The NetMaster Packet Analyzer connection ID",
                        "example": "0102030405060708"
                    },
                    "remoteHostAddr": {
                        "type": "string",
                        "description": "The IP address of the remote host",
                        "example": "192.168.3.1"
                    },
                    "remoteNetAddr": {
                        "type": "string",
                        "description": "The IP address of the remote network",
                        "example": "192.168.0.0"
                    },
                    "remotePortNum": {
                        "type": "integer",
                        "description": "The number of the remote port",
                        "format": "int32",
                        "example": 58413
                    },
                    "secVersion": {
                        "type": "string",
                        "description": "The security version for a secure connection",
                        "example": "TLSv1.2"
                    },
                    "secure": {
                        "type": "boolean",
                        "description": "Indicates whether the connection is secure",
                        "example": true
                    },
                    "stackName": {
                        "type": "string",
                        "description": "The name of the TCP/IP stack",
                        "example": "TCPIP"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "The Unix timestamp (in milliseconds) of the connection start date/time",
                        "format": "int64",
                        "example": 1570732828142
                    },
                    "taskName": {
                        "type": "string",
                        "description": "The task name of the local application",
                        "example": "TCPTEL"
                    },
                    "traceState": {
                        "type": "string",
                        "description": "The current state of the trace for the connection",
                        "example": "ENDED",
                        "enum": [
                            "value: ENDED state: Ended",
                            "value: RUNNING state: Running"
                        ]
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the Telnet or FTP user",
                        "example": "ABAB12"
                    },
                    "warmStart": {
                        "type": "boolean",
                        "description": "Indicates whether the connection details are affected by NetMaster Packet Analyzer warm start",
                        "example": true
                    }
                },
                "description": "A TCP Connection List Data Row Object"
            },
            "TcpConnSecuritySummaryDataRow": {
                "required": [
                    "currConnCount",
                    "currIpsecConnCount",
                    "currSecuredConnCount",
                    "currSshConnCount",
                    "currSslv2ConnCount",
                    "currSslv3ConnCount",
                    "currTlsConnCount",
                    "currTlsv11ConnCount",
                    "currTlsv12ConnCount",
                    "currTlsv13ConnCount",
                    "currTlsv1ConnCount",
                    "currUnsecuredConnCount",
                    "localPortNum",
                    "totalConnections",
                    "totalIpsec",
                    "totalReset",
                    "totalSecureConnections",
                    "totalSsh",
                    "totalSslv2",
                    "totalSslv3",
                    "totalTlsConnCount",
                    "totalTlsv1",
                    "totalTlsv11",
                    "totalTlsv12",
                    "totalTlsv13",
                    "totalUnsecureConnections"
                ],
                "type": "object",
                "properties": {
                    "applName": {
                        "type": "string",
                        "description": "The name of the application (null if entity != application)",
                        "example": "TELNET"
                    },
                    "currConnCount": {
                        "type": "integer",
                        "description": "The current number of connections",
                        "format": "int32",
                        "example": 0
                    },
                    "currIpsecConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with IPSec",
                        "format": "int32",
                        "example": 0
                    },
                    "currSecuredConnCount": {
                        "type": "integer",
                        "description": "The current number of secured connections",
                        "format": "int32",
                        "example": 0
                    },
                    "currSshConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with SSH",
                        "format": "int32",
                        "example": 0
                    },
                    "currSslv2ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with SSLv2",
                        "format": "int32",
                        "example": 0
                    },
                    "currSslv3ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with SSLv3",
                        "format": "int32",
                        "example": 0
                    },
                    "currTlsConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with TLS",
                        "format": "int32",
                        "example": 0
                    },
                    "currTlsv11ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with TLSv1.1",
                        "format": "int32",
                        "example": 0
                    },
                    "currTlsv12ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with TLSv1.2",
                        "format": "int32",
                        "example": 0
                    },
                    "currTlsv13ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with TLSv1.3",
                        "format": "int32",
                        "example": 0
                    },
                    "currTlsv1ConnCount": {
                        "type": "integer",
                        "description": "The current number of connections secured with TLSv1",
                        "format": "int32",
                        "example": 0
                    },
                    "currUnsecuredConnCount": {
                        "type": "integer",
                        "description": "The current number of unsecured connections",
                        "format": "int32",
                        "example": 0
                    },
                    "localHostAddr": {
                        "type": "string",
                        "description": "The IP address of the local host (null if entity != localhost)",
                        "example": "192.168.2.1"
                    },
                    "localPortNum": {
                        "type": "integer",
                        "description": "The number of the local port (zero if entity != localport)",
                        "format": "int32",
                        "example": 23
                    },
                    "remoteHostAddr": {
                        "type": "string",
                        "description": "The IP address of the remote host (null if entity != remotehost)",
                        "example": "192.168.3.1"
                    },
                    "remoteNetAddr": {
                        "type": "string",
                        "description": "The IP address of the remote network (null if entity != remotenet)",
                        "example": "192.168.3.0/24"
                    },
                    "stackName": {
                        "type": "string",
                        "description": "The name of the TCP/IP stack",
                        "example": "TCPIP"
                    },
                    "taskName": {
                        "type": "string",
                        "description": "The name of the task (null if entity != task or localport)",
                        "example": "TCPTEL"
                    },
                    "totalConnections": {
                        "type": "integer",
                        "description": "The total number of connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalIpsec": {
                        "type": "integer",
                        "description": "The total number of IPSec connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalReset": {
                        "type": "integer",
                        "description": "The total number of reset connections due to zERT policy-based enforcement",
                        "format": "int32",
                        "example": 0
                    },
                    "totalSecureConnections": {
                        "type": "integer",
                        "description": "The total number of secure connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalSsh": {
                        "type": "integer",
                        "description": "The total number of SSH connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalSslv2": {
                        "type": "integer",
                        "description": "The total number of SSLv2 connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalSslv3": {
                        "type": "integer",
                        "description": "The total number of SSLv3 connections",
                        "format": "int32",
                        "example": 0
                    },
                    "totalTlsConnCount": {
                        "type": "integer",
                        "description": "The total number of connections secured with TLS",
                        "format": "int32",
                        "example": 0
                    },
                    "totalTlsv1": {
                        "type": "integer",
                        "description": "The total number of connections secured with TLSv1.0",
                        "format": "int32",
                        "example": 0
                    },
                    "totalTlsv11": {
                        "type": "integer",
                        "description": "The total number of connections secured with TLSv1.1",
                        "format": "int32",
                        "example": 0
                    },
                    "totalTlsv12": {
                        "type": "integer",
                        "description": "The total number of connections secured with TLSv1.2",
                        "format": "int32",
                        "example": 0
                    },
                    "totalTlsv13": {
                        "type": "integer",
                        "description": "The total number of connections secured with TLSv1.3",
                        "format": "int32",
                        "example": 0
                    },
                    "totalUnsecureConnections": {
                        "type": "integer",
                        "description": "The total number of unsecure connections",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "A TCP Connection Security Summary Data Row Object"
            },
            "TcpTraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "flagExpression": {
                        "type": "string",
                        "description": "One or more of the six TCP flag bits (URG, ACK, PSH, RST, SYN, FIN). Commas denote an 'OR'.",
                        "example": "RST"
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "Specifies whether to test for inbound or outbound packets",
                        "example": "IN",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    }
                },
                "description": "TCP Trace advanced criteria"
            },
            "TcpTraceBaseCriteria": {
                "type": "object",
                "properties": {
                    "interfaceName": {
                        "type": "string",
                        "description": "The logical name for the physical link or adapter that the TCP/IP stack uses to route an IP packet",
                        "example": "LOOPBACK"
                    },
                    "localHost": {
                        "type": "string",
                        "description": "The IP host address of the local TCP/IP stack",
                        "example": "192.*"
                    },
                    "localPort": {
                        "type": "string",
                        "description": "Local ports to match packets with",
                        "example": "500"
                    },
                    "remoteHost": {
                        "type": "string",
                        "description": "The IP host address of the remote TCP/IP stack",
                        "example": "2001:DB8::/32"
                    },
                    "remotePort": {
                        "type": "string",
                        "description": "Remote ports to match packets with",
                        "example": "1001"
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack to limit the trace to",
                        "example": "TCPIP1"
                    }
                },
                "description": "The base criteria of a TCP trace"
            },
            "TcpTraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/TcpTraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for a TCP trace definition"
            },
            "TcpTraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/TcpTraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/TcpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/TcpTraceStopCriteria"
                    }
                },
                "description": "Packet trace filter criteria"
            },
            "TcpTraceStopCriteria": {
                "type": "object",
                "properties": {
                    "dataLength": {
                        "type": "string",
                        "description": "The total length in bytes of the data after the TCP Header",
                        "example": "neq:255"
                    },
                    "flagExpression": {
                        "type": "string",
                        "description": "One or more of the six TCP flag bits (URG, ACK, PSH, RST, SYN, FIN). Commas denote an 'OR'.",
                        "example": "RST"
                    },
                    "packetDir": {
                        "type": "string",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    },
                    "windowSize": {
                        "type": "string",
                        "description": "The number of bytes that a receiving host can accept",
                        "example": "gt:64344"
                    }
                },
                "description": "Criteria to search for to stop the trace"
            },
            "TelnetApplData": {
                "type": "object",
                "properties": {
                    "cipherInfo": {
                        "$ref": "#/components/schemas/Cipher"
                    },
                    "clientType": {
                        "type": "string",
                        "description": "The Telnet client type, either terminal or printer",
                        "example": "Terminal"
                    },
                    "connectionMode": {
                        "type": "string",
                        "description": "The Telnet connection mode",
                        "example": "TN3270"
                    },
                    "luName": {
                        "type": "string",
                        "description": "The VTAM LU name",
                        "example": "A11HG505"
                    },
                    "securityCipher": {
                        "type": "string",
                        "description": "The security cipher in use when the security method is TTLSport managed by AT-TLS",
                        "example": "008B"
                    },
                    "securityLevel": {
                        "type": "string",
                        "description": "The security level for the data connection",
                        "example": "TLSv1.2"
                    },
                    "securityMethod": {
                        "type": "string",
                        "description": "The security method for the Telnet data connection",
                        "example": "Basic"
                    },
                    "targetApplication": {
                        "type": "string",
                        "description": "Target application name",
                        "example": "H11NBE76"
                    }
                },
                "description": "Application data for Telnet connections"
            },
            "TokenInfo": {
                "type": "object",
                "properties": {
                    "creation": {
                        "type": "string",
                        "description": "Time when the token was generated",
                        "format": "date-time"
                    },
                    "expiration": {
                        "type": "string",
                        "description": "Expiration time of the token",
                        "format": "date-time"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User who is logged in"
                    }
                }
            },
            "TraceSummary": {
                "required": [
                    "checks",
                    "id",
                    "info",
                    "key",
                    "timestamps"
                ],
                "type": "object",
                "properties": {
                    "checks": {
                        "$ref": "#/components/schemas/TraceSummaryChecks"
                    },
                    "id": {
                        "type": "string",
                        "description": "A NetMaster-generated identifier for the trace.",
                        "example": "ATRACE-1-16-TCPIPNFS-0-0"
                    },
                    "info": {
                        "$ref": "#/components/schemas/TraceSummaryInfo"
                    },
                    "ipInfo": {
                        "$ref": "#/components/schemas/TraceSummaryIpInfo"
                    },
                    "key": {
                        "$ref": "#/components/schemas/TraceSummaryKey"
                    },
                    "tcpServerLocation": {
                        "type": "string",
                        "description": "Check fields",
                        "example": "LOCAL",
                        "enum": [
                            "value: 0 serverLocation: UNKNOWN",
                            "value: 1 serverLocation: LOCAL",
                            "value: 2 serverLocation: REMOTE"
                        ]
                    },
                    "timestamps": {
                        "$ref": "#/components/schemas/TraceSummaryTimeStamps"
                    }
                },
                "description": "An interface that describes the data for a NetMaster trace."
            },
            "TraceSummaryChecks": {
                "type": "object",
                "properties": {
                    "didEncounterStopCondition": {
                        "type": "boolean",
                        "description": "Indicates whether the trace encountered a STOP condition",
                        "example": false
                    },
                    "hasSeenIPv6Packets": {
                        "type": "boolean",
                        "description": "Indicates whether at least one IPv6 packet was detected in the trace.",
                        "example": false
                    },
                    "isCreatorAtLimit": {
                        "type": "boolean",
                        "description": "Indicates whether the creator has reached its limit",
                        "example": true
                    },
                    "isTcpConversation": {
                        "type": "boolean",
                        "description": "Indicates whether the trace is part of a TCP conversation.",
                        "example": true
                    },
                    "isUdpConversation": {
                        "type": "boolean",
                        "description": "Indicates whether the trace is part of a UDP conversation.",
                        "example": false
                    }
                },
                "description": "Trace Summary Checks"
            },
            "TraceSummaryInfo": {
                "required": [
                    "packetCount",
                    "totalPacketCount"
                ],
                "type": "object",
                "properties": {
                    "packetCount": {
                        "type": "integer",
                        "description": "The number of packets currently stored in the trace buffer.",
                        "format": "int32",
                        "example": 250
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace.\nThere are four possible values:\n  - ENDED\n  - PENDDEL\n  - RUNNING\n  - SNAPSHOT",
                        "example": "RUNNING",
                        "enum": [
                            "value: 64 state: ACTIVE",
                            "value: 32 state: FROZEN",
                            "value: 33 state: SAVED",
                            "value: 16 state: SNAPSHOT",
                            "value: 1 state: PENDDEL"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the trace.\nStatus applies only to traces that are in a state of RUNNING.If a trace in not running, the status is NONE, There are four possible values:\n  - NONE\n  - INITIAL\n  - MAIN\n  - STOPPED",
                        "example": "MAIN",
                        "enum": [
                            "value: 64 status: INITIAL",
                            "value: 32 status: MAIN",
                            "value: 1 status: STOPPED",
                            "value: 0 status: NONE"
                        ]
                    },
                    "totalPacketCount": {
                        "type": "integer",
                        "description": "The total number of packets traced.",
                        "format": "int32",
                        "example": 178592
                    },
                    "type": {
                        "type": "string",
                        "description": "The type trace\nThere are four possible values:\n  - OASENTA\n  - STANDARD\n  - TCP_CONV\n  - TCP_CREATOR",
                        "example": "STANDARD",
                        "enum": [
                            "value: 64 type: STANDARD",
                            "value: 32 type: TCPCREATOR",
                            "value: 16 type: TCPCONV",
                            "value: 8 type: OSAENTA"
                        ]
                    }
                },
                "description": "Trace summary informational fields."
            },
            "TraceSummaryIpInfo": {
                "type": "object",
                "properties": {
                    "localAddress": {
                        "type": "string",
                        "description": "The local IP address.",
                        "example": "10.0.0.1"
                    },
                    "localPort": {
                        "type": "integer",
                        "description": "The local IP port.",
                        "format": "int32",
                        "example": 4200
                    },
                    "remoteAddress": {
                        "type": "string",
                        "description": "The remote IP address.",
                        "example": "148.85.123.12"
                    },
                    "remotePort": {
                        "type": "integer",
                        "description": "The remote IP port.",
                        "format": "int32",
                        "example": 43
                    }
                },
                "description": "IP related info."
            },
            "TraceSummaryKey": {
                "required": [
                    "definitionName",
                    "generation",
                    "stackName"
                ],
                "type": "object",
                "properties": {
                    "definitionName": {
                        "type": "string",
                        "description": "Name of the SmartTrace definition.",
                        "example": "TESTTRACE"
                    },
                    "generation": {
                        "type": "integer",
                        "description": "The generation number of the SmartTrace definition.",
                        "format": "int32",
                        "example": 341
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "The sequence of the SmartTrace definition.\nFor Example, if two trace instances are associated with the same trace definition, the first trace is 1 in the sequence, and the second trace is 2.",
                        "format": "int32",
                        "example": 3
                    },
                    "snapshotSequence": {
                        "type": "integer",
                        "description": "A Unique identifier for SmartTrace snapshots.\nBecause multiple snapshots can be captured for the same trace instance, the value is incremented for each snapshot captured",
                        "format": "int32",
                        "example": 0
                    },
                    "stackName": {
                        "type": "string",
                        "description": "The TCP/IP stack on which the SmartTrace is running.",
                        "example": "TCPIP1"
                    },
                    "tcpCreatorSequence": {
                        "type": "integer",
                        "description": "A unique identifier for TCP-creator type SmartTrace trace instances.\nThe value for separate trace instances is incremented.",
                        "format": "int32",
                        "example": 0
                    }
                },
                "description": "The fields representing a trace summary key."
            },
            "TraceSummaryTimeStamps": {
                "required": [
                    "start"
                ],
                "type": "object",
                "properties": {
                    "end": {
                        "type": "integer",
                        "description": "The end time of the trace in milliseconds, displayed in UTC time\nIf the trace is still running, this field is null.",
                        "format": "int64"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "The expiration time in milliseconds, displayed in UTC time\nWhen the trace expires, it is cleared from memory. Traces that are not saved before the expire time are, in effect,  permanently deleted.\nIf the trace is still running, this field displays null.",
                        "format": "int64"
                    },
                    "start": {
                        "type": "integer",
                        "description": "The start time of the strace in milliseconds, displayed in Universal Time Coordinate (UTC) time.",
                        "format": "int64",
                        "example": 1631817818000
                    }
                },
                "description": "Timestamp related info."
            },
            "TracingOptions": {
                "type": "object",
                "properties": {
                    "duration": {
                        "maximum": 86400,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of time in seconds that a trace is active before it is automatically stopped",
                        "format": "int32",
                        "example": 3600
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "The number of minutes to keep a stopped trace before deleting it",
                        "format": "int32",
                        "example": 10000
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Limits the number of packets kept for a trace",
                        "format": "int32",
                        "example": 250
                    },
                    "packetSizeLimit": {
                        "minimum": 192,
                        "type": "integer",
                        "description": "The maximum size of the IP packet that is to be traced",
                        "format": "int32",
                        "example": 1920
                    },
                    "packetsAfterStop": {
                        "type": "integer",
                        "description": "The extra packets to keep in the trace after a stop condition is satisfied",
                        "format": "int32",
                        "example": 25
                    },
                    "stopAtLimit": {
                        "type": "boolean",
                        "description": "Either stops the trace at the limit or discards the oldest packets to free space for new ones",
                        "example": false
                    }
                },
                "description": "Available tracing options"
            },
            "TracingOptionsMulti": {
                "type": "object",
                "properties": {
                    "discardIfStopNotMet": {
                        "type": "boolean",
                        "description": "true  - Discards traces that did not satisfy stop condition before the TCP connection terminated\nfalse - Retains all traces",
                        "example": true
                    },
                    "duration": {
                        "maximum": 86400,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The amount of time in seconds that a trace is active before it is automatically stopped",
                        "format": "int32",
                        "example": 3600
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "The number of minutes to keep a stopped trace before deleting it",
                        "format": "int32",
                        "example": 10000
                    },
                    "initialPackets": {
                        "type": "integer",
                        "description": "The maximum number of packets retained at the start of a TCP connection",
                        "format": "int32",
                        "example": 20
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Limits the number of packets kept for a trace",
                        "format": "int32",
                        "example": 250
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "The maximum number of TCP connection traces per stack",
                        "format": "int32",
                        "example": 100
                    },
                    "packetSizeLimit": {
                        "minimum": 192,
                        "type": "integer",
                        "description": "The maximum size of the IP packet that is to be traced",
                        "format": "int32",
                        "example": 1920
                    },
                    "packetsAfterStop": {
                        "type": "integer",
                        "description": "The extra packets to keep in the trace after a stop condition is satisfied",
                        "format": "int32",
                        "example": 25
                    },
                    "stopAtLimit": {
                        "type": "boolean",
                        "description": "Either stops the trace at the limit or discards the oldest packets to free space for new ones",
                        "example": false
                    }
                },
                "description": "The available tracing options for a multiple TCP trace"
            },
            "TunnelDiffieHellmanGroup": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown or manual tunnel\n       - Group 1\n       - Group 2\n       - Group 5\n       - Group 14\n       - Group 19\n       - Group 20\n       - Group 21\n       - Group 24\n       - No DH group used\n       - no mapped value\n      "
                    }
                },
                "description": "The Diffie-Hellman group used to generate the keyring material for this tunnel"
            },
            "TunnelEncapsulationMode": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Tunnel Mode\n       - Transport Mode\n       - no mapped value\n      "
                    }
                },
                "description": "The tunnel encapsulation mode"
            },
            "TunnelState": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "example": "Manual tunnel is inactive"
                    }
                },
                "description": "The tunnel state"
            },
            "TunnelType": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Manual IPSec tunnel\n       - Dynamic IPSec tunnel\n       - Shadow tunnel\n       - no mapped value\n      "
                    }
                },
                "description": "The tunnel type"
            },
            "UdpTraceAdvancedCriteria": {
                "type": "object",
                "properties": {
                    "checkSum": {
                        "type": "boolean",
                        "description": "Tests the value of the checksum field\n true - contains a non-zero value\n false - carries all zeroes\n null - skips this test",
                        "example": true
                    },
                    "dataLength": {
                        "type": "string",
                        "description": "The total length in bytes of the data after the UDP Header",
                        "example": "eq:15"
                    },
                    "packetDir": {
                        "type": "string",
                        "description": "The direction the packet is traveling",
                        "example": "OUT",
                        "enum": [
                            "IN",
                            "OUT"
                        ]
                    },
                    "packetFilter": {
                        "$ref": "#/components/schemas/AdvancedPacketFilter"
                    }
                },
                "description": "UDP Trace advanced criteria"
            },
            "UdpTraceBaseCriteria": {
                "type": "object",
                "properties": {
                    "interfaceName": {
                        "type": "string",
                        "description": "The logical name for the physical link or adapter that the TCP/IP stack uses to route an IP packet",
                        "example": "LOOPBACK"
                    },
                    "localHost": {
                        "type": "string",
                        "description": "The IP host address of the local TCP/IP stack",
                        "example": "192.*"
                    },
                    "localPort": {
                        "type": "string",
                        "description": "Local ports to match packets with",
                        "example": "500"
                    },
                    "remoteHost": {
                        "type": "string",
                        "description": "The IP host address of the remote TCP/IP stack",
                        "example": "2001:DB8::/32"
                    },
                    "remotePort": {
                        "type": "string",
                        "description": "Remote ports to match packets with",
                        "example": "1001"
                    },
                    "specialAddress": {
                        "type": "string",
                        "description": "A type of special address, either LOOPBACK, MULTICAST, or BROADCAST",
                        "example": "LOOPBACK",
                        "enum": [
                            "LOOPBACK",
                            "MULTICAST",
                            "BROADCAST"
                        ]
                    },
                    "stack": {
                        "type": "string",
                        "description": "The stack to limit the trace to",
                        "example": "TCPIP1"
                    }
                },
                "description": "The base criteria of a UDP trace"
            },
            "UdpTraceDefinition": {
                "required": [
                    "criteria",
                    "description",
                    "name",
                    "options",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "criteria": {
                        "$ref": "#/components/schemas/UdpTraceFilterCriteria"
                    },
                    "description": {
                        "type": "string",
                        "description": "The purpose of the trace",
                        "example": "Test Tcp Trace"
                    },
                    "isFavorite": {
                        "type": "boolean",
                        "description": "Indicates whether the trace definition is a favorite.",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique identifier of the trace definition",
                        "example": "Test Trace"
                    },
                    "options": {
                        "$ref": "#/components/schemas/TracingOptions"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the trace definition",
                        "example": "STOPPED",
                        "enum": [
                            "value: INACTIVE state: Stopped",
                            "value: ACTIVE state: Running"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "TCP",
                            "UDP",
                            "ICMP4",
                            "ICMP6",
                            "GEN4",
                            "GEN6",
                            "OSAENTA",
                            "MULT"
                        ]
                    }
                },
                "description": "The available tracing options for a UDP trace definition"
            },
            "UdpTraceFilterCriteria": {
                "type": "object",
                "properties": {
                    "advanced": {
                        "$ref": "#/components/schemas/UdpTraceAdvancedCriteria"
                    },
                    "base": {
                        "$ref": "#/components/schemas/UdpTraceBaseCriteria"
                    },
                    "stop": {
                        "$ref": "#/components/schemas/UdpTraceAdvancedCriteria"
                    }
                },
                "description": "Packet trace filter criteria"
            },
            "WebParameterData": {
                "required": [
                    "portNum",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "portNum": {
                        "type": "integer",
                        "description": "The Web interface port number",
                        "format": "int32",
                        "example": 38676
                    },
                    "url": {
                        "type": "string",
                        "description": "The Web interface URL",
                        "example": "http://192.168.1.1:38676/nmi/main.html"
                    }
                },
                "description": "A NetMaster REST API Web Parameter Data Object"
            },
            "WsChannelData": {
                "required": [
                    "errorDestination",
                    "name",
                    "receiveDestination",
                    "sendDestination"
                ],
                "type": "object",
                "properties": {
                    "errorDestination": {
                        "type": "string",
                        "description": "Channel error destination"
                    },
                    "name": {
                        "type": "string",
                        "description": "Channel name"
                    },
                    "receiveDestination": {
                        "type": "string",
                        "description": "Channel receive destination"
                    },
                    "sendDestination": {
                        "type": "string",
                        "description": "Channel receive destination"
                    }
                },
                "description": "A NetMaster Rest API Server Web Socket Information Object"
            },
            "WsInfoData": {
                "required": [
                    "brokerUrl",
                    "channels"
                ],
                "type": "object",
                "properties": {
                    "brokerUrl": {
                        "type": "string",
                        "description": "Web Socket Broker URL"
                    },
                    "channels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/WsChannelData"
                        },
                        "description": "Web Socket Channels"
                    }
                },
                "description": "A NetMaster Rest API Server Web Socket Information Object"
            },
            "ZertEncryptionAlgorithm": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - DES\n       - DES 40\n       - 3DES\n       - RC2 40\n       - RC2 128\n       - RC2\n       - RC4 40\n       - RC4 128\n       - RC4 256\n       - RC4\n       - AES CBC 128\n       - AES CBC 192\n       - AES CBC 256\n       - AES CTR 128\n       - AES CTR 192\n       - AES CTR 256\n       - AES GCM 128\n       - AES GCM 256\n       - AES CCM 128\n       - AES CCM 256\n       - AES CCM8 128\n       - AES CCM8 256\n       - AES 256\n       - Blowfish\n       - Blowfish CBC\n       - CAST 128 CBC\n       - ARCFOUR 128\n       - ARCFOUR 256\n       - ARCFOUR\n       - Rijndael CBC\n       - ACSS\n       - ARIA 128 CBC\n       - ARIA 256 CBC\n       - ARIA 128 GCM\n       - ARIA 256 GCM\n       - Camellia 128 CBC\n       - Camellia 256 CBC\n       - Camellia 128 GCM\n       - Camellia 256 GCM\n       - ChaCha20 Poly1305\n       - IDEA CBC\n       - SEED CBC\n       - Fortezza\n       - GOST28147\n       - TwoFish CBC 256\n       - TwoFish CBC\n       - TwoFish CBC 192\n       - TwoFish CBC 128\n       - Serpent CBC 256\n       - Serpent CBC 192\n       - Serpent CBC 128\n       - no mapped value\n      "
                    }
                },
                "description": "The symmetric encryption algorithm used by the cipher suite"
            },
            "ZertIPSecData": {
                "type": "object",
                "properties": {
                    "fipsEnabled": {
                        "type": "boolean",
                        "description": "IP tunnel flag: FIPS is enabled\nIf TRUE, cryptographic operations for this tunnel are performed using cryptographic algorithms and modules that are designedto meet the FIPS 140 standards; \n If FALSE, cryptographic algorithms and modules that do not meet the FIPS 140 standardsmight be used.",
                        "example": false
                    },
                    "ikeLocalCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "ikeMajorVersion": {
                        "type": "integer",
                        "description": "Major version of the IKE protocol in use",
                        "format": "int32",
                        "example": 1
                    },
                    "ikeMinorVersion": {
                        "type": "integer",
                        "description": "Minor version of the IKE protocol in use",
                        "format": "int32",
                        "example": 1
                    },
                    "ikeRemoteCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "ikeTunnelAuthAlgorithm": {
                        "$ref": "#/components/schemas/ZertMessageAuthAlgorithm"
                    },
                    "ikeTunnelDHGroup": {
                        "$ref": "#/components/schemas/TunnelDiffieHellmanGroup"
                    },
                    "ikeTunnelEncryptionAlgorithm": {
                        "$ref": "#/components/schemas/ZertEncryptionAlgorithm"
                    },
                    "ikeTunnelExchangeRule": {
                        "type": "string",
                        "description": "Key exchange rule for this IKE tunnel",
                        "example": "TCP~KER~1"
                    },
                    "ikeTunnelID": {
                        "type": "integer",
                        "description": "IKE tunnel identifier",
                        "format": "int32",
                        "example": 14
                    },
                    "ikeTunnelLifesize": {
                        "type": "integer",
                        "description": "IKE tunnel lifesize limit in Kbytes. If 0, no lifesize is enforced.",
                        "format": "int32",
                        "example": 0
                    },
                    "ikeTunnelLifetime": {
                        "type": "integer",
                        "description": "IKE tunnel lifetime as the number of minutes the tunnel remains active.",
                        "format": "int32",
                        "example": 480
                    },
                    "ikeTunnelLocalAuthMethod": {
                        "$ref": "#/components/schemas/IKETunnelAuthenticationMethod"
                    },
                    "ikeTunnelLocalIPAddress": {
                        "type": "string",
                        "description": "Local IP address of the tunnel endpoint",
                        "example": "10.0.0.1"
                    },
                    "ikeTunnelPseudoRandFunc": {
                        "$ref": "#/components/schemas/IKETunnelPseudoRandomFunction"
                    },
                    "ikeTunnelReauthInterval": {
                        "type": "integer",
                        "description": "Indicates the number of minutes between reauthentication operations",
                        "format": "int32",
                        "example": 480
                    },
                    "ikeTunnelRemoteAuthMethod": {
                        "$ref": "#/components/schemas/IKETunnelAuthenticationMethod"
                    },
                    "ikeTunnelRemoteIPAddress": {
                        "type": "string",
                        "description": "Remote IP address of the tunnel endpoint",
                        "example": "1.2.3.4"
                    },
                    "ipsecTunnelAuthAlgorithm": {
                        "$ref": "#/components/schemas/ZertMessageAuthAlgorithm"
                    },
                    "ipsecTunnelDHGroup": {
                        "$ref": "#/components/schemas/TunnelDiffieHellmanGroup"
                    },
                    "ipsecTunnelEncryptionAlgorithm": {
                        "$ref": "#/components/schemas/ZertEncryptionAlgorithm"
                    },
                    "ipsecTunnelID": {
                        "type": "integer",
                        "description": "IPSec tunnel identifier",
                        "format": "int32",
                        "example": 17
                    },
                    "ipsecTunnelLifesize": {
                        "type": "integer",
                        "description": "IPSec tunnel lifesize limit in Kbytes.",
                        "format": "int32",
                        "example": 0
                    },
                    "ipsecTunnelLifetime": {
                        "type": "integer",
                        "description": "IPSec tunnel lifetime in minutes",
                        "format": "int32",
                        "example": 240
                    },
                    "ipsecTunnelVPNLifetime": {
                        "type": "integer",
                        "description": "IPSec tunnel VPN lifetime in minutes. 0 indicates no VPN lifetime limit is enforced.",
                        "format": "int32",
                        "example": 1440
                    },
                    "ipv6Used": {
                        "type": "boolean",
                        "description": "IP Tunnel flag: IPv6 indicator. If true, security endpoint addresses and data endpoint addresses are IPv6.\nOtherwise, they are IPv4.",
                        "example": false
                    },
                    "messageAuthenticationProtocol": {
                        "$ref": "#/components/schemas/MessageAuthenticationProtocol"
                    },
                    "tunnelEncapsulationMode": {
                        "$ref": "#/components/schemas/TunnelEncapsulationMode"
                    },
                    "tunnelState": {
                        "$ref": "#/components/schemas/TunnelState"
                    },
                    "tunnelType": {
                        "$ref": "#/components/schemas/TunnelType"
                    }
                },
                "description": "zERT IPSec data"
            },
            "ZertInformationSource": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Stream observation\n       - Cryptographic protocol provider\n       - no mapped value\n      "
                    }
                },
                "description": "The source of the protocol information in this record"
            },
            "ZertMessageAuthAlgorithm": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - No message authentication, or uses authenticated encryption algorithm like AES-GCM\n       - MD2\n       - HMAC-MD5\n       - HMAC-SHA1\n       - HMAC-SHA2-224\n       - HMAC-SHA2-256 \n       - HMAC-SHA2-384\n       - HMAC-SHA2-512\n       - AES-GMAC-128\n       - AES-GMAC-256\n       - AES-128-XCBC-96\n       - HMAC-SHA2-256-128\n       - HMAC-SHA2-384-192\n       - HMAC-SHA2-512-256\n       - HMAC-MD5-96\n       - HMAC-SHA1-96\n       - UMAC-64\n       - UMAC-128\n       - RIPEMD-160\n       - no mapped value\n      "
                    }
                },
                "description": "The message authentication algorithm used by the cipher suite"
            },
            "ZertSSHAuthenticationMethod": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - Password\n       - Public key\n       - Host-based\n       - Rhosts\n       - RhostsRSA\n       - RSA\n       - Keyboard-interactive\n       - Challenge-response\n       - Control socket 1\n       - GSSAPI with MIC\n       - GSSAPI Key exchange\n       - no mapped value\n      "
                    }
                },
                "description": "The authentication method used for this connection"
            },
            "ZertSSHData": {
                "type": "object",
                "properties": {
                    "clientCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "clientPublicKeyFingerprint": {
                        "type": "string",
                        "description": "The client public key fingerprint, which is a hash of the public key used to identify the key",
                        "example": "65:30:38:96:35:56:4f:64:64:e8:e3:a4:7d:59:3e:10"
                    },
                    "clientPublicKeyFingerprintLength": {
                        "type": "integer",
                        "description": "Length of the client public key fingerprint in bytes. If no client public key is used, this is set to 0.",
                        "format": "int32",
                        "example": 16
                    },
                    "encryptThenMacProcessingUsedInbound": {
                        "type": "boolean",
                        "description": "Cryptographic operations flag: Encrypt-then-MAC processing is used for inbound traffic",
                        "example": true
                    },
                    "encryptThenMacProcessingUsedOutbound": {
                        "type": "boolean",
                        "description": "Cryptographic operations flag: Encrypt-then-MAC processing is used for outbound traffic",
                        "example": true
                    },
                    "fipsStatus": {
                        "$ref": "#/components/schemas/FIPSStatus"
                    },
                    "firstAuthenticationMethod": {
                        "$ref": "#/components/schemas/ZertSSHAuthenticationMethod"
                    },
                    "inboundEncryptionAlgorithm": {
                        "$ref": "#/components/schemas/ZertEncryptionAlgorithm"
                    },
                    "inboundMsgAuthAlgorithm": {
                        "$ref": "#/components/schemas/ZertMessageAuthAlgorithm"
                    },
                    "informationSource": {
                        "$ref": "#/components/schemas/ZertInformationSource"
                    },
                    "keyExchangeMethod": {
                        "$ref": "#/components/schemas/ZertSSHKeyExchangeMethod"
                    },
                    "lastAuthenticationMethod": {
                        "$ref": "#/components/schemas/ZertSSHAuthenticationMethod"
                    },
                    "outboundEncryptionAlgorithm": {
                        "$ref": "#/components/schemas/ZertEncryptionAlgorithm"
                    },
                    "outboundMsgAuthAlgorithm": {
                        "$ref": "#/components/schemas/ZertMessageAuthAlgorithm"
                    },
                    "protocolProvider": {
                        "type": "string",
                        "description": "Protocol provider, either \"Observation\" or \"IBM OpenSSH\" \nOther values may be added in the future.",
                        "example": "Observation"
                    },
                    "protocolVersion": {
                        "$ref": "#/components/schemas/SSHProtocol"
                    },
                    "rawClientKeyLength": {
                        "type": "integer",
                        "description": "Length of the raw client key in bits",
                        "format": "int32",
                        "example": 2048
                    },
                    "rawClientKeyType": {
                        "$ref": "#/components/schemas/ZertSSHRawKeyType"
                    },
                    "rawServerKeyLength": {
                        "type": "integer",
                        "description": "Length of the raw server key in bits",
                        "format": "int32",
                        "example": 2048
                    },
                    "rawServerKeyType": {
                        "$ref": "#/components/schemas/ZertSSHRawKeyType"
                    },
                    "serverCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "serverPublicKeyFingerprint": {
                        "type": "string",
                        "description": "The server public key fingerprint, which is a hash of the public key used to identify the key ",
                        "example": "65:30:38:96:35:56:4f:64:64:e8:e3:a4:7d:59:3e:19"
                    },
                    "serverPublicKeyFingerprintLength": {
                        "type": "integer",
                        "description": "Length of the server public key fingerprint in bytes. If no server public key is used, this is set to 0.",
                        "format": "int32",
                        "example": 16
                    },
                    "sshSubcomponent": {
                        "$ref": "#/components/schemas/SSHSubcomponent"
                    }
                },
                "description": "zERT SSH data"
            },
            "ZertSSHKeyExchangeMethod": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - Diffie-Hellman-group-exchangeSHA256\n       - Diffie-Hellman-group-exchangeSHA1\n       - Diffie-Hellman-group14-SHA1\n       - Diffie-Hellman-group1-SHA1\n       - ECDH-SHA2-NISTP256\n       - ECDH-SHA2-NISTP384\n       - ECDH-SHA2-NISTP521\n       - GSS-GROUP1-SHA1\n       - GSS-GROUP14-SHA1\n       - GSS-GEX-SHA1\n       - ECMQV-SHA2\n       - GSS-*\n       - RSA1024-SHA1\n       - RSA2048-SHA256\n       - Diffie-Hellman-group14-SHA256\n       - Diffie-Hellman-group16-SHA512\n       - Diffie-Hellman-group18-SHA512\n       - Curve 25519-SHA256\n       - no mapped value\n      "
                    }
                },
                "description": "The key exchange method"
            },
            "ZertSSHRawKeyType": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - RSA\n       - DSA\n       - Diffie-Hellman (DH)\n       - Elliptic Curve Cryptography (ECC)\n       - RSA1 (SSHV1 only)\n       - RSA_CERT (from OpenSSH certificate)\n       - DSA_CERT (from OpenSSH certificate)\n       - ECDSA_CERT (from OpenSSH certificate)\n       - ED 25519\n       - ED 25519 (from OpenSSH certificate)\n       - no mapped value\n      "
                    }
                },
                "description": "The type of the raw client or server key"
            },
            "ZertTLSCertificateKeyType": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - None\n       - RSA\n       - DSA\n       - Diffie-Hellman (DH)\n       - Elliptic Curve Cryptography (ECC)\n       - no mapped value\n      "
                    }
                },
                "description": "The certificate key type"
            },
            "ZertTLSData": {
                "type": "object",
                "properties": {
                    "cipherInfo": {
                        "$ref": "#/components/schemas/Cipher"
                    },
                    "clientCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "encryptThenMacProcessingUsed": {
                        "type": "boolean",
                        "description": "Cryptographic operations flag: Encrypt-then-MAC processing is used.",
                        "example": false
                    },
                    "encryptionAlg": {
                        "type": "integer",
                        "description": "The symmetric encryption algorithm used by the cipher suite (from zERT)",
                        "format": "int32",
                        "example": 3
                    },
                    "fipsStatus": {
                        "$ref": "#/components/schemas/FIPSStatus"
                    },
                    "handshakeRole": {
                        "$ref": "#/components/schemas/ZertTLSHandshakeRole"
                    },
                    "handshakeType": {
                        "$ref": "#/components/schemas/ZertTLSHandshakeType"
                    },
                    "informationSource": {
                        "$ref": "#/components/schemas/ZertInformationSource"
                    },
                    "keyExchangeAlgorithm": {
                        "type": "integer",
                        "description": "The key exchange algorithm used by the cipher suite (from zERT)",
                        "format": "int32",
                        "example": 8
                    },
                    "messageAuthAlgorithm": {
                        "type": "integer",
                        "description": "The message authentication algorithm used by the cipher suite (from zERT)",
                        "format": "int32",
                        "example": 4
                    },
                    "protocolProvider": {
                        "type": "string",
                        "description": "Protocol provider, either \"Observation\" or \"IBM System SSL\"\nOther values may be added in the future.",
                        "example": "Observation"
                    },
                    "protocolVersion": {
                        "$ref": "#/components/schemas/TLSProtocol"
                    },
                    "securityCipher": {
                        "type": "string",
                        "description": "The negotiated security cipher",
                        "example": "0013"
                    },
                    "serverCertificateInfo": {
                        "$ref": "#/components/schemas/CertificateInfo"
                    },
                    "sessionID": {
                        "type": "string",
                        "description": "Session id",
                        "example": "x'0200005200000000000000000000FFFE0AE6480EFCF400006192829300000012'"
                    },
                    "sessionIDLength": {
                        "type": "integer",
                        "description": "Session id length",
                        "format": "int32",
                        "example": 32
                    }
                },
                "description": "zERT TLS data"
            },
            "ZertTLSHandshakeRole": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Unknown\n       - Client\n       - Server\n       - Server with client authentication\n       - no mapped value\n      "
                    }
                },
                "description": "The handshake role"
            },
            "ZertTLSHandshakeType": {
                "required": [
                    "mappedString"
                ],
                "type": "object",
                "properties": {
                    "mappedString": {
                        "type": "string",
                        "description": "\n      Possible values:\n       - Full handshake\n       - Abbreviated handshake\n       - no mapped value\n      "
                    }
                },
                "description": "The handshake type"
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "scheme": "basic",
                "type": "http"
            },
            "bearerToken": {
                "bearerFormat": "JWT",
                "scheme": "bearer",
                "type": "http"
            }
        }
    }
}