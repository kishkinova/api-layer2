logging:
    level:
        ROOT: INFO
        com.ca.mfaas: INFO
        org.springframework: WARN
        org.apache.catalina: WARN
        com.netflix: WARN
        com.netflix.discovery: ERROR
        com.netflix.config: ERROR
        com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient: OFF
        com.netflix.discovery.DiscoveryClient: OFF
        org.springframework.boot.web.embedded.tomcat.TomcatWebServer: INFO

apiml:
    security:
        ssl:
            ciphers: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    # The `apiml` node contains API Mediation Layer specific configuration
    service:
        # The `apiml.service` node contains information required by any APIML service
        id: discoverableclient  # Service ID of this service
        hostname: localhost  # Hostname that is advertised in Eureka. Default is valid only for localhost
        port: 10012  # Default port name for discoverable-clinet service
        ipAddress: 127.0.0.1  # IP address that is advertised in Eureka. Default is valid only for localhost
        preferIpAddress: false

spring:
    application:
        name: ${apiml.service.id}
    cloud:
        client:
            hostname: ${apiml.service.hostname}
            ipAddress: ${apiml.service.ipAddress}
    mvc:
        throw-exception-if-no-handler-found: true
    output:
        ansi:
            enabled: detect

server:
    address: ${apiml.service.ipAddress}
    port: ${apiml.service.port}
    servlet:
        contextPath: /discoverableclient
    ssl:
        enabled: true
        protocol: TLSv1.2
        enabled-protocols: TLSv1.2
        ciphers: ${apiml.security.ssl.ciphers}
        keyStoreType: PKCS12
        trustStoreType: PKCS12
    compression:
        mime-types: image/png
        enabled: true
        min-response-size: 500

eureka:
    instance:
        hostname: ${apiml.service.hostname}
        ipAddress: ${apiml.service.ipAddress}
        port: ${server.port}
        securePort: ${server.port}
        nonSecurePortEnabled: false
        securePortEnabled: true
        preferIpAddress: ${apiml.service.preferIpAddress}
        homePageUrl: https://${apiml.service.hostname}:${apiml.service.port}${server.servlet.contextPath}
        statusPageUrl: https://${apiml.service.hostname}:${apiml.service.port}${server.servlet.contextPath}/application/info
        healthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}${server.servlet.contextPath}/application/health
        metadata-map:
            routed-services:
                ui_v1:
                    gateway-url: "ui/v1"
                    service-url: ${server.servlet.contextPath}
                api_v1:
                    gateway-url: "api/v1"
                    service-url: ${server.servlet.contextPath}/api/v1
                ws_v1:
                    gateway-url: "ws/v1"
                    service-url: ${server.servlet.contextPath}/ws
            apiml:
                apiInfo:
                    - apiId: org.zowe.discoverableclient
                      gatewayUrl: api/v1
                      swaggerUrl: https://${apiml.service.hostname}:${server.port}${server.servlet.contextPath}/api-doc
                      documentationUrl: https://www.zowe.org
            mfaas:
                api-info:
                    apiVersionProperties:
                        v1:
                            title: Service Integration Enabler V2 Sample Application API © #Copyright is for UTF8 encoding check
                            description: API of sample API service showing how to integrate a Spring Boot v2.x application
                            version: 1.0.0
                            basePackage: com.ca.mfaas.client.api
                discovery:
                    catalogUiTile:
                        id: cademoapps
                        title: Sample API Mediation Layer Applications
                        description: Applications which demonstrate how to make a service integrated to the API Mediation Layer ecosystem
                        version: 1.0.1
                    enableApiDoc: true
                    service:
                        title: Service Integration Enabler V2 Sample Application (Spring Boot 2.x) © #Copyright is for UTF8 encoding check
                        description: Sample API service showing how to integrate a Spring Boot v2.x application
    client:
        fetchRegistry: true
        registerWithEureka: true
        region: default
        serviceUrl:
            defaultZone: ${apiml.service.discoveryServiceUrls}
        healthcheck:
            enabled: true

##############################################################################################
management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: health,info,routes
    health:
        defaults:
            enabled: false

---
spring:
    profiles: diag

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: "*"

---
spring:
    profiles: dev
    profiles.include:
        diag

logging:
    level:
        ROOT: INFO
        com.ca.mfaas: DEBUG
        org.springframework: INFO
        org.apache.catalina: INFO
        com.netflix: INFO

logbackServiceName: ZWEADC1
