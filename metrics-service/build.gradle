buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'

jib {
    to {
        image = project.hasProperty("zowe.docker.container") ? "${project.getProperty("zowe.docker.container")}metrics-service" : "ghcr.io/zowe/metrics-service"
        auth {
            username = project.hasProperty("zowe.docker.username") ? project.getProperty("zowe.docker.username") : ""
            password = project.hasProperty("zowe.docker.password") ? project.getProperty("zowe.docker.password") : ""
        }
    }

    container {
        args = ['--spring.config.additional-location=file:/config/docker/metrics-service.yml', '--spring.profiles.include=dev,debug']
    }

    extraDirectories {
        paths {
            path {
                from = "../config"
                into = "/config"
            }
            path {
                from = "../keystore"
                into = "/keystore"
            }
        }
    }
}

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    implementation project(':onboarding-enabler-spring')
    implementation(project(':security-service-client-spring'))

    implementation libraries.springFox
    implementation libraries.spring_boot_starter_actuator
    implementation libraries.spring_cloud_starter_eureka
    implementation libraries.spring_security_web
    implementation libraries.spring_security_config
    implementation libraries.gson
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    testCompile libraries.lombok
    testAnnotationProcessor libraries.lombok
    testCompile libraries.spring_boot_starter_test
}

def uiModule = "${project(':metrics-service-ui').projectDir}"

processResources {
    dependsOn "copyUi"
}

task copyUi(type: Copy) {
    group = "ui"

    dependsOn ":metrics-service-ui:build"

    inputs.dir(uiModule + '/frontend/build')
    outputs.dir('src/main/resources/static')

    from uiModule + '/frontend/build'
    into 'src/main/resources/static'
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

bootJar.archiveName = "${bootJar.baseName}.jar"

jar {
    enabled true
}

publishing {
    publications {
        mavenJavaLib(MavenPublication) {
            artifact jar
        }
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml.sdk'
            artifactId = 'metrics-service-fat-jar'
            artifact bootJar
        }
    }
}
