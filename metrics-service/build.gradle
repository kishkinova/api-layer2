buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6309
def debugPort = 5129
def componentName = "metrics-service"

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-security-common')
    api project(':onboarding-enabler-spring')
    api project(':security-service-client-spring')

    implementation libs.snakeyaml
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jackson.mapper.asl
    implementation libs.jetty.client
    implementation libs.jetty.http
    implementation libs.jetty.io
    implementation libs.jetty.util
    implementation libs.spring.doc
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.cloud.commons
    implementation libs.spring.cloud.starter.bootstrap
    implementation libs.spring.cloud.starter.turbine
    implementation libs.spring.security.web
    implementation libs.spring.security.config
    implementation libs.spring.security.core
    implementation libs.spring.security.crypto
    implementation libs.tomcat.annotations.api
    implementation libs.tomcat.embed.core
    implementation libs.tomcat.embed.el
    implementation libs.tomcat.embed.websocket
    implementation libs.gson
    implementation libs.xstream
    implementation libs.commons.io
    implementation libs.guava
    implementation libs.spring.aop
    implementation libs.spring.beans
    implementation libs.spring.context
    implementation libs.spring.context.support
    implementation libs.spring.core
    implementation libs.spring.expression
    implementation libs.spring.messaging
    implementation libs.spring.web
    implementation libs.spring.webflux
    implementation libs.spring.webmvc
    implementation libs.spring.websocket
    implementation libs.logback.core
    implementation libs.logback.classic

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.json.smart
    testImplementation libs.rest.assured
}

def uiModule = "${project(':metrics-service-ui').projectDir}"

processResources {
    dependsOn "copyUi"
}

task copyUi(type: Copy) {
    group = "ui"

    dependsOn ":metrics-service-ui:build"

    inputs.dir(uiModule + '/frontend/build')
    outputs.dir('src/main/resources/static')

    from uiModule + '/frontend/build'
    into 'src/main/resources/static'
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }

    debugOptions {
        port = 5019
        suspend = false
        server = true
    }

    workingDir = project.rootDir

    systemProperties = System.properties
}

bootJar.archiveFileName = bootJar.archiveBaseName.get() + ".jar"

jar {
    enabled true
    archiveClassifier = ""
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'metrics-service-fat-jar'
            artifact bootJar
        }
    }
}
