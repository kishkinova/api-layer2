ext.springBootEnabler = 'onboarding-enabler-spring'
ext.javaEnabler = 'onboarding-enabler-java'

ext.javaLibraries = [
    'api-catalog-services',
    'common-service-core',
    'apiml-utility',
    'apiml-common',
    'apiml-security-common',
    'caching-service',
    'discovery-service',
    'gateway-service',
    'security-service-client-spring',
    'zaas-client',
    'discoverable-client'
]

ext.serviceJars = [ 'zowe-install', 'api-catalog-package', 'discovery-package', 'gateway-package', 'caching-service-package', 'apiml-common-lib-package' ]

ext.enablers = [ext.javaEnabler, ext.springBootEnabler]
ext.projectsToPublish = ext.serviceJars + ext.javaLibraries + ext.enablers

ext.publishTasksList = projectsToPublish.collect {
    it.equals(springBootEnabler) ? "publishEnablers" : ":" + it + ":publish"
}

configure(subprojects.findAll { it.name in projectsToPublish }) {
    apply plugin: "maven"
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    publishing {
        repositories.maven {
            credentials {
                username project.hasProperty("zowe.deploy.username") ? project.getProperty("zowe.deploy.username") : ""
                password project.hasProperty("zowe.deploy.password") ? project.getProperty("zowe.deploy.password") : ""
            }
            if (rootProject.version.endsWith("-SNAPSHOT")) {
                setUrl(artifactoryPublishingMavenSnapshotRepo)
            } else {
                setUrl(artifactoryPublishingMavenRepo)
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.zowe.apiml.sdk'
                version rootProject.version
                if (project.name.equals(springBootEnabler)) {
                    def enablerPrefix = project.hasProperty("enabler") ? project.getProperty("enabler") : "v2"
                    artifactId "${project.name}-" + enablerPrefix + "-springboot-${springBootVersion}"
                } else {
                    artifactId "${project.name}"
                }

                from components.java

                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each { it.scope*.value = 'compile' }
                }
            }
        }
    }

    tasks.withType(Jar) {
        manifest {
            attributes "Specification-Title": project.name
            attributes "Specification-Version": rootProject.version
            attributes "Specification-Vendor": "Broadcom Inc."

            attributes "Implementation-Title": project.name
            attributes "Implementation-Version": rootProject.version
            attributes "Implementation-Vendor": "Broadcom Inc."
            attributes "Implementation-Vendor-Id": "org.zowe.apiml.sdk"
        }
    }

}

//noinspection GroovyAssignabilityCheck
task publishSdkArtifacts {
    doLast {
        println 'Published SDK libraries for main version of Spring Boot to Zowe Artifactory'
    }

    group 'Zowe Publishing'
    description 'Publish SDK libraries for main version of Spring Boot to Zowe Artifactory'
    dependsOn publishTasksList
}

task publishEnablerV1(type: Exec) {
    def username  = project.hasProperty("zowe.deploy.username") ? project.getProperty("zowe.deploy.username") : ""
    def password = project.hasProperty("zowe.deploy.password") ? project.getProperty("zowe.deploy.password") : ""

    commandLine './gradlew', springBootEnabler + ':publish', '-Penabler=v1', '-Pzowe.deploy.username=' + username, '-Pzowe.deploy.password=' + password
    mustRunAfter 'publishEnablerV2'
}

task publishEnablerV2 {
    dependsOn springBootEnabler + ':publish'
}

task publishEnablers {
    dependsOn 'publishEnablerV1', 'publishEnablerV2'
}
