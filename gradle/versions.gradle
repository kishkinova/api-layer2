dependencyResolutionManagement {
    versionCatalogs {
        libs {
            // for node projects
            version('projectNodeVersion', '18.14.0')
            version('projectNpmVersion', '9.3.1')

            version('springBootVersion', '2.7.11')
            version('springCloudVersion', '2.2.10.RELEASE')
            version('springCloudCommonsVersion', '3.1.6')
            version('springCloudVersion3', '3.1.6')
            version('springCloudCBVersion', '2.1.7')
            version('springCloudGatewayVersion', '3.1.7')
            version('springSecurityVersion') {
                // older versions are vulnerable to CVE-2023-20862
                strictly '[5.7.8,6.0.0['
                prefer '5.7.8'
            }
            version('springFrameworkVersion') {
                // older versions are vulnerable to CVE-2023-20863
                strictly '[5.3.27,6.0.0['
                prefer '5.3.27'
            }
            version('springRetryVersion', '1.2.5.RELEASE')
            version('springWebTestClientVersion', '5.3.0')

            version('awsJavaSdkVersion', '1.12.466')
            version('attlsVersion', '1.21.3')
            version('archaiusVersion', '0.7.7')
            version('awaitilityVersion', '4.0.3')
            version('bouncyCastleVersion', '1.70')
            version('bootstrapVersion', '4.3.1')
            version('commonsCodecVersion', '1.15')
            version('commonsConfigurationVersion', '1.10')
            version('commonsLang3Version', '3.12.0')
            version('commonsLoggingVersion', '1.1.3')
            version('commonsTextVersion', '1.10.0')
            version('commonsIoVersion') {
                // older versions are vulnerable to CVE-2021-29425
                strictly '[2.7,2.8.0['
                prefer '2.7'
            }
            version('commonsFileUploadVersion', '1.5')
            version('ehCacheVersion', '2.10.9.2')
            version('eurekaVersion', '1.10.18')
            version('findBugsVersion', '3.0.2')
            version('githubClassgraphVersion', '4.8.154')
            version('gradleGitPropertiesVersion', '2.2.4') // Used in classpath dependencies
            version('gradleNodeVersion', '3.0.1') // Used in classpath dependencies
            version('gsonVersion', '2.9.1')
            version('guavaVersion', '31.1-jre')
            version('hamcrestVersion', '1.3')
            version('httpClientVersion', '4.5.14')
            version('httpCoreVersion', '4.4.16')
            version('hystrixVersion', '1.5.18')
            version('infinispanVersion', '13.0.15.Final')
            version('jacksonCoreVersion', '2.14.3')
            version('jacksonDatabindVersion', '2.14.3')
            version('jacksonDataformatYamlVersion', '2.14.3')
            version('jacksonMapperAslVersion', '1.9.16-TALEND')
            version('janinoVersion', '3.1.9')
            version('javassistVersion', '3.29.2-GA')
            version('javaxAnnotationVersion', '1.3.2')
            version('jakartaInjectVersion', '1.0.5')
            version('javaxServletApiVersion', '4.0.1')
            version('jaxbApiVersion', '2.3.1')
            version('jerseyVersion', '2.39.1')
            version('jerseySunVersion', '1.19.4')
            version('jettyWebSocketClientVersion', '9.4.51.v20230217')
            version('jettisonVersion', '1.5.4')
            version('jjwtVersion', '0.11.5')
            version('jjwtFullVersion', '0.9.1')
            version('jodaVersion', '2.10.14')
            version('jsonPathVersion', '2.7.0')
            version('jsonSmartVersion', '2.4.10')
            version('jsonUnitVersion', '1.31.1')
            version('jsonVersion', '20230227')
            version('jsoupVersion', '1.16.1')
            version('jsr305Version', '3.0.2')
            version('junitJupiterVersion', '5.9.3')
            version('junitPlatformVersion', '1.9.3')
            version('jqueryVersion', '3.6.4')
            version('lettuceVersion', '6.1.10.RELEASE')
            version('log4jVersion', '2.19.0')
            version('logbackVersion') {
                // 1.3+ versions doesn't contain Slf4J package
                // 1.4+ versions requires JDK 11
                strictly '[1.2, 1.3['
                prefer '1.2.12'
            }
            version('lombokVersion', '1.18.26')
            version('mockitoCoreVersion', '4.9.0')
            version('mockitoInlineVersion', '4.5.1')
            version('netflixCommonsUtilVersion', '0.3.0')
            version('netflixServoVersion', '0.13.2')
            version('nettyVersion', '4.1.92.Final')
            version('nettyReactorVersion', '1.1.7')
            version('nimbusJoseJwtVersion', '9.31')
            version('openApiDiffVersion', '2.0.1')
            version('picocliVersion', '4.7.3')

            version('ribbonVersion', '2.3.0')
            version('reactorVersion') {
                // because of conflict with spring-security-config:5.7.8
                // removed method: reactor.core.publisher.Mono.subscriberContext(Lreactor/util/context/Context;)Lreactor/core/publisher/Mono;
                strictly '[3.4.0, 3.5.0['
                prefer '3.4.29'
            }
            version('restAssuredVersion', '5.3.0')
            version('slf4jVersion', '1.7.36')
            version('snakeyamlVersion', '2.0')
            version('springFoxVersion', '2.9.2')
            version('springDocVersion') {
                // version 1.7+ has a conflict with Jackson databind (displaying of examples)
                strictly '[1.6.15, 1.7.0['
                prefer '1.6.15'
            }
            version('spring4Version', '5.3.27') // Used within PJE in tests
            version('swagger3CoreVersion', '2.2.9')
            version('swagger3ParserVersion', '2.1.13')
            version('swaggerCoreVersion', '1.6.10')
            version('swaggerInflector', '2.0.9')
            version('swaggerJaxrs2Version', '2.2.9')
            version('thymeleafVersion', '3.0.15.RELEASE')
            version('tomcatVersion', '9.0.74')
            version('velocityVersion', '2.3')
            version('woodstoxVersion', '6.5.1')
            version('xstreamVersion') {
                // older versions are vulnerable to CVE-2022-40151, CVE-2022-40152, and CVE-2022-41966
                strictly '[1.4.20,2.0['
                prefer '1.4.20'
            }
            version('jgitVersion') {
                strictly '5.13.1.202206130422-r'
            }
            version('gradleNodeVersion', '3.5.0')
            version('sonarGradlePluginVersion', '3.4.0.2513')
            version('gradleReleaseVersion', '2.8.1')
            version('gradleLicencerVersion', '0.6.1')
            version('gradleDependencyCheckVersion', '8.2.1')
            version('gradleJibPluginVersion', '3.2.1')
            version('taskTreeVersion', '2.1.1')
            version('reactorBomVersion', '2022.0.7')
            version('gradleTestLoggerVersion', '3.2.0')
            version('testLoggerVersion', '3.2.0')
            version('micronautVersion', '3.8.9')
            version('micronautPluginVersion', '3.7.9')
            version('shadowVersion', '8.1.1')
            version('gradleTomcatPluginVersion', '2.7.0')
            version('checkstyle', '9.3')
            version('jacoco', '0.8.10')
            version('gradle', '8.1.1')

            library('zowe_attls', 'org.zowe.apiml.sdk', 'attls').versionRef('attlsVersion')
            library('spring_boot_configuration_processor', 'org.springframework.boot', 'spring-boot-configuration-processor').versionRef('springBootVersion')
            library('spring_boot_dependencies', 'org.springframework.boot', 'spring-boot-dependencies').versionRef('springBootVersion')
            library('spring_boot_starter', 'org.springframework.boot', 'spring-boot-starter').versionRef('springBootVersion')
            library('spring_boot_starter_actuator', 'org.springframework.boot', 'spring-boot-starter-actuator').versionRef('springBootVersion')
            library('spring_boot_starter_security', 'org.springframework.boot', 'spring-boot-starter-security').versionRef('springBootVersion')
            library('spring_boot_starter_validation', 'org.springframework.boot', 'spring-boot-starter-validation').versionRef('springBootVersion')
            library('spring_boot_starter_web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef('springBootVersion')
            library('spring_boot_starter_websocket', 'org.springframework.boot', 'spring-boot-starter-websocket').versionRef('springBootVersion')
            library('spring_boot_starter_test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef('springBootVersion')
            library('spring_boot_starter_aop', 'org.springframework.boot', 'spring-boot-starter-aop').versionRef('springBootVersion')
            library('spring_boot_starter_thymeleaf', 'org.springframework.boot', 'spring-boot-starter-thymeleaf').versionRef('springBootVersion')
            library('spring_boot_starter_cache', 'org.springframework.boot', 'spring-boot-starter-cache').versionRef('springBootVersion')
            library('spring_boot_starter_webflux', 'org.springframework.boot', 'spring-boot-starter-webflux').versionRef('springBootVersion')

            library('spring_cloud_hystrix_dashboard', 'org.springframework.cloud', 'spring-cloud-starter-netflix-hystrix-dashboard').versionRef('springCloudVersion')
            library('spring_cloud_loadbalancer', 'org.springframework.cloud', 'spring-cloud-starter-loadbalancer').versionRef('springCloudVersion3')
            library('spring_cloud_starter', 'org.springframework.cloud', 'spring-cloud-starter').versionRef('springCloudVersion3')
            library('spring_cloud_starter_bootstrap', 'org.springframework.cloud', 'spring-cloud-starter-bootstrap').versionRef('springCloudVersion3')
            library('spring_cloud_starter_zuul', 'org.springframework.cloud', 'spring-cloud-starter-netflix-zuul').versionRef('springCloudVersion')
            library('spring_cloud_starter_eureka', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-client').versionRef('springCloudVersion3')
            library('spring_eureka_client_v3', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-client').versionRef('springCloudVersion3')
            library('spring_cloud_starter_eureka_server', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-server').versionRef('springCloudVersion3')
            library('spring_cloud_starter_ribbon', 'org.springframework.cloud', 'spring-cloud-starter-netflix-ribbon').versionRef('springCloudVersion')
            library('spring_cloud_starter_hystrix', 'org.springframework.cloud', 'spring-cloud-starter-netflix-hystrix').versionRef('springCloudVersion')
            library('spring_cloud_starter_turbine', 'org.springframework.cloud', 'spring-cloud-starter-netflix-turbine').versionRef('springCloudVersion')
            library('spring_cloud_starter_gateway', 'org.springframework.cloud', 'spring-cloud-starter-gateway').versionRef('springCloudGatewayVersion')
            library('spring_cloud_commons', 'org.springframework.cloud', 'spring-cloud-commons').versionRef('springCloudCommonsVersion')
            library('spring_cloud_circuit_breaker', 'org.springframework.cloud', 'spring-cloud-starter-circuitbreaker-reactor-resilience4j').versionRef('springCloudCBVersion')

            library('spring_security_config', 'org.springframework.security', 'spring-security-config').versionRef('springSecurityVersion')
            library('spring_security_core', 'org.springframework.security', 'spring-security-core').versionRef('springSecurityVersion')
            library('spring_security_crypto', 'org.springframework.security', 'spring-security-crypto').versionRef('springSecurityVersion')
            library('spring_security_web', 'org.springframework.security', 'spring-security-web').versionRef('springSecurityVersion')

            library('spring_retry', 'org.springframework.retry', 'spring-retry').versionRef('springRetryVersion')
            library('spring_web_test_client', 'io.rest-assured', 'spring-web-test-client').versionRef('springWebTestClientVersion')
            library('spring_bom', 'org.springframework', 'spring-framework-bom').versionRef('springFrameworkVersion')
            library('spring_aop', 'org.springframework', 'spring-aop').versionRef('springFrameworkVersion')
            library('spring_beans', 'org.springframework', 'spring-beans').versionRef('springFrameworkVersion')
            library('spring_context', 'org.springframework', 'spring-context').versionRef('springFrameworkVersion')
            library('spring_context_support', 'org.springframework', 'spring-context-support').versionRef('springFrameworkVersion')
            library('spring_core', 'org.springframework', 'spring-core').versionRef('springFrameworkVersion')
            library('spring_expression', 'org.springframework', 'spring-expression').versionRef('springFrameworkVersion')
            library('spring_messaging', 'org.springframework', 'spring-messaging').versionRef('springFrameworkVersion')
            library('spring_web', 'org.springframework', 'spring-web').versionRef('springFrameworkVersion')
            library('spring_webmvc', 'org.springframework', 'spring-webmvc').versionRef('springFrameworkVersion')
            library('spring_webflux', 'org.springframework', 'spring-webflux').versionRef('springFrameworkVersion')
            library('spring_websocket', 'org.springframework', 'spring-websocket').versionRef('springFrameworkVersion')

            library('archaius', 'com.netflix.archaius', 'archaius-core').versionRef('archaiusVersion')
            library('amazon_aws_autoscaling', 'com.amazonaws', 'aws-java-sdk-autoscaling').versionRef('awsJavaSdkVersion')
            library('amazon_aws_core', 'com.amazonaws', 'aws-java-sdk-core').versionRef('awsJavaSdkVersion')
            library('amazon_aws_ec2', 'com.amazonaws', 'aws-java-sdk-ec2').versionRef('awsJavaSdkVersion')
            library('amazon_aws_route', 'com.amazonaws', 'aws-java-sdk-route53').versionRef('awsJavaSdkVersion')
            library('amazon_aws_sts', 'com.amazonaws', 'aws-java-sdk-sts').versionRef('awsJavaSdkVersion')
            library('apache_commons_codec', 'commons-codec', 'commons-codec').versionRef('commonsCodecVersion')
            library('apache_commons_configuration', 'commons-configuration', 'commons-configuration').versionRef('commonsConfigurationVersion')
            library('apache_commons_lang3', 'org.apache.commons', 'commons-lang3').versionRef('commonsLang3Version')
            library('apache_commons_logging', 'commons-logging', 'commons-logging').versionRef('commonsLoggingVersion')
            library('apache_commons_text', 'org.apache.commons', 'commons-text').versionRef('commonsTextVersion')
            library('commons_fileupload', 'commons-fileupload', 'commons-fileupload').versionRef('commonsFileUploadVersion')

            library('apache_velocity', 'org.apache.velocity', 'velocity-engine-core').versionRef('velocityVersion')
            library('awaitility', 'org.awaitility', 'awaitility').versionRef('awaitilityVersion')
            library('bcprov', 'org.bouncycastle', 'bcprov-jdk15on').versionRef('bouncyCastleVersion')
            library('bcpkix', 'org.bouncycastle', 'bcpkix-jdk15on').versionRef('bouncyCastleVersion')
            library('bootstrap', 'org.webjars', 'bootstrap').versionRef('bootstrapVersion')
            library('commons_io', 'commons-io', 'commons-io').versionRef('commonsIoVersion')
            library('eh_cache', 'net.sf.ehcache', 'ehcache').versionRef('ehCacheVersion')
            library('eureka_client', 'com.netflix.eureka', 'eureka-client').versionRef('eurekaVersion')
            library('eureka_core', 'com.netflix.eureka', 'eureka-core').versionRef('eurekaVersion')
            library('findbugs', 'com.google.code.findbugs', 'jsr305').versionRef('findBugsVersion')
            library('gson', 'com.google.code.gson', 'gson').versionRef('gsonVersion')
            library('guava', 'com.google.guava', 'guava').versionRef('guavaVersion')
            library('hamcrest', 'org.hamcrest', 'hamcrest-all').versionRef('hamcrestVersion')
            library('http_client', 'org.apache.httpcomponents', 'httpclient').versionRef('httpClientVersion')
            library('http_core', 'org.apache.httpcomponents', 'httpcore').versionRef('httpCoreVersion')
            library('hystrix_core', 'com.netflix.hystrix', 'hystrix-core').versionRef('hystrixVersion')
            library('infinispan_core', 'org.infinispan', 'infinispan-core').versionRef('infinispanVersion')
            library('infinispan_lock', 'org.infinispan', 'infinispan-clustered-lock').versionRef('infinispanVersion')
            library('infinispan_jboss_marshalling', 'org.infinispan', 'infinispan-jboss-marshalling').versionRef('infinispanVersion')
            library('jackson_annotations', 'com.fasterxml.jackson.core', 'jackson-annotations').versionRef('jacksonCoreVersion')
            library('jackson_core', 'com.fasterxml.jackson.core', 'jackson-core').versionRef('jacksonCoreVersion')
            library('jackson_databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('jacksonDatabindVersion')
            library('jackson_dataformat_yaml', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('jacksonDataformatYamlVersion')
            library('jackson_mapper_asl', 'org.codehaus.jackson', 'jackson-mapper-asl').versionRef('jacksonMapperAslVersion')
            library('janino', 'org.codehaus.janino', 'janino').versionRef('janinoVersion')
            library('javassist', 'org.javassist', 'javassist').versionRef('javassistVersion')
            library('javax_annotation', 'javax.annotation', 'javax.annotation-api').versionRef('javaxAnnotationVersion')
            library('javax_inject', 'javax.inject', 'javax.inject').version('1')
            library('jakarta_inject', 'jakarta.inject', 'jakarta.inject-api').versionRef('jakartaInjectVersion')
            library('javax_servlet_api', 'javax.servlet', 'javax.servlet-api').versionRef('javaxServletApiVersion')
            library('jaxb_api', 'javax.xml.bind', 'jaxb-api').versionRef('jaxbApiVersion')
            library('jetty_client', 'org.eclipse.jetty', 'jetty-client').versionRef('jettyWebSocketClientVersion')
            library('jetty_http', 'org.eclipse.jetty', 'jetty-http').versionRef('jettyWebSocketClientVersion')
            library('jetty_io', 'org.eclipse.jetty', 'jetty-io').versionRef('jettyWebSocketClientVersion')
            library('jetty_util', 'org.eclipse.jetty', 'jetty-util').versionRef('jettyWebSocketClientVersion')
            library('jetty_websocket_api', 'org.eclipse.jetty.websocket', 'websocket-api').versionRef('jettyWebSocketClientVersion')
            library('jetty_websocket_client', 'org.eclipse.jetty.websocket', 'websocket-client').versionRef('jettyWebSocketClientVersion')
            library('jetty_websocket_common', 'org.eclipse.jetty.websocket', 'websocket-common').versionRef('jettyWebSocketClientVersion')
            library('jettison', 'org.codehaus.jettison', 'jettison').versionRef('jettisonVersion')
            library('json_smart', 'net.minidev', 'json-smart').versionRef('jsonSmartVersion')
            library('jjwt', 'io.jsonwebtoken', 'jjwt-api').versionRef('jjwtVersion')
            library('jjwt_full', 'io.jsonwebtoken', 'jjwt').versionRef('jjwtFullVersion')
            library('jjwt_impl', 'io.jsonwebtoken', 'jjwt-impl').versionRef('jjwtVersion')
            library('jjwt_jackson', 'io.jsonwebtoken', 'jjwt-jackson').versionRef('jjwtVersion')
            library('joda', 'joda-time', 'joda-time').versionRef('jodaVersion')
            library('json', 'org.json', 'json').versionRef('jsonVersion')
            library('json_path', 'com.jayway.jsonpath', 'json-path').versionRef('jsonPathVersion')
            library('json_unit', 'net.javacrumbs.json-unit', 'json-unit').versionRef('jsonUnitVersion')
            library('json_unit_fluent', 'net.javacrumbs.json-unit', 'json-unit-fluent').versionRef('jsonUnitVersion')
            library('jsoup', 'org.jsoup', 'jsoup').versionRef('jsoupVersion')
            library('jsr305', 'com.google.code.findbugs', 'jsr305').versionRef('jsr305Version')
            library('junitJupiter', 'org.junit.jupiter', 'junit-jupiter').versionRef('junitJupiterVersion')
            library('junit_platform_launcher', 'org.junit.platform', 'junit-platform-launcher').versionRef('junitPlatformVersion')
            library('junit_platform_commons', 'org.junit.platform', 'junit-platform-commons').versionRef('junitPlatformVersion')
            library('junit_platform_engine', 'org.junit.platform', 'junit-platform-engine').versionRef('junitPlatformVersion')
            library('jquery', 'org.webjars', 'jquery').versionRef('jqueryVersion')
            library('lettuce', 'io.lettuce', 'lettuce-core').versionRef('lettuceVersion')
            library('log4j_api', 'org.apache.logging.log4j', 'log4j-api').versionRef('log4jVersion')
            library('log4j_to_slf4j', 'org.apache.logging.log4j', 'log4j-to-slf4j').versionRef('log4jVersion')
            library('logback_classic', 'ch.qos.logback', 'logback-classic').versionRef('logbackVersion')
            library('logback_core', 'ch.qos.logback', 'logback-core').versionRef('logbackVersion')
            library('lombok', 'org.projectlombok', 'lombok').versionRef('lombokVersion')
            library('mockito_core', 'org.mockito', 'mockito-core').versionRef('mockitoCoreVersion')
            library('mockito_jupiter', 'org.mockito', 'mockito-junit-jupiter').versionRef('mockitoCoreVersion')
            library('mockito_inline', 'org.mockito', 'mockito-inline').versionRef('mockitoInlineVersion')
            library('netflix_commons_util', 'com.netflix.netflix-commons', 'netflix-commons-util').versionRef('netflixCommonsUtilVersion')
            library('netflix_servo', 'com.netflix.servo', 'servo-core').versionRef('netflixServoVersion')
            library('netty', 'io.netty', 'netty-all').versionRef('nettyVersion')
            library('netty_bom', 'io.netty', 'netty-bom').versionRef('nettyVersion')
            library('netty_buffer', 'io.netty', 'netty-buffer').versionRef('nettyVersion')
            library('netty_codec', 'io.netty', 'netty-codec').versionRef('nettyVersion')
            library('netty_codec_dns', 'io.netty', 'netty-codec-dns').versionRef('nettyVersion')
            library('netty_codec_haproxy', 'io.netty', 'netty-codec-haproxy').versionRef('nettyVersion')
            library('netty_codec_http', 'io.netty', 'netty-codec-http').versionRef('nettyVersion')
            library('netty_codec_http2', 'io.netty', 'netty-codec-http2').versionRef('nettyVersion')
            library('netty_codec_memcache', 'io.netty', 'netty-codec-memcache').versionRef('nettyVersion')
            library('netty_codec_mqtt', 'io.netty', 'netty-codec-mqtt').versionRef('nettyVersion')
            library('netty_codec_redis', 'io.netty', 'netty-codec-redis').versionRef('nettyVersion')
            library('netty_codec_socks', 'io.netty', 'netty-codec-socks').versionRef('nettyVersion')
            library('netty_codec_smtp', 'io.netty', 'netty-codec-smtp').versionRef('nettyVersion')
            library('netty_codec_stomp', 'io.netty', 'netty-codec-stomp').versionRef('nettyVersion')
            library('netty_codec_xml', 'io.netty', 'netty-codec-xml').versionRef('nettyVersion')
            library('netty_common', 'io.netty', 'netty-common').versionRef('nettyVersion')
            library('netty_handler', 'io.netty', 'netty-handler').versionRef('nettyVersion')
            library('netty_handler_proxy', 'io.netty', 'netty-handler-proxy').versionRef('nettyVersion')
            library('netty_reactor_core', 'io.projectreactor.netty', 'reactor-netty-core').versionRef('nettyReactorVersion')
            library('netty_reactor_http', 'io.projectreactor.netty', 'reactor-netty-http').versionRef('nettyReactorVersion')
            library('netty_resolver', 'io.netty', 'netty-resolver').versionRef('nettyVersion')
            library('netty_resolver_dns', 'io.netty', 'netty-resolver-dns').versionRef('nettyVersion')
            library('netty_resolver_dns_native_macos', 'io.netty', 'netty-resolver-dns-native-macos').versionRef('nettyVersion')
            library('netty_transport', 'io.netty', 'netty-transport').versionRef('nettyVersion')
            library('netty_transport_native_epoll', 'io.netty', 'netty-transport-native-epoll').versionRef('nettyVersion')
            library('netty_transport_native_kqueue', 'io.netty', 'netty-transport-native-kqueue').versionRef('nettyVersion')
            library('netty_transport_native_unix_common', 'io.netty', 'netty-transport-native-unix-common').versionRef('nettyVersion')
            library('netty_transport_rxtx', 'io.netty', 'netty-transport-rxtx').versionRef('nettyVersion')
            library('netty_transport_sctp', 'io.netty', 'netty-transport-sctp').versionRef('nettyVersion')
            library('netty_transport_udt', 'io.netty', 'netty-transport-udt').versionRef('nettyVersion')
            library('nimbusJoseJwt', 'com.nimbusds', 'nimbus-jose-jwt').versionRef('nimbusJoseJwtVersion')
            library('openapidiff', 'org.openapitools.openapidiff', 'openapi-diff-core').versionRef('openApiDiffVersion')
            library('picocli', 'info.picocli', 'picocli').versionRef('picocliVersion')
            library('picocliCodegen', 'info.picocli', 'picocli-codegen').versionRef('picocliVersion')
            library('reactor', 'io.projectreactor', 'reactor-core').versionRef('reactorVersion')
            library('reactorTest', 'io.projectreactor', 'reactor-test').versionRef('reactorVersion')
            library('rest_assured', 'io.rest-assured', 'rest-assured').versionRef('restAssuredVersion')
            library('rest_assured_json_path', 'io.rest-assured', 'json-path').versionRef('restAssuredVersion')
            library('rest_assured_xml_path', 'io.rest-assured', 'xml-path').versionRef('restAssuredVersion')
            library('ribbon-eureka', 'com.netflix.ribbon', 'ribbon-eureka').versionRef('ribbonVersion')
            library('slf4j_api', 'org.slf4j', 'slf4j-api').versionRef('slf4jVersion')
            library('snakeyaml', 'org.yaml', 'snakeyaml').versionRef('snakeyamlVersion')
            library('spring4Mvc', 'org.springframework', 'spring-webmvc').versionRef('spring4Version')
            library('spring4Test', 'org.springframework', 'spring-test').versionRef('spring4Version')
            library('springFox', 'io.springfox', 'springfox-swagger2').versionRef('springFoxVersion')
            library('spring_doc', 'org.springdoc', 'springdoc-openapi-ui').versionRef('springDocVersion')
            library('spring_mock_mvc', 'io.rest-assured', 'spring-mock-mvc').versionRef('restAssuredVersion')
            library('swagger_core', 'io.swagger', 'swagger-core').versionRef('swaggerCoreVersion')
            library('swagger3_core', 'io.swagger.core.v3', 'swagger-core').versionRef('swagger3CoreVersion')
            library('swagger3_parser', 'io.swagger.parser.v3', 'swagger-parser-v3').versionRef('swagger3ParserVersion')
            library('swagger_inflector', 'io.swagger', 'swagger-inflector').versionRef('swaggerInflector')
            library('swagger_models', 'io.swagger', 'swagger-models').versionRef('swaggerCoreVersion')
            library('thymeleafSpring', 'org.thymeleaf', 'thymeleaf-spring5').versionRef('thymeleafVersion')
            library('thymeleaf', 'org.thymeleaf', 'thymeleaf').versionRef('thymeleafVersion')
            library('tomcat_annotations_api', 'org.apache.tomcat', 'tomcat-annotations-api').versionRef('tomcatVersion')
            library('tomcat_coyote', 'org.apache.tomcat', 'tomcat-coyote').versionRef('tomcatVersion')
            library('tomcat_embed_core', 'org.apache.tomcat.embed', 'tomcat-embed-core').versionRef('tomcatVersion')
            library('tomcat_embed_el', 'org.apache.tomcat.embed', 'tomcat-embed-el').versionRef('tomcatVersion')
            library('tomcat_embed_jasper', 'org.apache.tomcat.embed', 'tomcat-embed-jasper').versionRef('tomcatVersion')
            library('tomcat_embed_logging-juli', 'org.apache.tomcat.embed', 'tomcat-embed-logging-juli').versionRef('tomcatVersion')
            library('tomcat_embed_websocket', 'org.apache.tomcat.embed', 'tomcat-embed-websocket').versionRef('tomcatVersion')
            library('woodstox', 'com.fasterxml.woodstox', 'woodstox-core').versionRef('woodstoxVersion')
            library('xstream', 'com.thoughtworks.xstream', 'xstream').versionRef('xstreamVersion')

            // Sample apps only
            library('jersey_container_servlet_core', 'org.glassfish.jersey.containers', 'jersey-container-servlet-core').versionRef('jerseyVersion')
            library('jersey_hk2', 'org.glassfish.jersey.inject', 'jersey-hk2').versionRef('jerseyVersion')
            library('jersey_media_json_jackson', 'org.glassfish.jersey.media', 'jersey-media-json-jackson').versionRef('jerseyVersion')
            library('jersey_server', 'org.glassfish.jersey.core', 'jersey-server').versionRef('jerseyVersion')
            library('jersey_test_provider_jdk_http', 'org.glassfish.jersey.test-framework.providers', 'jersey-test-framework-provider-jdk-http').versionRef('jerseyVersion')

            library('jersey_client4', 'com.sun.jersey.contribs', 'jersey-apache-client4').versionRef('jerseySunVersion')
            library('jersey_client', 'com.sun.jersey', 'jersey-client').versionRef('jerseySunVersion')
            library('jersey_core', 'com.sun.jersey', 'jersey-core').versionRef('jerseySunVersion')

            library('swagger_jaxrs2', 'io.swagger.core.v3', 'swagger-jaxrs2').versionRef('swaggerJaxrs2Version')

            library('spring_boot_gradle_plugin', 'org.springframework.boot', 'spring-boot-gradle-plugin').versionRef('springBootVersion')
            library('gradle_git_properties', 'gradle.plugin.com.gorylenko.gradle-git-properties', 'gradle-git-properties').versionRef('gradleGitPropertiesVersion')
            library('jgit', 'org.eclipse.jgit', 'org.eclipse.jgit').versionRef('jgitVersion')
            library('github_classpath', 'io.github.classgraph', 'classgraph').versionRef('githubClassgraphVersion')
            library('gradle_node_plugin', 'com.github.node-gradle', 'gradle-node-plugin').versionRef('gradleNodeVersion')
            library('gradle_sonar_plugin', 'org.sonarsource.scanner.gradle', 'sonarqube-gradle-plugin').versionRef('sonarGradlePluginVersion')
            library('gradle_release', 'net.researchgate', 'gradle-release').versionRef('gradleReleaseVersion')
            library('gradle_licencer', 'gradle.plugin.org.cadixdev.gradle', 'licenser').versionRef('gradleLicencerVersion')
            library('gradle_dependency_check', 'org.owasp', 'dependency-check-gradle').versionRef('gradleDependencyCheckVersion')
            library('gradle_jib_plugin', 'gradle.plugin.com.google.cloud.tools', 'jib-gradle-plugin').versionRef('gradleJibPluginVersion')
            library('gradle_test_logger', 'com.adarshr', 'gradle-test-logger-plugin').versionRef('gradleTestLoggerVersion')
            library('gradle_tomcat_plugin', 'com.bmuschko', 'gradle-tomcat-plugin').versionRef('gradleTomcatPluginVersion')
            library('micronaut_http_client', 'io.micronaut', 'micronaut-http-client').versionRef('micronautVersion')

            plugin('gradle_git_properties', 'com.gorylenko.gradle-git-properties').versionRef('gradleGitPropertiesVersion')
            plugin('gradle_node', 'com.github.node-gradle.node').versionRef('gradleNodeVersion')
            plugin('task_tree', 'com.dorongold.task-tree').versionRef('taskTreeVersion')
            plugin('test_logger', 'com.adarshr.test-logger').versionRef('testLoggerVersion')
            plugin('micronaut_application', 'io.micronaut.application').versionRef('micronautPluginVersion')
            plugin('shadow', 'com.github.johnrengelman.shadow').versionRef('shadowVersion')
            plugin('gradle_tomcat', 'com.bmuschko.tomcat').versionRef('gradleTomcatPluginVersion')
            plugin('micronaut_library', 'io.micronaut.library').versionRef('micronautPluginVersion')
        }
    }
}
