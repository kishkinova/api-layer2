buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6300
def debugPort = 5120
def componentName = "zaas-service"

setJib(componentName, javaAgentPort, debugPort)
jib.container.mainClass = 'org.zowe.apiml.gateway.GatewayApplication'

ext['netty.version'] = libs.versions.netty.get()

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-security-common')
    api project(':apiml-tomcat-common')
    api project(':apiml-extension-loader')

    implementation libs.zowe.zos.utils
    implementation libs.spring.boot.starter.webflux
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.cache
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.boot.starter.security

    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.spring.cloud.starter.eureka
    implementation libs.spring.cloud.commons
    implementation libs.spring.cloud.starter.bootstrap
    implementation libs.jjwt
    implementation libs.nimbus.jose.jwt

    implementation libs.logback.core
    implementation libs.logback.classic

    implementation libs.commons.io
    implementation libs.spring.aop
    implementation libs.spring.beans
    implementation libs.spring.context
    implementation libs.spring.context.support
    implementation libs.spring.core
    implementation libs.spring.expression
    implementation libs.spring.web
    implementation libs.spring.webmvc
    implementation libs.spring.webflux

    implementation libs.eh.cache

    implementation libs.jjwt.impl
    runtimeOnly libs.jjwt.jackson

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.spring.boot.configuration.processor

    testImplementation libs.awaitility
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.spring.mock.mvc
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.json.smart
    testRuntimeOnly libs.http.client
    testRuntimeOnly libs.http.client
    testImplementation libs.rest.assured
    testImplementation libs.rest.assured.json.path
    testImplementation libs.rest.assured.xml.path
    testImplementation libs.jakarta.inject

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation(testFixtures(project(":integration-tests")))
}

bootJar {
    archiveFileName = "zaas-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'zaas-fat-jar'

            artifact bootJar
        }
    }
}
