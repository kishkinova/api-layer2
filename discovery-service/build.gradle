buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6301
def debugPort = 5121
def componentName = "discovery-service"

setJib(componentName, javaAgentPort, debugPort)
jib.container.args.add('--spring.profiles.active=https')


springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-tomcat-common')
    api project(':apiml-security-common')
    api project(':security-service-client-spring')
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.websocket
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.cloud.starter.eureka.server
    implementation libs.spring.cloud.circuit.breaker
    implementation libs.apache.commons.lang3
    implementation libs.http.client5
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jackson.dataformat.yaml
    implementation libs.jetty.client
    implementation libs.jetty.http
    implementation libs.jetty.io
    implementation libs.jetty.util
    implementation libs.xstream
    implementation libs.commons.io
    implementation libs.guava


    compileOnly libs.lombok
    annotationProcessor libs.lombok

    implementation libs.netflix.servo

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.2.1'
    testImplementation libs.json.smart
    testImplementation libs.awaitility
    testImplementation libs.rest.assured
    testImplementation(testFixtures(project(":integration-tests")))
}


bootJar {
    archiveFileName = "discovery-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'discovery-fat-jar'

            artifact bootJar
        }
    }
}
