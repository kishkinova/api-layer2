logging:
    level:
        ROOT: INFO
        com.ca.mfaas: INFO
        org.springframework: WARN
        org.apache.catalina: WARN
        com.netflix: WARN
        com.netflix.discovery: ERROR
        com.netflix.config: ERROR
        com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient: OFF
        com.netflix.discovery.DiscoveryClient: OFF
        org.springframework.boot.web.embedded.tomcat.TomcatWebServer: INFO
        com.sun.jersey.server.impl.application.WebApplicationImpl: WARN

apiml:
    # The `apiml` node contains API Mediation Layer specific configuration
    service:
        # The `apiml.service` node contains information required by any APIML service
        id: discovery  # Service ID of this service. It is fixed for APIML Discovery Service
        hostname: localhost  # Hostname that is advertised in Eureka. Default is valid only for localhost
        port: 10011  # Default port name for discovery service
        ipAddress: 127.0.0.1  # IP address that is advertised in Eureka. Default is valid only for localhost
        preferIpAddress: false
    discovery:
        # The `apiml.discovery` node contains discovery-service only configuration
        userid: eureka  # Userid that Eureka server will use to check authentication of its clients (other services)
        password: password  # Password that Eureka server will use to check authentication of its clients (other services)
        allPeersUrls: http://${apiml.discovery.userid}:${apiml.discovery.password}@${apiml.service.hostname}:${apiml.service.port}/eureka/

spring:
    application:
        name: ${apiml.service.id}
    cloud:
        client:
            hostname: ${apiml.service.hostname}
            ipAddress: ${apiml.service.ipAddress}
    output:
        ansi:
            enabled: detect

server:
    address: ${apiml.service.ipAddress}
    port: ${apiml.service.port}
    ssl:
        enabled: false

eureka:
    instance:
        hostname: ${apiml.service.hostname}
        ipAddress: ${apiml.service.ipAddress}
        port: ${server.port}
        securePort: ${server.port}
        nonSecurePortEnabled: true
        securePortEnabled: false
        preferIpAddress: ${apiml.service.preferIpAddress}
        statusPageUrl: http://${apiml.service.hostname}:${apiml.service.port}/application/info
        healthCheckUrl: http://${apiml.service.hostname}:${apiml.service.port}/application/health
    client:
        registerWithEureka: true
        fetchRegistry: true
        region: default
        serviceUrl:
            defaultZone: ${apiml.discovery.allPeersUrls}

management:
    endpoints:
        web:
            base-path: /application
    health:
        defaults:
            enabled: false

---
spring:
    profiles: https

apiml:
    discovery:
        allPeersUrls: https://${apiml.service.hostname}:${apiml.service.port}/eureka/

server:
    ssl:
        enabled: true
        clientAuth: want
        protocol: TLSv1.2
        ciphers: TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
        keyStoreType: PKCS12
        trustStoreType: PKCS12
        trustStoreRequired: true

eureka:
    instance:
        nonSecurePortEnabled: false
        securePortEnabled: true
        homePageUrl: https://${apiml.service.hostname}:${apiml.service.port}/
        statusPageUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/info
        healthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/health
        secureHealthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/health
    client:
        serviceUrl:
            defaultZone: ${apiml.discovery.allPeersUrls}

---
spring:
    profiles: debug

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: health,info,loggers

logging:
    level:
        ROOT: INFO
        com.ca.mfaas: DEBUG
        org.springframework: INFO
        org.apache.catalina: INFO
        com.netflix: INFO
        com.sun.jersey.server.impl.application.WebApplicationImpl: INFO

---
spring:
    profiles: diag

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: "*"

---
spring:
    profiles: dev
    profiles.include:
        - debug
        - diag
