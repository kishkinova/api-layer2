buildscript {
    repositories {
        maven {
            setUrl('https://plugins.gradle.org/m2/')
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:1.4.0'
    }
}

plugins {
    id "com.adarshr.test-logger" version "3.0.0"
    id "java-test-fixtures"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libraries.http_client
    testImplementation libraries.eureka_client
    testImplementation libraries.jackson_dataformat_yaml
    testImplementation libraries.json_path
    testImplementation libraries.spring_boot_starter_websocket
    testImplementation libraries.spring_boot_starter_actuator
    testImplementation libraries.spring_boot_starter_webflux
    testImplementation libraries.spring_web_test_client
    testImplementation libraries.json
    testImplementation libraries.jjwt
    testImplementation libraries.reactorTest
    testImplementation project(':apiml-security-common')
    testImplementation project(':zaas-client')

    testImplementation libraries.hamcrest
    testImplementation libraries.rest_assured
    testImplementation libraries.awaitility
    testImplementation libraries.logback_classic
    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok
    testImplementation libraries.jsoup
    testImplementation libraries.rest_assured
    testImplementation libraries.jackson_annotations
    testImplementation libraries.jackson_core
    testImplementation libraries.jackson_databind
    testImplementation libraries.jackson_dataformat_yaml
    testImplementation libraries.javax_servlet_api
    testImplementation libraries.nimbusJoseJwt
    runtimeOnly libraries.jjwt_impl
    runtimeOnly libraries.jjwt_jackson

    testFixturesImplementation(project(':apiml-security-common'))
    testFixturesImplementation libraries.spring_core
    testFixturesImplementation libraries.slf4j_api
    testFixturesImplementation libraries.rest_assured
    testFixturesImplementation libraries.lombok
    testFixturesImplementation libraries.http_client

    testFixturesAnnotationProcessor libraries.lombok
}

jar {
    archiveBaseName.set("integration-tests")
}

test.enabled = false

apply plugin: 'java'

test {
    testLogging.showStandardStreams = true
    systemProperty "externalJenkinsToggle", System.getProperty("externalJenkinsToggle")
}

task startUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and runnig"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task environmentCheck(type: Test) {
    group 'integration tests'
    description "Check that the Integration environment is healthy"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'EnvironmentCheck'
    }
    outputs.upToDateWhen { false }
}


task runStartUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and running"

    systemProperties System.properties
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task runWebsocketTests(type: Test) {
    group "integration tests"
    description "Runs tests for WebSockets"

    systemProperties System.properties
    useJUnitPlatform {
        includeTags 'WebsocketTest'
    }
    outputs.upToDateWhen { false }
}

task runIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    dependsOn startUpCheck
    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'HATest',
            'ChaoticHATest'
        )
    }
}

task runLocalIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run integration tests that are not dependent on mainframe"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'MainframeDependentTests',
            'AdditionalLocalTest',
            'HATest',
            'ChaoticHATest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllLocalIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run integration tests for additional local services"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'MainframeDependentTests',
            'HATest',
            'ChaoticHATest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsNormal(type: Test) {
    group "Integration tests"
    description "Run all integration tests normal"
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'NotForMainframeTest',
            'zOSMFAuthTest',
            'SAFAuthTest',
            'HATest',
            'ChaoticHATest',
            'NotAttlsTest'
        )

    }
}

task runAllIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run all integration tests"

    dependsOn startUpCheck, runAllIntegrationTestsNormal
    tasks.findByName('runAllIntegrationTestsNormal').mustRunAfter 'startUpCheck'
    String itags = System.getProperty("includeTags") ?
        System.getProperty("includeTags") : 'zOSMFAuthTest'
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags(
            itags
        )
    }
    outputs.upToDateWhen { false }
}

task runTestWithoutStartupCheck(type: Test) {
    group "Integration tests"
    description "Run integration test without startup check"

    useJUnitPlatform()

    systemProperties System.properties

    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsForZoweTesting(type: Test) {
    group "Integration tests"
    description "Run all integration tests for Zowe testing"

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'TestsNotMeantForZowe',
            'DiscoverableClientDependentTest',
            'HATest',
            'ChaoticHATest'
        )
    }
    outputs.upToDateWhen { false }
}

task runCITests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'HATest',
            'ChaoticHATest'
        )
    }
}

task runContainerTests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }
    systemProperty "environment.config", "-docker"
    systemProperty "environment.offPlatform", "true"

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest'
        )
    }
}

task runMainFrameTests(type: Test) {
    group "integration tests"
    description "Run tests that verify integration with MainFrame"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'MainframeDependentTests'
        )
    }
    outputs.upToDateWhen { false }
}


task runBaseTests(type: Test) {
    group "integration tests"
    description "Run base tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CatalogTest',
            'GatewayTest',
            'DiscoveryServiceTest',
            'WebsocketTest',
            'GeneralAuthenticationTest',
            'DiscoverableClientDependentTest',
            'CachingServiceTest',
            'MetricsServiceTest',
            'WebsocketTest'
        )
        excludeTags(
            'MainframeDependentTests',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest'
        )
    }
}

task runRegistrationTests(type: Test) {
    group "integration tests"
    description "Run tests verifying registration and deregistration"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'RegistrationTest'
        )
    }
}

task runIdPrefixReplacerTests(type: Test) {
    group "integration tests"
    description "Run Integration Test verifying the service ID prefix replacer mechanism"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ServiceIdPrefixReplacerTest'
        )
    }
}

task runSafAuthTest(type: Test) {
    group "integration tests"
    description "Run SAF dependant authentication tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'SAFAuthTest'
        )
    }
}
task runZosmfAuthTest(type: Test) {
    group "integration tests"
    description "Run zOSMF dependant authentication tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'zOSMFAuthTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runX509AuthTest(type: Test) {
    group "integration tests"
    description "Run x509 dependant authentication tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'X509Test'
        )
    }
}

task runCachingServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runInfinispanServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service with infinispan storage tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest',
            'InfinispanStorageTest'
        )
    }
}

task runBaseTestsInternalPort(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    dependsOn runBaseTests
    systemProperties System.properties
    systemProperty "gateway.port", System.getProperty("internal.gateway.port")

}

task runHATests(type: Test) {
    group "Integration tests"
    description "Run tests verifying High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'HATest'
        )
    }

}

task runLbHaTests(type: Test) {
    group "Integration tests"
    description "Run tests verifying Load balancing under High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'LbHaTest'
        )
    }

}

task runChaoticHATests(type: Test) {
    group "Integration tests"
    description "Run Chaotic tests verifying High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ChaoticHATest'
        )
    }

}
