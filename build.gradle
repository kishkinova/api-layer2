import java.util.regex.Matcher

//noinspection GroovyAssignabilityCheck
group 'org.zowe.apiml'

buildscript {
    ext.mavenRepositories = {
        maven {
            url artifactoryMavenSnapshotRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url artifactoryMavenRepo
            credentials {
                username mavenUser
                password mavenPassword
            }
        }
        maven {
            url "https://artifacts-oss.talend.com/nexus/content/repositories/TalendOpenSourceRelease/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    repositories mavenRepositories

    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'gradle.plugin.org.cadixdev.gradle:licenser:0.6.1'
        classpath 'org.owasp:dependency-check-gradle:3.3.4'
        classpath 'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:3.2.1'
    }
}

apply from: 'gradle/versions.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/lite.gradle'

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'eclipse'
    apply plugin: 'java-test-fixtures'

    repositories mavenRepositories

    sourceCompatibility = 1.8
    version = version

    idea {
        module {
            //noinspection GroovyAssignabilityCheck
            outputDir file('build/classes/main')
            //noinspection GroovyAssignabilityCheck
            testOutputDir file('build/classes/test')
            downloadJavadoc = true
            downloadSources = true
        }
    }

    configurations.all {
        exclude group: "javax.servlet", module: "servlet-api"

        resolutionStrategy.dependencySubstitution {
            substitute(module('aopalliance:aopalliance:1.0')).using(module('org.glassfish.hk2.external:aopalliance-repackaged:3.0.3'))
            // versions are clashing - Micronaut enabler requires both versions, Gradle as default selected newer one
            //substitute(module('javax.inject:javax.inject:1')).using(module('jakarta.inject:jakarta.inject-api:1.0.5'))
            substitute(module('javax.activation:javax.activation-api:1.0')).using(module('jakarta.activation:jakarta.activation-api:1.2.2'))
        }
    }

    dependencies {
        constraints {
            compileOnly libraries.values()
            implementation libraries.values()
            testImplementation libraries.values()
            testFixturesImplementation libraries.values()

            implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.3'
            implementation 'com.jayway.jsonpath:json-path:2.7.0'
            implementation 'com.netflix.archaius:archaius-core:0.7.7'
            implementation 'com.netflix.hystrix:hystrix-core:1.5.18'
            implementation 'com.netflix.netflix-commons:netflix-commons-util:0.3.0'
            implementation 'com.sun.jersey:jersey-client:1.19.4'
            implementation 'com.sun.jersey:jersey-core:1.19.4'
            implementation 'commons-codec:commons-codec:1.15'
            implementation 'commons-configuration:commons-configuration:1.10'
            implementation 'commons-io:commons-io:2.11.0'
            implementation 'io.projectreactor:reactor-core:3.4.29'
            implementation 'io.reactivex:rxjava:1.3.8'
            implementation 'io.swagger.core.v3:swagger-annotations:2.2.8'
            implementation 'io.swagger.core.v3:swagger-core:2.2.8'
            implementation 'io.swagger.core.v3:swagger-models:2.2.8'
            implementation 'io.swagger.parser.v3:swagger-parser-core:2.0.25'
            implementation 'io.swagger.parser.v3:swagger-parser-v3:2.0.25'
            implementation 'jakarta.activation:jakarta.activation-api:1.2.2'
            implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
            implementation 'joda-time:joda-time:2.10.5'
            implementation 'net.bytebuddy:byte-buddy:1.12.9'
            implementation 'net.bytebuddy:byte-buddy-agent:1.12.9'
            implementation 'org.apache.commons:commons-lang3:3.12.0'
            implementation 'org.codehaus.woodstox:stax2-api:4.2.1'
            implementation 'org.hamcrest:hamcrest:2.2'
            implementation 'org.glassfish.hk2.external:aopalliance-repackaged:3.0.3'
            implementation 'org.javassist:javassist:3.22.0-CR2'
            implementation 'org.reactivestreams:reactive-streams:1.0.4'

            implementation 'junit:junit:4.12'
        }
    }
}

subprojects {
    license {
        header = rootProject.file('.licence/EPL-2.0-licence-header.txt')
        exclude '**/*.yml', '**/*.yaml', '**/*.json', '**/static', '**/*.sh', '**/*.txt', '**/*.p12', '**/*.xml', '**/*.jsp', '**/*.html', '**/*.jks', '**/*.properties'
    }

    tasks.withType(Test) {
        maxParallelForks = 1
    }

    test {
        useJUnitPlatform()
    }

   dependencies {
       testImplementation libraries.junitJupiter
       testImplementation libraries.mockito_jupiter

       testImplementation  libraries.junit_platform_launcher

       //For Idea
       testImplementation  libraries.junit_platform_commons
       testImplementation  libraries.junit_platform_engine
   }

    configurations.all {
        exclude group: 'org.glassfish', module: 'jakarta.el'
        exclude group: 'commons-httpclient', module: 'commons-httpclient'
    }
}

task buildCore(dependsOn: [':gateway-service:build', ':discovery-service:build', ':api-catalog-services:build', ':api-catalog-ui:build',
                           ':discoverable-client:build', ':zaas-client:build', ':apiml-sample-extension:build']) {
    description "Build core components"
    group "build"
}

task runIntegrationTests(dependsOn: ":integration-tests:runIntegrationTests") {
    description "Run integration tests"
    group "Integration tests"
}

task runAllIntegrationTests(dependsOn: ":integration-tests:runAllIntegrationTests") {
    description "Run all integration tests"
    group "Integration tests"
}

task environmentCheck(dependsOn: ":integration-tests:environmentCheck") {
    description "Environment check"
    group "Integration tests"
}

task runCITests(dependsOn: [":integration-tests:runCITests"]) {
    description "Run Integration Test Without MF Dependencies"
    group "Integration tests"
}

task runStartUpCheck(dependsOn: [":integration-tests:runStartUpCheck"]) {
    description "Run Startup check"
    group "Integration tests"
}

task runContainerTests(dependsOn: [":integration-tests:runContainerTests"]) {
    description "Run Integration Test Without MF Dependencies"
    group "Integration tests"
}

task runRegistrationTests(dependsOn: [":integration-tests:runRegistrationTests"]) {
    description "Run Integration Test verifying registration and deregistration"
    group "Integration tests"
}

task runMainFrameTests(dependsOn: ":integration-tests:runMainFrameTests") {
    description "Run only tests related to the MainFrame"
    group "Integration tests"
}

task publishAllVersions {
    group 'Zowe Publishing'
    description 'Publish ZIP file and SDK libraries to Zowe Artifactory'
    doLast {
        println 'Published ZIP file and libraries'
    }
}

task nodejsClean(type: Delete) {
    group = 'npm'
    if (cleanNode == 'true') {
        delete 'api-catalog-ui/tools/nodejs', 'api-catalog-ui/tools/npm', 'api-catalog-ui/tools/yarn'
        delete 'metrics-service-ui/tools/nodejs', 'metrics-service-ui/tools/npm'
        delete 'onboarding-enabler-nodejs-sample-app/tools/nodejs', 'onboarding-enabler-nodejs-sample-app/tools/npm', 'onboarding-enabler-nodejs-sample-app/tools/yarn'
    }
}


task runBaseTests(dependsOn: ":integration-tests:runBaseTests") {
    description "Run base tests"
    group "Integration tests"
}
task runSafAuthTest(dependsOn: ":integration-tests:runSafAuthTest") {
    description "Run SAF dependant authentication tests only"
    group "Integration tests"
}
task runZosmfAuthTest(dependsOn: ":integration-tests:runZosmfAuthTest") {
    description "Run zOSMF dependant authentication tests only"
    group "Integration tests"
}
task runX509AuthTest(dependsOn: ":integration-tests:runX509AuthTest") {
    description "Run x509 dependant authentication tests only"
    group "Integration tests"
}
task runBaseTestsInternalPort(dependsOn: ":integration-tests:runBaseTestsInternalPort") {
    description "Run base tests on internal port"
    group "Integration tests"
}
task runCachingServiceTests(dependsOn: ":integration-tests:runCachingServiceTests") {
    description "Run base tests on internal port"
    group "Integration tests"
}
task runHATests(dependsOn: ":integration-tests:runHATests") {
    description "Run HA tests tests only"
    group "Integration tests"
}
task runChaoticHATests(dependsOn: ":integration-tests:runChaoticHATests") {
    description "Run Chaotic HA tests tests only"
    group "Integration tests"
}

clean.dependsOn nodejsClean

publishAllVersions.dependsOn publishSdkArtifacts

//-----------Release part start
apply plugin: 'net.researchgate.release'

ext.releaseScope = project.hasProperty('release.scope') ? project.getProperty('release.scope') : 'patch'

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = '[Gradle Release plugin]'
    preTagCommitMessage = '[skip ci] Before tag commit'
    tagCommitMessage = 'Release:'
    tagTemplate = 'v${version}'
    newVersionCommitMessage = 'Create new version:'
    versionPropertyFile = 'gradle.properties'

    if (releaseScope == 'minor') {
        versionPatterns = [
            /[.]*\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll(".${(m[0][1] as int) + 1}.0") }
        ]
    } else if (releaseScope == 'major') {
        versionPatterns = [
            /(\d+)\.(\d+)\.(\d+)[.]*/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0.0") }
        ]
    } else {
        versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
        ]
    }

    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = ''
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = true
        signTag = false
    }
}

afterReleaseBuild.dependsOn publishAllVersions
//-----------Release part end


if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
