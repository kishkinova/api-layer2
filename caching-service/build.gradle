buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6306
def debugPort = 5126
def componentName = "caching-service"

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-utility')
    api project(':common-service-core')
    api project(':apiml-tomcat-common')
    api project(':onboarding-enabler-spring')


    implementation libs.zowe.attls
    implementation libs.jjwt
    implementation libs.jjwt.impl
    implementation libs.jjwt.jackson
    implementation libs.infinispan.core
    implementation libs.infinispan.jboss.marshalling
    implementation libs.infinispan.lock

    implementation libs.spring.doc
    implementation libs.spring.boot.starter
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.retry
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.cloud.commons
    implementation libs.spring.cloud.starter.hystrix
    implementation libs.lettuce
    implementation libs.spring.security.web
    implementation libs.spring.security.config
    implementation libs.spring.security.core
    implementation libs.spring.security.crypto

    implementation libs.tomcat.annotations.api
    implementation libs.tomcat.embed.core
    implementation libs.tomcat.embed.el
    implementation libs.tomcat.embed.websocket
    implementation libs.xstream
    implementation libs.spring.aop
    implementation libs.spring.beans
    implementation libs.spring.context
    implementation libs.spring.context.support
    implementation libs.spring.core
    implementation libs.spring.expression
    implementation libs.spring.messaging
    implementation libs.spring.web
    implementation libs.spring.webflux
    implementation libs.spring.webmvc
    implementation libs.spring.websocket
    implementation libs.bcprov;
    implementation libs.bcpkix;
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind

    implementation libs.logback.core
    implementation libs.logback.classic

    implementation libs.guava
    implementation libs.gson
    implementation libs.janino
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation libs.json.smart
    testImplementation libs.hamcrest
    testImplementation libs.rest.assured
    testImplementation(testFixtures(project(":integration-tests")))
}

jar {
    enabled true
    archiveClassifier = ""
}

bootJar.archiveFileName = bootJar.archiveBaseName.get() + ".jar"
