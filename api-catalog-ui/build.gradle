plugins {
    id "com.github.node-gradle.node" version "3.0.1"
}

////todo remove
//node {
//    // Version of node to use.
//    version = rootProject.nodejsVersion
//
//    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'
//
//    // If true, it will download node using above parameters.
//    // If false, it will try to use globally installed node.
//    download = false
//
//    // Set the work directory for unpacking node
//    workDir = file("${project.projectDir}/tools/nodejs")
//
//    // Set the work directory for NPM
//    npmWorkDir = file("${project.projectDir}/tools/npm")
//
//    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/frontend")
//}

node {
    // Whether to download and install a specific Node.js version or not
    // If false, it will use the globally installed Node.js
    // If true, it will download node using above parameters
    // Note that npm is bundled with Node.js
    download = true

    // Version of node to download and install (only used if download is true)
    // It will be unpacked in the workDir
    version = rootProject.nodejsVersion

    // Base URL for fetching node distributions
    // Only used if download is true
    // Change it if you want to use a mirror
    // Or set to null if you want to add the repository on your own.
    distBaseUrl = "https://nodejs.org/dist"

    // The npm command executed by the npmInstall task
    // By default it is install but it can be changed to ci
    npmInstallCommand = "install"

    // The directory where Node.js is unpacked (when download is true)
    workDir = file("${project.projectDir}/tools/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.projectDir}/tools/npm")

    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${project.projectDir}/tools/yarn")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${project.projectDir}/frontend")

    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    nodeProxySettings = ProxySettings.SMART
}

// =================================================
//
//  Please manage all task dependencies in NPM and
//  not here. This should be just a wrapper around
//  package.json
//
// =================================================

task jsClean(type: Delete) {
    group = 'node'
    delete 'bin', 'build', 'frontend/test-results', 'frontend/coverage', 'frontend/build', 'tools/nodejs'
}
clean.dependsOn jsClean

////todo remove
//task npmTest(type: NpmTask) {
//    group = 'node'
//    description = "Javascript unit tests"
//    args = ['run', 'test']
//}

////todo remove
//task npmE2ETests(type: NpmTask, dependsOn: ':integration-tests:startUpCheck') {
//    group = 'node'
//    description = "Javascript End to End Tests"
//
//    args = ['run', 'cy:e2e:zowe-ci']
//}


task npmBuild(type: NpmTask) {
    group = 'node'
    description = "Produces errors in intellij run window but tests pass, dont panic. You can verify running the npm test directly"
    inputs.dir('frontend/src').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir('frontend/public').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.files('frontend/.env*').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('frontend/.eslintrc').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('frontend/package.json').withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir('frontend/build')
    outputs.dir('frontend/test-resultstest-report-unit.html')
    outputs.dir('frontend/coverage')
    outputs.cacheIf { true }

    args = ['run', 'build']

}
build.dependsOn npmBuild

jar {
    enabled false
}
