name: Containers - Build, Test

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

jobs:
    PublishJibContainers:
        runs-on: ubuntu-latest
        timeout-minutes: 6

        steps:
            -   uses: actions/checkout@v2
                with:
                    ref: ${{ github.head_ref }}
            -   name: Set up JDK 1.8
                uses: actions/setup-java@v1
                with:
                    java-version: 1.8
            -   name: Grant execute permission for gradlew
                run: chmod +x gradlew
            -   name: Cache Gradle packages
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.gradle/caches
                        ~/.gradle/wrapper
                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                    restore-keys: |
                        ${{ runner.os }}-gradle001-
            -   name: Cache Node.js modules
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.npm
                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
                    restore-keys: |
                        ${{ runner.OS }}-node001-
            -   name: Build with Gradle
                run: >
                    ./gradlew jib -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }} -Pzowe.docker.password=${{ secrets.PERSONAL_JB_TOKEN }} -Pzowe.docker.username=balhar-jakub -Pzowe.docker.container=ghcr.io/balhar-jakub/ -Pzowe.docker.tag=${{ github.event.pull_request.number || 'latest' }}
            -   name: Cleanup Gradle Cache
                run: |
                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
                    rm -f ~/.gradle/caches/modules-2/gc.properties
                    rm -rf ~/.gradle/caches/build-cache-1

    CITests:
        needs: PublishJibContainers
        runs-on: ubuntu-latest
        container: ubuntu:latest
        timeout-minutes: 6

        services:
            api-catalog-services:
                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
                volumes:
                    - /__w/api-layer/api-layer/config/docker/api-defs:/api-defs
                env:
                    APIML_DISCOVERY_STATICAPIDEFINITIONSDIRECTORIES: /usr/local/etc/config/api-defs
            caching-service:
                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
            discoverable-client:
                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
            discovery-service:
                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
                volumes:
                    - /__w/api-layer/api-layer/config/docker/api-defs:/api-defs
            gateway-service:
                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
            mock-zosmf:
                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}

        steps:
            -   uses: actions/checkout@v2
                with:
                    ref: ${{ github.head_ref }}
            -   name: Set up JDK 1.8
                uses: actions/setup-java@v1
                with:
                    java-version: 1.8
            -   name: Setup Docker
                run: |
                    apt update
                    apt install -y apt-transport-https ca-certificates curl software-properties-common
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
                    apt update
                    apt-cache policy docker-ce
                    apt install -y docker-ce
            -   name: Grant execute permission for gradlew
                run: chmod +x gradlew
            -   name: Cache Gradle packages
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.gradle/caches
                        ~/.gradle/wrapper
                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                    restore-keys: |
                        ${{ runner.os }}-gradle001-
            -   name: Cache Node.js modules
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.npm
                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
                    restore-keys: |
                        ${{ runner.OS }}-node001-
            -   name: Run CI Tests
                run: >
                    ./gradlew :integration-tests:runContainerTests --info
                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
            -   name: Get Container Logs
                if: always()
                run: |
                    docker ps -a
                    docker ps -q | xargs -L 1 docker logs
            -   name: Store results
                uses: actions/upload-artifact@v2
                if: always()
                with:
                    name: ContainerCITests
                    path: |
                        integration-tests/build/reports/**
            -   name: Cleanup Gradle Cache
                run: |
                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
                    rm -f ~/.gradle/caches/modules-2/gc.properties
                    rm -rf ~/.gradle/caches/build-cache-1

#    CITestsRegistration:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Run CI Tests
#                run: >
#                    ./gradlew :integration-tests:runRegistrationTests --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsRegistration
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsZosmfRsu2012:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZOSMF_APPLIED_APARS: PH12143,RSU2012
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Build with Gradle
#                run: >
#                    ./gradlew :integration-tests:runZosmfAuthTest --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsZosmfRsu2012
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#
#    CITestsZosmfWithoutJwt:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZOSMF_APPLIED_APARS: ''
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Build with Gradle
#                run: >
#                    ./gradlew :integration-tests:runZosmfAuthTest --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsZosmfWithoutJwt
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#
#    CITestsZosmfWithoutJwtWithAuthenticateEndpoint:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZOSMF_APPLIED_APARS: AuthenticateApar
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Build with Gradle
#                run: >
#                    ./gradlew :integration-tests:runZosmfAuthTest --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsZosmfWithoutJwtWithAuthenticateEndpoint
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1

    CITestsInternalPort:
        needs: PublishJibContainers
        runs-on: ubuntu-latest
        container: ubuntu:latest
        timeout-minutes: 6

        services:
            api-catalog-services:
                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
                volumes:
                    - /api-layer/config/docker/api-defs:/api-defs
                env:
                    APIML_DISCOVERY_STATICAPIDEFINITIONSDIRECTORIES: /usr/local/etc/config/api-defs
            caching-service:
                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
            discoverable-client:
                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
            discovery-service:
                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
                volumes:
                    - /api-layer/config/docker/api-defs:/api-defs
            gateway-service:
                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
            mock-zosmf:
                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}

        steps:
            -   uses: actions/checkout@v2
                with:
                    ref: ${{ github.head_ref }}
            -   name: Set up JDK 1.8
                uses: actions/setup-java@v1
                with:
                    java-version: 1.8
            -   name: Grant execute permission for gradlew
                run: chmod +x gradlew
            -   name: Cache Gradle packages
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.gradle/caches
                        ~/.gradle/wrapper
                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                    restore-keys: |
                        ${{ runner.os }}-gradle001-
            -   name: Cache Node.js modules
                uses: actions/cache@v2
                with:
                    path: |
                        ~/.npm
                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
                    restore-keys: |
                        ${{ runner.OS }}-node001-
            -   name: Build with Gradle
                run: >
                    ./gradlew :integration-tests:runBaseTestsInternalPort --info -Denvironment.config=-docker -Denvironment.offPlatform=true
                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
            -   name: Store results
                uses: actions/upload-artifact@v2
                if: always()
                with:
                    name: ContainerCITestsInternalPort
                    path: |
                        integration-tests/build/reports/**
            -   name: Cleanup Gradle Cache
                run: |
                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
                    rm -f ~/.gradle/caches/modules-2/gc.properties
                    rm -rf ~/.gradle/caches/build-cache-1

#    CITestsWithRedis:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZWE_CACHING_SERVICE_PERSISTENT: 'redis'
#                    CACHING_STORAGE_REDIS_MASTERNODEURI: 'default:heslo@localhost:6379'
#                    CACHING_STORAGE_REDIS_SSL_ENABLED: true
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZOSMF_APPLIED_APARS: AuthenticateApar
#            redis-master:
#                image: redis:latest
#                ports:
#                    - "6379:6379"
#                volumes:
#                    - /api-layer/keystore:/usr/local/etc/keystore
#                    - /api-layer/docker/redis/config/master-tls.conf:/usr/local/etc/redis/redis.conf
#
#            redis-replica:
#                image: redis:latest
#                ports:
#                    - "6380:6380"
#                volumes:
#                    - /api-layer/keystore:/usr/local/etc/keystore
#                    - /api-layer/docker/redis/config/replica-tls.conf:/usr/local/etc/redis/redis.conf
#
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Build with Gradle
#                run: >
#                    ./gradlew :integration-tests:runCachingServiceTests --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsWithRedis
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsWithRedisWithoutSslVerification:
#        needs: PublishJibContainers
#        runs-on: ubuntu-latest
#        container: ubuntu:latest
#        timeout-minutes: 6
#
#        services:
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZWE_CACHING_SERVICE_PERSISTENT: 'redis'
#                    CACHING_STORAGE_REDIS_MASTERNODEURI: 'default:heslo@localhost:6379'
#                    CACHING_STORAGE_REDIS_SSL_ENABLED: false
#                    VERIFY_CERTIFICATES: false
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    VERIFY_CERTIFICATES: false
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    VERIFY_CERTIFICATES: false
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    ZOSMF_APPLIED_APARS: AuthenticateApar
#            redis-master:
#                image: redis:latest
#                ports:
#                    - "6379:6379"
#                volumes:
#                    - /api-layer/docker/redis/config/master.conf:/usr/local/etc/redis/redis.conf
#
#            redis-replica:
#                image: redis:latest
#                ports:
#                    - "6380:6380"
#                volumes:
#                    - /api-layer/docker/redis/config/replica.conf:/usr/local/etc/redis/redis.conf
#
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#            -   name: Build with Gradle
#                run: >
#                    ./gradlew :integration-tests:runCachingServiceTests --info -Denvironment.config=-docker -Denvironment.offPlatform=true
#                    -Partifactory_user=${{ secrets.ARTIFACTORY_USERNAME }} -Partifactory_password=${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: ContainerCITestsWithRedisWithoutSslVerification
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsHA:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            api-catalog-services-2:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: api-catalog-services-2
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client-2:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discoverable-client-2
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run HA Tests
#                run: >
#                    ./gradlew runHATests --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: CITestsHA
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    HALoadBalancing:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_CUSTOMMETADATA_APIML_LB_TYPE: authentication
#            discoverable-client-2:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discoverable-client-2
#                    APIML_SERVICE_CUSTOMMETADATA_APIML_LB_TYPE: authentication
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#                    APIML_ROUTING_INSTANCEIDHEADER: true
#                    APIML_LOADBALANCER_DISTRIBUTE: true
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#                    APIML_ROUTING_INSTANCEIDHEADER: true
#                    APIML_LOADBALANCER_DISTRIBUTE: true
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Setup Docker
#                if: ${{ false }} # Debug of containers
#                run: |
#                    apt update
#                    apt install -y apt-transport-https ca-certificates curl software-properties-common
#                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
#                    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
#                    apt update
#                    apt-cache policy docker-ce
#                    apt install -y docker-ce
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run HA Tests
#                run: >
#                    ./gradlew runLbHaTests --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#            -   name: Get Container Logs
#                if: ${{ false }} # Debug of containers
#                run: |
#                    docker ps -a
#                    docker ps -q | xargs -L 1 docker logs
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: LbHaTests
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsDiscoveryChaoticHA:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run Discovery Service Chaotic HA Tests
#                run: >
#                    ./gradlew :integration-tests:runChaoticHATests --tests org.zowe.apiml.integration.ha.DiscoveryChaoticTest
#                    --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: CITestsDiscoveryChaoticHA
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsGatewayChaoticHA:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run Gateway Service Chaotic HA Tests
#                run: >
#                    ./gradlew :integration-tests:runChaoticHATests --tests org.zowe.apiml.integration.ha.GatewayChaoticTest
#                    --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: CITestsGatewayChaoticHA
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsDicoverableClientChaoticHA:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client-2:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discoverable-client-2
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run Discoverable Client Chaotic HA Tests
#                run: >
#                    ./gradlew :integration-tests:runChaoticHATests --tests org.zowe.apiml.integration.ha.SouthboundServiceChaoticTest
#                    --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: CITestsDicoverableClientChaoticHA
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#    CITestsWebSocketChaoticHA:
#        needs: PublishJibContainers
#        container: ubuntu:latest
#        runs-on: ubuntu-latest
#        timeout-minutes: 6
#
#        services:
#            nginx:
#                image: nginx:latest
#                ports:
#                    - 443:443
#                volumes:
#                    - /$(pwd)/docker/nginx/load-balancer.conf:/etc/nginx
#                    - /$(pwd)/keystore/docker:/etc/ssl/private
#            api-catalog-services:
#                image: ghcr.io/balhar-jakub/api-catalog-services:${{ github.event.pull_request.number || 'latest' }}
#            caching-service:
#                image: ghcr.io/balhar-jakub/caching-service
#            discoverable-client:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#            discoverable-client-2:
#                image: ghcr.io/balhar-jakub/discoverable-client:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discoverable-client-2
#            mock-zosmf:
#                image: ghcr.io/balhar-jakub/mock-zosmf
#            discovery-service:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service:10011/eureka,https://discovery-service-2:10011/eureka
#            discovery-service-2:
#                image: ghcr.io/balhar-jakub/discovery-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: discovery-service-2
#                    APIML_DISCOVERY_ALLPEERSURLS: https://discovery-service-2:10011/eureka,https://discovery-service:10011/eureka
#            gateway-service:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#            gateway-service-2:
#                image: ghcr.io/balhar-jakub/gateway-service:${{ github.event.pull_request.number || 'latest' }}
#                env:
#                    APIML_SERVICE_HOSTNAME: gateway-service-2
#                    SERVER_INTERNAL_PORT: 10027
#                    APIML_SERVICE_DISCOVERYSERVICEURLS: https://discovery-service:10011/eureka/,https://discovery-service-2:10011/eureka/
#        steps:
#            -   uses: actions/checkout@v2
#                with:
#                    ref: ${{ github.head_ref }}
#            -   name: Set up JDK 1.8
#                uses: actions/setup-java@v1
#                with:
#                    java-version: 1.8
#            -   name: Grant execute permission for gradlew
#                run: chmod +x gradlew
#            -   name: Cache Gradle packages
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.gradle/caches
#                        ~/.gradle/wrapper
#                    key: ${{ runner.os }}-gradle001-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#                    restore-keys: |
#                        ${{ runner.os }}-gradle001-
#            -   name: Cache Node.js modules
#                uses: actions/cache@v2
#                with:
#                    path: |
#                        ~/.npm
#                    key: ${{ runner.OS }}-node001-${{ hashFiles('**/package-lock.json, **/package.json') }}
#                    restore-keys: |
#                        ${{ runner.OS }}-node001-
#
#            -   name: Run WebSocket Chaotic HA Tests
#                run: >
#                    ./gradlew :integration-tests:runChaoticHATests --tests org.zowe.apiml.integration.ha.WebSocketChaoticTest
#                    --info --scan -Denvironment.config=-ha -Denvironment.offPlatform=true
#                    -Partifactory_user=$ARTIFACTORY_USERNAME -Partifactory_password=$ARTIFACTORY_PASSWORD
#                env:
#                    ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#                    ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#
#            -   name: Store results
#                uses: actions/upload-artifact@v2
#                if: always()
#                with:
#                    name: CITestsWebSocketChaoticHA
#                    path: |
#                        integration-tests/build/reports/**
#            -   name: Cleanup Gradle Cache
#                run: |
#                    rm -f ~/.gradle/caches/modules-2/modules-2.lock
#                    rm -f ~/.gradle/caches/modules-2/gc.properties
#                    rm -rf ~/.gradle/caches/build-cache-1
#
#
