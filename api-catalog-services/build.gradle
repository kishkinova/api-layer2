buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
        classpath("org.eclipse.jgit:org.eclipse.jgit") {
            version {
                strictly '5.13.0.202109080827-r'
            }
        }
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6304
def debugPort = 5124
def componentName = "api-catalog-services"

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

configurations.all {
    resolutionStrategy {
        force (libraries.jetty_websocket_client, libraries.spring_security_web, libraries.spring_security_config)
    }
}

dependencies {
    implementation project(':apiml-tomcat-common')
    implementation project(':apiml-security-common')
    implementation project(':security-service-client-spring')

    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    implementation group: 'io.swagger', name: 'swagger-models', version: '1.6.2'
    implementation libraries.spring_boot_starter_web
    implementation libraries.spring_boot_starter_websocket
    implementation libraries.spring_boot_starter_actuator
    implementation libraries.spring_boot_configuration_processor
    implementation libraries.spring_cloud_commons
    implementation libraries.spring_cloud_starter_bootstrap
    implementation(libraries.spring_cloud_starter_eureka){
        exclude group: "com.google.code.gson", module: "gson"
    }
    implementation libraries.gson
    implementation libraries.spring_cloud_starter_hystrix
    implementation libraries.spring_retry
    implementation libraries.jackson_annotations
    implementation libraries.jackson_core
    implementation libraries.jackson_databind
    implementation libraries.apache_commons_lang3
    implementation libraries.spring_boot_starter_thymeleaf
    implementation libraries.apache_velocity
    implementation libraries.openapidiff
    implementation libraries.http_client
    implementation libraries.jetty_client
    implementation libraries.jetty_http
    implementation libraries.jetty_io
    implementation libraries.jetty_util
    implementation libraries.jetty_websocket_api
    implementation libraries.jetty_websocket_client
    implementation libraries.jetty_websocket_common
    implementation libraries.spring_security_config
    implementation libraries.spring_security_core
    implementation libraries.spring_security_crypto
    implementation libraries.spring_security_web
    implementation libraries.tomcat_annotations_api
    implementation libraries.tomcat_embed_core
    implementation libraries.tomcat_embed_el
    implementation libraries.tomcat_embed_websocket
    implementation libraries.xstream
    implementation libraries.commons_io
    implementation libraries.guava
    implementation libraries.spring_aop
    implementation libraries.spring_beans
    implementation libraries.spring_context
    implementation libraries.spring_context_support
    implementation libraries.spring_core
    implementation libraries.spring_expression
    implementation libraries.spring_messaging
    implementation libraries.spring_web
    implementation libraries.spring_webflux
    implementation libraries.spring_webmvc
    implementation libraries.spring_websocket
    implementation libraries.spring_doc
    implementation libraries.thymeleaf
    implementation libraries.thymeleafSpring
    implementation libraries.logback_core
    implementation libraries.logback_classic

    testImplementation libraries.rest_assured
    testImplementation libraries.spring_mock_mvc

    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok

    testImplementation libraries.spring_boot_starter_test
    testImplementation libraries.json_smart
}

bootJar {
    archiveFileName = "api-catalog-services.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

def uiModule = "${project(':api-catalog-ui').projectDir}"

processResources {
    dependsOn "copyUi"
}

task copyUi(type: Copy) {
    group = "ui"

    dependsOn ":api-catalog-ui:build"

    inputs.dir(uiModule + '/frontend/build')
    outputs.dir('src/main/resources/static')

    from uiModule + '/frontend/build'
    into 'src/main/resources/static'
}

bootRun {
    if (project.hasProperty('args')) {
             args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'api-catalog-fat-jar'

            artifact bootJar
        }
    }
}
