buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

configurations.all {
    resolutionStrategy {
        force (libraries.jetty_websocket_client)
    }
}

dependencies {
    compile(project(':apiml-security-common'))
    compile libraries.spring_cloud_starter_zuul
    compile libraries.spring_boot_starter_actuator
    compile libraries.spring_boot_starter_web
    compile libraries.spring_boot_starter_websocket
    compile libraries.spring_boot_starter_thymeleaf
    compile libraries.spring_boot_starter_cache
    compile libraries.spring_security_web
    compile libraries.spring_security_config
    compile libraries.swagger3_core
    compile libraries.swagger3_parser
    compile libraries.jackson_core
    compile libraries.tomcat_coyote
    compile libraries.tomcat_embed_core
    compile libraries.spring_cloud_starter_eureka
    compile libraries.spring_cloud_starter_ribbon
    compile libraries.jetty_websocket_client
    compile libraries.jetty_util
    compile libraries.jjwt
    compile libraries.nimbusJoseJwt
    compile libraries.eh_cache

    compileOnly libraries.javax_inject
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    compile libraries.springFox
    testCompile libraries.spring_mock_mvc
    testCompile libraries.spring_boot_starter_test
    testRuntime libraries.http_client
    testCompile libraries.rest_assured

    testCompile libraries.lombok
    testAnnotationProcessor libraries.lombok

    testCompile libraries.powermock_api_mockito2
    testCompile libraries.power_mock_junit4
    testCompile libraries.power_mock_junit4_rule
}

bootJar.archiveName = "${bootJar.baseName}.jar"

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

jar {
    enabled = true
    archiveName = "${jar.baseName}-thin.jar"

    def libClassPathEntries = configurations.compile.files.collect {
        "lib/" + it.getName()
    }
    doFirst {
        manifest {
            attributes "Class-Path": libClassPathEntries.join(" "),
                "Main-Class": "org.zowe.apiml.gateway.GatewayApplication"
        }
    }
}
