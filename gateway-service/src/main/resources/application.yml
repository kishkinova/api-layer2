spring:
    application:
        name: gateway
    cloud:
        client:
            hostname: ${environment.hostname}
            ipAddress: ${environment.ipAddress}
    mvc:
        throw-exception-if-no-handler-found: true
    output:
        ansi:
            enabled: detect

logging:
    level:
        ROOT: INFO
        com.ca.mfaas: INFO
        org.springframework: WARN
        org.apache.catalina: WARN
        com.netflix: WARN
        com.netflix.discovery: ERROR
        com.netflix.config: ERROR
        com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient: OFF
        com.netflix.discovery.DiscoveryClient: OFF
        org.springframework.boot.web.embedded.tomcat.TomcatWebServer: INFO
        org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand: ERROR
        org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter: ERROR
        org.apache.tomcat.websocket: WARN
        org.springframework.web.socket: WARN
        com.ca.mfaas.ws: INFO
        com.ca.mfaas.gateway.config.error: INFO
        org.eclipse.jetty: WARN
        #pattern:
        #console: "%-5p -- [%d{yyyy-MMM-dd HH:mm:ss.SSS}] %c -- %msg%n"

##############################################################################################
# MFAAS configuration section
##############################################################################################
mfaas:
    discovery:
        serviceId: ${spring.application.name}
        enabled: ${environment.discoveryEnabled:true}
        locations: ${environment.discoveryLocations}
        fetchRegistry: true
        registerWithEureka: true
        region: default
        endpoints:
            statusPage: application/info
            healthPage: application/health
            homePage:
        info:
            serviceTitle: API Gateway
            description: API Gateway service to route requests to services registered in the API Mediation Layer and provides an API for mainframe security.
            enableApiDoc: false
            swaggerLocation: gateway-api-doc.json
    service:
        hostname: ${environment.hostname}
        ipAddress: ${environment.ipAddress}
    catalog-ui-tile:
        id: apimediationlayer
        title: API Mediation Layer API
        description: API Mediation Layer for z/OS internal API services.
        version:  1.0.0
    server:
        preferIpAddress: ${environment.preferIpAddress:false}
        ipAddress: ${environment.dsIpAddress}
        port: ${environment.port}
        scheme: ${environment.scheme:https}
    security:
        esmEnabled: ${environment.esmEnabled:false}
        sslEnabled: ${environment.sslEnabled:true}
        protocol: TLSv1.2
        ciphers: TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
        keyAlias: ${environment.keyAlias}
        keyPassword: ${environment.keyPassword}
        keyStore: ${environment.keystore}
        keyStoreType: ${environment.keystoreType}
        keyStorePassword: ${environment.keystorePassword}
        trustStore: ${environment.truststore}
        trustStoreType: ${environment.truststoreType}
        trustStorePassword: ${environment.truststorePassword}
    gateway:
        gatewayHostname: ${environment.gatewayHostname}
        timeoutInMillis: ${environment.gatewayTimeoutInMillis:30000}
        debugHeaders: false
        histrixTimeoutInMillis: ${environment.histrixTimeoutInMillis:240000}
        verifySslCertificatesOfServices: true

##############################################################################################

server:
    address: ${mfaas.server.ipAddress}
    port: ${mfaas.server.port}
    ssl:
        enabled: ${mfaas.security.sslEnabled}
        protocol: ${mfaas.security.protocol}
        ciphers: ${mfaas.security.ciphers}
        keyStore: ${mfaas.security.keyStore}
        keyAlias: ${mfaas.security.keyAlias}
        keyPassword: ${mfaas.security.keyPassword}
        keyStorePassword: ${mfaas.security.keyStorePassword}
        keyStoreType: ${mfaas.security.keyStoreType}
        trustStore: ${mfaas.security.trustStore}
        trustStoreType: ${mfaas.security.trustStoreType}
        trustStorePassword: ${mfaas.security.trustStorePassword}

zuul:
    sslHostnameValidationEnabled: false
    traceRequestBody: true
    ignoreSecurityHeaders: false
    includeDebugHeader: ${mfaas.gateway.debugHeaders}
    sensitiveHeaders: Expires,Date
    ignoredPatterns:
        - /ws/**
    host:
        connectTimeoutMillis: ${mfaas.gateway.timeoutInMillis}
        socketTimeoutMillis: ${mfaas.gateway.timeoutInMillis}

ribbon:
    eureka:
        enabled: true
    IsSecure: false
    ConnectTimeout: ${mfaas.gateway.timeoutInMillis}
    ReadTimeout: ${mfaas.gateway.timeoutInMillis}
    ConnectionManagerTimeout: ${mfaas.gateway.timeoutInMillis}

http:
    connection:
        timeout: ${mfaas.gateway.timeoutInMillis}
    socket:
        timeout: ${mfaas.gateway.timeoutInMillis}

feign:
    hystrix:
        enabled: false

hystrix:
    command:
        default:
            fallback:
                enabled: false
            circuitBreaker:
                enabled: false
            execution:
                timeout:
                    enabled: false
                isolation:
                    thread:
                        timeoutInMilliseconds: ${mfaas.gateway.timeoutInMillis}
                    strategy: SEMAPHORE
                    semaphore:
                        maxConcurrentRequests: 100000

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: health,info,routes
    health:
        defaults:
            enabled: false

eureka:
    instance:
        hostname: ${mfaas.service.hostname}
        statusPageUrl: ${mfaas.server.scheme}://${mfaas.gateway.gatewayHostname}:${mfaas.server.port}/${mfaas.discovery.endpoints.statusPage}
        healthCheckUrl: ${mfaas.server.scheme}://${mfaas.gateway.gatewayHostname}:${mfaas.server.port}/${mfaas.discovery.endpoints.healthPage}
        secureHealthCheckUrl: ${mfaas.server.scheme}://${mfaas.gateway.gatewayHostname}:${mfaas.server.port}/${mfaas.discovery.endpoints.healthPage}
        homePageUrl: ${mfaas.server.scheme}://${mfaas.gateway.gatewayHostname}:${mfaas.server.port}/${mfaas.discovery.endpoints.homePage}
        ipAddress: ${mfaas.service.ipAddress}
        preferIpAddress: ${mfaas.server.preferIpAddress}
        securePort: ${mfaas.server.port}
        securePortEnabled: ${mfaas.security.sslEnabled}
        nonSecurePortEnabled: false
        virtualHostName: ${mfaas.discovery.serviceId}
        secureVirtualHostName: ${mfaas.discovery.serviceId}
        metadata-map:
            routed-services:
                api-doc:
                    gateway-url: /api/v1/api-doc
                    service-url: /api-doc
            mfaas:
                discovery:
                    catalogUiTile:
                        id: ${mfaas.catalog-ui-tile.id}
                        title:  ${mfaas.catalog-ui-tile.title}
                        description: ${mfaas.catalog-ui-tile.description}
                        version: ${mfaas.catalog-ui-tile.version}
                    enableApiDoc: ${mfaas.discovery.info.enableApiDoc}
                    service:
                        title: ${mfaas.discovery.info.serviceTitle}
                        description: ${mfaas.discovery.info.description}
                api-info:
                    swagger:
                        location: ${mfaas.discovery.info.swaggerLocation:}
                    apiVersionProperties:
                        v1:
                            title: API Gateway
                            description: REST API for the API Gateway service which is a component of the API Mediation Layer. Use this API to access the Enterprise z/OS Security Manager to perform tasks such as logging in with mainframe credentials and checking authorization to mainframe resources.
                            version: 1.0.0

    client:
        fetchRegistry: ${mfaas.discovery.fetchRegistry}
        registerWithEureka:  ${mfaas.discovery.registerWithEureka}
        region: ${mfaas.discovery.region}
        serviceUrl:
            defaultZone: ${mfaas.discovery.locations}
        healthcheck:
            enabled: true # always true


---
spring:
    profiles: diag

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: "*"

---
spring:
    profiles: dev
    profiles.include:
        diag

logging:
    level:
        ROOT: INFO
        com.ca.mfaas: DEBUG
        org.springframework: INFO
        org.apache.catalina: INFO
        com.netflix: INFO
