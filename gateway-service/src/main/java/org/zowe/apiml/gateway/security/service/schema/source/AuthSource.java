/*
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 */

package org.zowe.apiml.gateway.security.service.schema.source;

import org.zowe.apiml.security.common.token.QueryResponse;
import org.zowe.apiml.security.common.token.TokenNotValidException;

import java.io.Serializable;
import java.util.Date;

/**
 * Interface defines general source of authentication. Keeps original source of authentication (JWT token, client certificate etc.).
 */
public interface AuthSource extends Serializable {

    /**
     * Returns the original (unparsed) source of the authentication - JWT token, client certificate etc.
     *
     * @return original source of authentication
     */
    Object getRawSource();

    /**
     * Return type of the authentication source
     *
     * @return {@link AuthSourceType}
     */
    AuthSourceType getType();

    /**
     * Interface defines general parsed form of the authentication source.
     */
    interface Parsed {
        String getUserId();

        Date getCreation();

        Date getExpiration();

        Origin getOrigin();
    }

    /**
     * Defines supported origins of the authentication
     */
    enum Origin {

        // JWT token is generated by Zowe (including ie. LTPA token from z/OSMF)
        ZOWE,
        // Zowe uses JWT token generated by z/OSMF
        ZOSMF,
        // X509 client certificate
        X509,
        // personal access token generated by Zowe
        ZOWE_PAT,
        // OIDC token
        OIDC;

        /**
         * Find the origin of the authentication source object by JWT token source
         *
         * @param source The source of JWT token
         * @return which system generated the authentication token
         */
        public static Origin valueByTokenSource(QueryResponse.Source source) {
            switch (source) {
                case ZOSMF:
                    return ZOSMF;
                case ZOWE:
                    return ZOWE;
                case ZOWE_PAT:
                    return ZOWE_PAT;
                case OIDC:
                    return OIDC;
                default:
                    throw new TokenNotValidException("Unknown authentication source type : " + source.name());
            }
        }
    }

    /**
     * Defines supported type of authentication source - JWT token and client certificate
     */
    enum AuthSourceType {
        JWT,
        CLIENT_CERT,
        PAT,
        OIDC
    }
}
