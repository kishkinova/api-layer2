/*
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 */
package org.zowe.apiml.gateway.security.service.schema.source;

import java.io.Serializable;
import java.util.Date;
import org.apache.commons.lang3.StringUtils;
import org.zowe.apiml.security.common.token.QueryResponse;
import org.zowe.apiml.security.common.token.TokenNotValidException;

/**
 * Interface defines general source of authentication. Keeps original source of authentication (JWT token, client certificate etc.).
 */
public interface AuthSource extends Serializable {
    Object getRawSource();

    interface Parsed {
        String getUserId();
        Date getCreation();
        Date getExpiration();
        Origin getOrigin();
    }

    enum Origin {

        // JWT token is generated by Zowe (including ie. LTPA token from z/OSMF)
        ZOWE,
        // Zowe uses JWT token generated by z/OSMF
        ZOSMF,
        // X509 client certificate
        X509;

        /**
         * Find the origin of the authentication source object
         * @param issuer issuer
         * @return which system generated the authentication source
         */
        public static Origin valueByIssuer(String issuer) {
            if (StringUtils.equalsIgnoreCase(issuer, QueryResponse.Source.ZOSMF.name())) {
                return ZOSMF;
            }
            if (StringUtils.equalsIgnoreCase(issuer, QueryResponse.Source.ZOWE.name())) {
                return ZOWE;
            }
            if (StringUtils.equalsIgnoreCase(issuer, "X509")) {
                return X509;
            }
            throw new TokenNotValidException("Unknown authentication source type : " + issuer);
        }
    }
}
