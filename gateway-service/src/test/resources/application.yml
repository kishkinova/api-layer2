logging:
    level:
        ROOT: INFO
        com.ca.mfaas: INFO
        org.springframework: WARN
        org.apache.catalina: WARN
        com.netflix: WARN
        com.netflix.discovery: ERROR
        com.netflix.config: ERROR
        com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient: OFF
        com.netflix.discovery.DiscoveryClient: OFF
        org.springframework.boot.web.embedded.tomcat.TomcatWebServer: INFO
        org.springframework.cloud.netflix.zuul.filters.route.support.AbstractRibbonCommand: ERROR
        org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter: ERROR
        org.apache.tomcat.websocket: WARN
        org.springframework.web.socket: WARN
        com.ca.mfaas.ws: INFO
        com.ca.mfaas.gateway.error: INFO
        org.eclipse.jetty: WARN

apiml:
    # The `apiml` node contains API Mediation Layer specific configuration
    service:
        # The `apiml.service` node contains information required by any APIML service
        id: gateway  # Service ID of this service. It is fixed for APIML API Gateway
        hostname: localhost  # Hostname that is advertised in Eureka. Default is valid only for localhost
        port: 20010  # Default port name for gateway service
        ipAddress: 127.0.0.1  # IP address that is advertised in Eureka. Default is valid only for localhost
        preferIpAddress: false
    gateway:
        # The `apiml.gateway` node contains gateway-service only configuration
        timeoutMillis: 30000  # Userid that Eureka server will use to check authentication of its clients (other services)

spring:
    application:
        name: ${apiml.service.id}
    cloud:
        client:
            hostname: ${apiml.service.hostname}
            ipAddress: ${apiml.service.ipAddress}
    mvc:
        throw-exception-if-no-handler-found: true
    output:
        ansi:
            enabled: detect

server:
    address: ${apiml.service.ipAddress}
    port: ${apiml.service.port}
    ssl:
        enabled: true
        protocol: TLSv1.2
        ciphers: TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
        keyStoreType: PKCS12
        trustStore: keystore/localhost/localhost.truststore.p12
        trustStorePassword: password
        trustStoreType: PKCS12

zuul:
    sslHostnameValidationEnabled: false
    traceRequestBody: true
    ignoreSecurityHeaders: false
    includeDebugHeader: false
    sensitiveHeaders: Expires,Date
    ignoredPatterns:
        - /ws/**
    host:
        connectTimeoutMillis: ${apiml.gateway.timeoutMillis}
        socketTimeoutMillis: ${apiml.gateway.timeoutMillis}

ribbon:
    IsSecure: false
    ConnectTimeout: ${apiml.gateway.timeoutMillis}
    ReadTimeout: ${apiml.gateway.timeoutMillis}
    ConnectionManagerTimeout: ${apiml.gateway.timeoutMillis}

http:
    connection:
        timeout: ${apiml.gateway.timeoutMillis}
    socket:
        timeout: ${apiml.gateway.timeoutMillis}

hystrix:
    command:
        default:
            fallback:
                enabled: false
            circuitBreaker:
                enabled: false
            execution:
                timeout:
                    enabled: false
                isolation:
                    thread:
                        timeoutInMilliseconds: ${apiml.gateway.timeoutMillis}
                    strategy: SEMAPHORE
                    semaphore:
                        maxConcurrentRequests: 100000

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: health,info,routes
    health:
        defaults:
            enabled: false

eureka:
    instance:
        hostname: ${apiml.service.hostname}
        ipAddress: ${apiml.service.ipAddress}
        port: ${server.port}
        securePort: ${server.port}
        nonSecurePortEnabled: true
        securePortEnabled: false
        preferIpAddress: ${apiml.service.preferIpAddress}
        homePageUrl: https://${apiml.service.hostname}:${apiml.service.port}/
        statusPageUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/info
        healthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/health
        secureHealthCheckUrl: https://${apiml.service.hostname}:${apiml.service.port}/application/health
        metadata-map:
            mfaas:
                discovery:
                    enableApiDoc: false
                    serviceTitle: API Gateway
                    description: API Gateway to access REST APIs of registered services
    client:
        fetchRegistry: true
        registerWithEureka: true
        region: default
        serviceUrl:
            defaultZone: ${apiml.service.discoveryServiceUrls}
        healthcheck:
            enabled: true

---
spring:
    profiles: diag

management:
    endpoints:
        web:
            base-path: /application
            exposure:
                include: "*"

---
spring:
    profiles: dev
    profiles.include:
        diag

logging:
    level:
        ROOT: INFO
        com.ca.mfaas: DEBUG
        org.springframework: INFO
        org.apache.catalina: INFO
        com.netflix: INFO
        org.hibernate: INFO


