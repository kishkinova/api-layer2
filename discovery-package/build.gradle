ext {
    artifactName = 'discovery-package'
    pullNo = project.hasProperty("pullRequest") && project.getProperty("pullRequest") != null ? "-" + project.getProperty("pullRequest") : ""
}

configurations {
    discoveryServiceJar
    zip
}

dependencies {
    discoveryServiceJar(project(path: ":discovery-service", configuration: "liteJarConfiguration"))
}

task packageDiscovery(type: Zip) {
    archiveFileName = artifactName + pullNo + ".zip"
    includeEmptyDirs = true
    def resourceDir = 'src/main/resources/'

    into('/') {
        from "$resourceDir/manifest.yaml", "$resourceDir/zosmf-static-definition.yaml.template"
        from "../schemas/discovery-schema.json"
    }

    into('bin/') {
        from configurations.discoveryServiceJar
        from "$resourceDir/bin/start.sh"
        from "$resourceDir/bin/configure.sh"
        from "$resourceDir/bin/validate.sh"
    }
}

// save build information to manifest
packageDiscovery.doFirst {
    String manifest = file('src/main/resources/manifest.yaml').text

    def getCommitHash = 'git rev-parse --verify HEAD'.execute()
    def commit_hash = new ByteArrayOutputStream()
    def command_err = new ByteArrayOutputStream()
    getCommitHash.consumeProcessOutput(commit_hash, command_err)
    getCommitHash.waitForOrKill(1000)

    manifest = manifest.replaceAll("\\{\\{build.branch\\}\\}", System.getenv("BRANCH_NAME") ?: "")
        .replaceAll("\\{\\{build.number\\}\\}", System.getenv("BUILD_NUMBER") ?: "")
        .replaceAll("\\{\\{build.commitHash\\}\\}", commit_hash.toString().trim())
        .replaceAll("\\{\\{build.timestamp\\}\\}", (new Date()).getTime().toString())

    def scriptOutputDir = new File("$buildDir/convert/");
    if (!scriptOutputDir.exists()) {
        scriptOutputDir.mkdirs();
    }
    File convertedManifest = new File("$buildDir/convert/manifest.yaml");
    if (convertedManifest.exists()) {
        convertedManifest.delete();
    }
    convertedManifest.createNewFile();
    convertedManifest.write(manifest)
}

jar.dependsOn(packageDiscovery)
build.dependsOn(packageDiscovery)

artifacts {
    zip packageDiscovery
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact("$buildDir/distributions/$artifactName" + pullNo + ".zip")
        }
    }
}

jar {
    enabled false
}
