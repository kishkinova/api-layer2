buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.3")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
        classpath("org.eclipse.jgit:org.eclipse.jgit") {
            version {
                strictly '5.13.0.202109080827-r'
            }
        }
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6310
def debugPort = 5130
def componentName = "cloud-gateway-service"

setJib(componentName, javaAgentPort, debugPort)
jib.container.mainClass = 'org.zowe.apiml.cloudgatewayservice.CloudGatewayServiceApplication'

ext['netty.version'] = '4.1.86.Final'
ext['reactor-bom.version'] = '2020.0.26'
springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    implementation project(':common-service-core')
    implementation(libraries.spring_cloud_starter_gateway) {
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-el"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-reactor-netty"
    }
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:2.7.7'


    implementation libraries.spring_context
    implementation libraries.bcprov
    implementation libraries.snakeyaml
    implementation(libraries.spring_eureka_client_v3) {
        exclude group: "com.thoughtworks.xstream", module: "xstream"
        exclude group: "com.google.guava", module: "guava"
        exclude group: "org.codehaus.jettison", module: "jettison"
        exclude group: "com.fasterxml.woodstox", module: "woodstox-core"
        exclude group: "org.springframework", module: "spring-beans"
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-web"
    }
    implementation 'org.springframework.boot:spring-boot-starter-security:2.7.7'

    implementation libraries.xstream
    implementation libraries.woodstox
    implementation libraries.jettison
    implementation libraries.jackson_databind
    implementation libraries.guava
    implementation libraries.tomcat_embed_el
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.7'

    implementation(libraries.spring_cloud_circuit_breaker) {
        exclude group: "org.springframework.security", module: "spring-security-crypto"
    }
    implementation libraries.spring_security_crypto
    implementation libraries.spring_security_config
    implementation libraries.spring_security_core
    implementation libraries.spring_security_web
    implementation libraries.spring_beans
    implementation libraries.spring_core
    implementation libraries.spring_web
    implementation libraries.spring_aop
    implementation libraries.spring_expression
    implementation libraries.bcpkix

    compileOnly libraries.lombok
    annotationProcessor libraries.lombok
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.7.7'


    testCompileOnly libraries.lombok
    testAnnotationProcessor libraries.lombok
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.7'
    testImplementation libraries.rest_assured
}

bootJar {
    archiveFileName = "cloud-gateway-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'cloud-gateway-fat-jar'

            artifact bootJar
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '7.2'
}
