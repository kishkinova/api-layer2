buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6310
def debugPort = 5130
def componentName = "cloud-gateway-service"

setJib(componentName, javaAgentPort, debugPort)
jib.container.mainClass = 'org.zowe.apiml.cloudgatewayservice.CloudGatewayServiceApplication'

ext['netty.version'] = libs.versions.nettyVersion.get()
ext['reactor-bom.version'] = libs.versions.reactorBomVersion.get()
springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    implementation project(':common-service-core')
    implementation libs.spring.cloud.starter.gateway
    implementation libs.netty.reactor.core
    implementation libs.netty.reactor.http

    implementation libs.spring.eureka.client.v3
    implementation libs.spring.boot.starter.security

    implementation libs.jackson.databind
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.web

    implementation libs.spring.cloud.circuit.breaker
    implementation libs.spring.security.config
    implementation libs.spring.security.core
    implementation libs.spring.security.web
    implementation libs.spring.aop
    implementation libs.spring.expression
    implementation libs.bcpkix

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.spring.boot.configuration.processor

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.rest.assured
}

bootJar {
    archiveFileName = "cloud-gateway-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'cloud-gateway-fat-jar'

            artifact bootJar
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = libs.versions.gradle.get()
}
